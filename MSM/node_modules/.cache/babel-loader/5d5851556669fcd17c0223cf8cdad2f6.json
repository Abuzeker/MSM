{"ast":null,"code":"import React from'react';import{Page,Text,View,Document,StyleSheet,ReactPDF,PDFDownloadLink}from'@react-pdf/renderer';import{Button,Table,Tabs}from'antd';import html2canvas from'html2canvas';import jsPDF from'jspdf';import Svgexporttest from'./Svgexporttest';import Excel from'exceljs';import{saveAs}from'file-saver';import XlsxPopulate from'xlsx-populate';// const columns = [\n//     {\n//         title: 'Full Name',\n//         width: 100,\n//         dataIndex: 'name',\n//         key: 'name',\n//         fixed: 'left',\n//     },\n//     {\n//         title: 'Age',\n//         width: 100,\n//         dataIndex: 'age',\n//         key: 'age',\n//         fixed: 'left',\n//     },\n//     {\n//         title: 'Column 1',\n//         dataIndex: 'address',\n//         key: '1',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 2',\n//         dataIndex: 'address',\n//         key: '2',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 3',\n//         dataIndex: 'address',\n//         key: '3',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 4',\n//         dataIndex: 'address',\n//         key: '4',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 5',\n//         dataIndex: 'address',\n//         key: '5',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 6',\n//         dataIndex: 'address',\n//         key: '6',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 7',\n//         dataIndex: 'address',\n//         key: '7',\n//         width: 150,\n//     },\n//     { title: 'Column 8', dataIndex: 'address', key: '8' },\n//     {\n//         title: 'Action',\n//         key: 'operation',\n//         fixed: 'right',\n//         width: 100,\n//         render: () => <a>action</a>,\n//     },\n// ];\n// const data = [];\n// for (let i = 0; i < 100; i++) {\n//     data.push({\n//         key: i,\n//         name: `Edrward ${i}`,\n//         age: 32,\n//         address: `London Park no. ${i}`,\n//     });\n// }\nimport{jsx as _jsx}from\"react/jsx-runtime\";var Testpage1=function Testpage1(){// const WriteExcelCell = () => {\n//     function s2ab(s) {\n//         var buf = new ArrayBuffer(s.length);\n//         var view = new Uint8Array(buf);\n//         for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\n//         return buf;\n//     }\n//     let test = [\n//         [\n//             '11', '11', '11', '11', '11'\n//         ],\n//         [\n//             '12', '12', '12', '12', '12'\n//         ]\n//     ]\n//     fetch(\"ExtruderSheet.xlsx\")\n//         .then(res => res.arrayBuffer())\n//         .then(ab => {\n//             const wb = XLSX.read(ab, { type: \"string\" });\n//             const wsname = wb.SheetNames[0];\n//             const ws = wb.Sheets[wsname];\n//             XLSX.utils.sheet_add_aoa(ws, test, { origin: 'O6' });\n//             let wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\n//             console.log('Done');\n//             saveAs(new Blob([s2ab(wbout)], { type: \"application/octet-stream\" }), 'test.xlsx');\n//         })\n// }\nvar TestEcelHandler=function TestEcelHandler(){fetch('ExtruderSheet.xlsx').then(function(res){return res.arrayBuffer();}).then(function(buffer){XlsxPopulate.fromDataAsync(buffer).then(function(workbook){// r = workbook.sheet(0).cell(\"A8\").value(\"foo\");\nvar r=workbook.sheet(0).range(\"A7:C9\");r.value([[1,2,3],[4,5,6],[7,8,9]]);workbook.outputAsync().then(function(blob){if(window.navigator&&window.navigator.msSaveOrOpenBlob){// If IE, you must uses a different method.\nwindow.navigator.msSaveOrOpenBlob(blob,\"out.xlsx\");}else{var url=window.URL.createObjectURL(blob);var a=document.createElement(\"a\");document.body.appendChild(a);a.href=url;a.download=\"ExtruderSheet.xlsx\";a.click();window.URL.revokeObjectURL(url);document.body.removeChild(a);}});}).then(function(data){// saveAs(new Blob([s2ab(data)], { type: \"application/octet-stream\" }), 'test.xlsx');\nconsole.log(data);// upload data to AWS S3\n}).catch(function(err){return console.error(err);});});};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Button,{onClick:TestEcelHandler,children:\"capture\"})});};export default Testpage1;","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/TestPage/Testpage1.jsx"],"names":["React","Page","Text","View","Document","StyleSheet","ReactPDF","PDFDownloadLink","Button","Table","Tabs","html2canvas","jsPDF","Svgexporttest","Excel","saveAs","XlsxPopulate","Testpage1","TestEcelHandler","fetch","then","res","arrayBuffer","buffer","fromDataAsync","workbook","r","sheet","range","value","outputAsync","blob","window","navigator","msSaveOrOpenBlob","url","URL","createObjectURL","a","document","createElement","body","appendChild","href","download","click","revokeObjectURL","removeChild","data","console","log","catch","err","error"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,IAAf,CAAqBC,IAArB,CAA2BC,QAA3B,CAAqCC,UAArC,CAAiDC,QAAjD,CAA2DC,eAA3D,KAAkF,qBAAlF,CACA,OAASC,MAAT,CAAiBC,KAAjB,CAAwBC,IAAxB,KAAoC,MAApC,CACA,MAAOC,CAAAA,WAAP,KAAwB,aAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,OAASC,MAAT,KAAuB,YAAvB,CACA,MAAOC,CAAAA,YAAP,KAAyB,eAAzB,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;2CAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CAEpB;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAE1BC,KAAK,CAAC,oBAAD,CAAL,CACKC,IADL,CACU,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,WAAJ,EAAJ,EADb,EAEKF,IAFL,CAEU,SAAAG,MAAM,CAAI,CACZP,YAAY,CAACQ,aAAb,CAA2BD,MAA3B,EACKH,IADL,CACU,SAAAK,QAAQ,CAAI,CAEd;AACA,GAAMC,CAAAA,CAAC,CAAGD,QAAQ,CAACE,KAAT,CAAe,CAAf,EAAkBC,KAAlB,CAAwB,OAAxB,CAAV,CAEAF,CAAC,CAACG,KAAF,CAAQ,CACJ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CADI,CAEJ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAFI,CAGJ,CAAC,CAAD,CAAI,CAAJ,CAAO,CAAP,CAHI,CAAR,EAMAJ,QAAQ,CAACK,WAAT,GACKV,IADL,CACU,SAAUW,IAAV,CAAgB,CAClB,GAAIC,MAAM,CAACC,SAAP,EAAoBD,MAAM,CAACC,SAAP,CAAiBC,gBAAzC,CAA2D,CACvD;AACAF,MAAM,CAACC,SAAP,CAAiBC,gBAAjB,CAAkCH,IAAlC,CAAwC,UAAxC,EACH,CAHD,IAGO,CACH,GAAII,CAAAA,GAAG,CAAGH,MAAM,CAACI,GAAP,CAAWC,eAAX,CAA2BN,IAA3B,CAAV,CACA,GAAIO,CAAAA,CAAC,CAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAR,CACAD,QAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BJ,CAA1B,EACAA,CAAC,CAACK,IAAF,CAASR,GAAT,CACAG,CAAC,CAACM,QAAF,CAAa,oBAAb,CACAN,CAAC,CAACO,KAAF,GACAb,MAAM,CAACI,GAAP,CAAWU,eAAX,CAA2BX,GAA3B,EACAI,QAAQ,CAACE,IAAT,CAAcM,WAAd,CAA0BT,CAA1B,EACH,CACJ,CAfL,EAgBH,CA5BL,EA6BKlB,IA7BL,CA6BU,SAAA4B,IAAI,CAAI,CACV;AACAC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EACA;AACH,CAjCL,EAkCKG,KAlCL,CAkCW,SAAAC,GAAG,QAAIH,CAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd,CAAJ,EAlCd,EAmCH,CAtCL,EAuCH,CAzCD,CA8CA,mBACI,kCACI,KAAC,MAAD,EAAQ,OAAO,CAAElC,eAAjB,qBADJ,EADJ,CAUH,CA/FD,CAkGA,cAAeD,CAAAA,SAAf","sourcesContent":["import React from 'react'\r\nimport { Page, Text, View, Document, StyleSheet, ReactPDF, PDFDownloadLink } from '@react-pdf/renderer';\r\nimport { Button, Table, Tabs } from 'antd';\r\nimport html2canvas from 'html2canvas'\r\nimport jsPDF from 'jspdf'\r\nimport Svgexporttest from './Svgexporttest';\r\nimport Excel from 'exceljs'\r\nimport { saveAs } from 'file-saver';\r\nimport XlsxPopulate from 'xlsx-populate'\r\n\r\n\r\n// const columns = [\r\n//     {\r\n//         title: 'Full Name',\r\n//         width: 100,\r\n//         dataIndex: 'name',\r\n//         key: 'name',\r\n//         fixed: 'left',\r\n//     },\r\n//     {\r\n//         title: 'Age',\r\n//         width: 100,\r\n//         dataIndex: 'age',\r\n//         key: 'age',\r\n//         fixed: 'left',\r\n//     },\r\n//     {\r\n//         title: 'Column 1',\r\n//         dataIndex: 'address',\r\n//         key: '1',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 2',\r\n//         dataIndex: 'address',\r\n//         key: '2',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 3',\r\n//         dataIndex: 'address',\r\n//         key: '3',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 4',\r\n//         dataIndex: 'address',\r\n//         key: '4',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 5',\r\n//         dataIndex: 'address',\r\n//         key: '5',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 6',\r\n//         dataIndex: 'address',\r\n//         key: '6',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 7',\r\n//         dataIndex: 'address',\r\n//         key: '7',\r\n//         width: 150,\r\n//     },\r\n//     { title: 'Column 8', dataIndex: 'address', key: '8' },\r\n//     {\r\n//         title: 'Action',\r\n//         key: 'operation',\r\n//         fixed: 'right',\r\n//         width: 100,\r\n//         render: () => <a>action</a>,\r\n//     },\r\n// ];\r\n\r\n// const data = [];\r\n// for (let i = 0; i < 100; i++) {\r\n//     data.push({\r\n//         key: i,\r\n//         name: `Edrward ${i}`,\r\n//         age: 32,\r\n//         address: `London Park no. ${i}`,\r\n//     });\r\n// }\r\n\r\nconst Testpage1 = () => {\r\n\r\n    // const WriteExcelCell = () => {\r\n\r\n    //     function s2ab(s) {\r\n\r\n    //         var buf = new ArrayBuffer(s.length);\r\n    //         var view = new Uint8Array(buf);\r\n    //         for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\r\n    //         return buf;\r\n\r\n    //     }\r\n\r\n    //     let test = [\r\n    //         [\r\n    //             '11', '11', '11', '11', '11'\r\n    //         ],\r\n    //         [\r\n    //             '12', '12', '12', '12', '12'\r\n    //         ]\r\n    //     ]\r\n\r\n    //     fetch(\"ExtruderSheet.xlsx\")\r\n    //         .then(res => res.arrayBuffer())\r\n    //         .then(ab => {\r\n    //             const wb = XLSX.read(ab, { type: \"string\" });\r\n    //             const wsname = wb.SheetNames[0];\r\n    //             const ws = wb.Sheets[wsname];\r\n\r\n    //             XLSX.utils.sheet_add_aoa(ws, test, { origin: 'O6' });\r\n\r\n    //             let wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\r\n    //             console.log('Done');\r\n\r\n    //             saveAs(new Blob([s2ab(wbout)], { type: \"application/octet-stream\" }), 'test.xlsx');\r\n\r\n    //         })\r\n    // }\r\n\r\n    const TestEcelHandler = () => {\r\n\r\n        fetch('ExtruderSheet.xlsx')\r\n            .then(res => res.arrayBuffer())\r\n            .then(buffer => {\r\n                XlsxPopulate.fromDataAsync(buffer)\r\n                    .then(workbook => {\r\n\r\n                        // r = workbook.sheet(0).cell(\"A8\").value(\"foo\");\r\n                        const r = workbook.sheet(0).range(\"A7:C9\");\r\n\r\n                        r.value([\r\n                            [1, 2, 3],\r\n                            [4, 5, 6],\r\n                            [7, 8, 9]\r\n                        ]);\r\n\r\n                        workbook.outputAsync()\r\n                            .then(function (blob) {\r\n                                if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n                                    // If IE, you must uses a different method.\r\n                                    window.navigator.msSaveOrOpenBlob(blob, \"out.xlsx\");\r\n                                } else {\r\n                                    var url = window.URL.createObjectURL(blob);\r\n                                    var a = document.createElement(\"a\");\r\n                                    document.body.appendChild(a);\r\n                                    a.href = url;\r\n                                    a.download = \"ExtruderSheet.xlsx\";\r\n                                    a.click();\r\n                                    window.URL.revokeObjectURL(url);\r\n                                    document.body.removeChild(a);\r\n                                }\r\n                            });\r\n                    })\r\n                    .then(data => {\r\n                        // saveAs(new Blob([s2ab(data)], { type: \"application/octet-stream\" }), 'test.xlsx');\r\n                        console.log(data);\r\n                        // upload data to AWS S3\r\n                    })\r\n                    .catch(err => console.error(err));\r\n            });\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={TestEcelHandler}>\r\n                capture\r\n            </Button>\r\n            {/* \r\n            <div id='capture' style={{ width: '100%', height: 600, borderRadius: 15, }}>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Testpage1\r\n"]},"metadata":{},"sourceType":"module"}