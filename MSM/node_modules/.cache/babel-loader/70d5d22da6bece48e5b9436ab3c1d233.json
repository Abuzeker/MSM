{"ast":null,"code":"\"use strict\";\n/**\n * PageBreaks\n */\n\nclass PageBreaks {\n  constructor(node) {\n    this._node = node;\n  }\n  /**\n   * add page-breaks by row/column id\n   * @param {number} id - row/column id (rowNumber/colNumber)\n   * @return {PageBreaks} the page-breaks\n   */\n\n\n  add(id) {\n    this._node.children.push({\n      name: \"brk\",\n      children: [],\n      attributes: {\n        id,\n        max: 16383,\n        man: 1\n      }\n    });\n\n    this._node.attributes.count++;\n    this._node.attributes.manualBreakCount++;\n    return this;\n  }\n  /**\n   * remove page-breaks by index\n   * @param {number} index - index of list\n   * @return {PageBreaks} the page-breaks\n   */\n\n\n  remove(index) {\n    const brk = this._node.children[index];\n\n    if (brk) {\n      this._node.children.splice(index, 1);\n\n      this._node.attributes.count--;\n\n      if (brk.man) {\n        this._node.attributes.manualBreakCount--;\n      }\n    }\n\n    return this;\n  }\n  /**\n   * get count of the page-breaks\n   * @return {number} the page-breaks' count\n   */\n\n\n  get count() {\n    return this._node.attributes.count;\n  }\n  /**\n   * get list of page-breaks\n   * @return {Array} list of the page-breaks\n   */\n\n\n  get list() {\n    return this._node.children.map(brk => ({\n      id: brk.id,\n      isManual: !!brk.man\n    }));\n  }\n\n}\n\nmodule.exports = PageBreaks;","map":{"version":3,"sources":["C:/Users/tzika/Desktop/MSM Backup/MSM-Front/MSM/node_modules/xlsx-populate/lib/PageBreaks.js"],"names":["PageBreaks","constructor","node","_node","add","id","children","push","name","attributes","max","man","count","manualBreakCount","remove","index","brk","splice","list","map","isManual","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;;AACA,MAAMA,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKC,KAAL,GAAaD,IAAb;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,GAAG,CAACC,EAAD,EAAK;AACJ,SAAKF,KAAL,CAAWG,QAAX,CAAoBC,IAApB,CAAyB;AACrBC,MAAAA,IAAI,EAAE,KADe;AAErBF,MAAAA,QAAQ,EAAE,EAFW;AAGrBG,MAAAA,UAAU,EAAE;AACRJ,QAAAA,EADQ;AAERK,QAAAA,GAAG,EAAE,KAFG;AAGRC,QAAAA,GAAG,EAAE;AAHG;AAHS,KAAzB;;AASA,SAAKR,KAAL,CAAWM,UAAX,CAAsBG,KAAtB;AACA,SAAKT,KAAL,CAAWM,UAAX,CAAsBI,gBAAtB;AAEA,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,UAAMC,GAAG,GAAG,KAAKb,KAAL,CAAWG,QAAX,CAAoBS,KAApB,CAAZ;;AACA,QAAIC,GAAJ,EAAS;AACL,WAAKb,KAAL,CAAWG,QAAX,CAAoBW,MAApB,CAA2BF,KAA3B,EAAkC,CAAlC;;AACA,WAAKZ,KAAL,CAAWM,UAAX,CAAsBG,KAAtB;;AACA,UAAII,GAAG,CAACL,GAAR,EAAa;AACT,aAAKR,KAAL,CAAWM,UAAX,CAAsBI,gBAAtB;AACH;AACJ;;AAED,WAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;;;AACa,MAALD,KAAK,GAAG;AACR,WAAO,KAAKT,KAAL,CAAWM,UAAX,CAAsBG,KAA7B;AACH;AAED;AACJ;AACA;AACA;;;AACY,MAAJM,IAAI,GAAG;AACP,WAAO,KAAKf,KAAL,CAAWG,QAAX,CAAoBa,GAApB,CAAwBH,GAAG,KAAK;AACnCX,MAAAA,EAAE,EAAEW,GAAG,CAACX,EAD2B;AAEnCe,MAAAA,QAAQ,EAAE,CAAC,CAACJ,GAAG,CAACL;AAFmB,KAAL,CAA3B,CAAP;AAIH;;AA7DY;;AAgEjBU,MAAM,CAACC,OAAP,GAAiBtB,UAAjB","sourcesContent":["\"use strict\";\n\n/**\n * PageBreaks\n */\nclass PageBreaks {\n    constructor(node) {\n        this._node = node;\n    }\n\n    /**\n     * add page-breaks by row/column id\n     * @param {number} id - row/column id (rowNumber/colNumber)\n     * @return {PageBreaks} the page-breaks\n     */\n    add(id) {\n        this._node.children.push({\n            name: \"brk\",\n            children: [],\n            attributes: {\n                id,\n                max: 16383,\n                man: 1\n            }\n        });\n        this._node.attributes.count++;\n        this._node.attributes.manualBreakCount++;\n\n        return this;\n    }\n\n    /**\n     * remove page-breaks by index\n     * @param {number} index - index of list\n     * @return {PageBreaks} the page-breaks\n     */\n    remove(index) {\n        const brk = this._node.children[index];\n        if (brk) {\n            this._node.children.splice(index, 1);\n            this._node.attributes.count--;\n            if (brk.man) {\n                this._node.attributes.manualBreakCount--;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * get count of the page-breaks\n     * @return {number} the page-breaks' count\n     */\n    get count() {\n        return this._node.attributes.count;\n    }\n\n    /**\n     * get list of page-breaks\n     * @return {Array} list of the page-breaks\n     */\n    get list() {\n        return this._node.children.map(brk => ({\n            id: brk.id,\n            isManual: !!brk.man\n        }));\n    }\n}\n\nmodule.exports = PageBreaks;\n"]},"metadata":{},"sourceType":"script"}