{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1Report.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { logdata_request, ReadJob, WriteJob } from '../../api';\nimport { DataSortTime, LogDataMappingTime, TableColumbTimeAsRow, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob } from '../../DataRequest/LogDataRequestWrap';\nimport { C3Model, G2Model, JobModel } from '../../DataRequest/DataModel';\nimport TimeTableWrapper from '../Report/TimeTableWrapper';\nimport NameTableWrapper from '../Report/NameTableWrapper';\nimport ReportWrapper from '../Report/ReportWrapper';\nimport { Button, message } from 'antd';\nimport ReportListWrapper from '../Report/ReportListWrapper';\nimport moment from 'moment';\nimport chargeSample from '../Report/test.xlsx';\nimport ExtruderSheet from '../Report/DefinedSheet.xlsx';\nimport XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": []\n};\nlet ReportList = {\n  \"C3ReportList\": [],\n  \"G2ReportList\": []\n};\nlet ReportInfoG2 = {};\nlet ReportInfoC3 = {};\nlet BlankPage;\nconst ColumbC3 = TableColumbTimeAsRow();\nconst ColumbG2 = TableColumbLabelAsRow(G2Model);\n_c = ColumbG2;\n\nconst Line1Report = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n\n  const DataRequestC3 = row => {\n    let TimeRange = [];\n    TimeRange[0] = moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    TimeRange[1] = moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    ReportInfoC3.Info1 = row['Job No'];\n    ReportInfoC3.Info2 = row['Start Time'];\n    ReportInfoC3.Info3 = row['End Time'];\n    ReportInfoC3.Info4 = row['Color'];\n    ReportInfoC3.Info5 = row['Grade'];\n  };\n\n  const ColumbJobC3 = TableColumbJob(JobModel, DataRequestC3);\n\n  const DataRequestG2 = row => {\n    // console.log(row)\n    let TimeRange = [];\n    TimeRange[0] = moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    TimeRange[1] = moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    ReportInfoG2.Info1 = row['Job No'];\n    ReportInfoG2.Info2 = row['Start Time'];\n    ReportInfoG2.Info3 = row['End Time'];\n    ReportInfoG2.Info4 = row['Color'];\n    ReportInfoG2.Info5 = row['Grade'];\n    console.log(ReportInfoG2);\n    UpdateTableDataG2([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model);\n  };\n\n  const ColumbJobG2 = TableColumbJob(JobModel, DataRequestG2);\n\n  const UpdateTableDataC3 = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    console.log(response);\n    let data = DataSortTime(response);\n    console.log(data);\n    LogValue[BufferName] = LogDataMappingTime(Model, data);\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const UpdateTableDataG2 = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    let data = DataSortTime(response);\n    console.log(data);\n    LogValue[BufferName] = LogDataMappingName(Model, data);\n    setState(_ref2 => {\n      let {\n        count\n      } = _ref2;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\n    const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line);\n\n    if (response.success === true) {\n      message.success('Create Success !');\n    }\n  };\n\n  const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\n    const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line);\n    let data = ReportSort(response);\n    ReportList[BufferName] = data; //console.log(data);\n\n    setState(_ref3 => {\n      let {\n        count\n      } = _ref3;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const WriteExcelCell = () => {\n    function s2ab(s) {\n      var buf = new ArrayBuffer(s.length);\n      var view = new Uint8Array(buf);\n\n      for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\n\n      return buf;\n    }\n\n    const jsondata = [{\n      key: \"1\",\n      value: \"4\"\n    }, {\n      key: \"2\",\n      value: \"5\"\n    }];\n    let test = [['11', '11', '11', '11', '11'], ['12', '12', '12', '12', '12']];\n    XLSX.utils.json_to_sheet();\n    fetch(\"ExtruderSheet.xlsx\").then(res => res.arrayBuffer()).then(ab => {\n      const wb = XLSX.read(ab, {\n        type: \"string\"\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      XLSX.utils.sheet_add_json(ws, jsondata, {\n        origin: \"A7\"\n      }); //XLSX.utils.sheet_add_aoa(ws, test, { origin: 'O6' });\n      //  XLSX.write(wb, 'ExtrudeSheet.xlsx');\n\n      let wbout = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'array'\n      });\n      console.log('Done');\n      saveAs(new Blob([s2ab(wbout)], {\n        type: \"application/octet-stream\"\n      }), 'test.xlsx');\n    });\n  }; // const exportAsExcelFile = (RowArray, filename) => {\n  //     var worksheet: XLSX.WorkSheet = XLSX.utils.aoa_to_sheet([\n  //       [`${filename}`]]); // message to display\n  //     worksheet['!merges'] = [{ s: { r: 0, c: 0 }, e: { r: 0, c: 3 } }]; //for merging columns. s : start, e: end, c: column, r: row\n  //     XLSX.utils.sheet_add_json(worksheet, json, { origin: \"A2\" }); //origin for json data\n  //     const workbook: XLSX.WorkBook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };\n  //     const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  //     }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: WriteExcelCell,\n      children: \" write \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"ExtruderSheet.xlsx\",\n        download: \"your file name\",\n        children: \"Download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportWrapper, {\n      CreateJobCallBack: CreateJob,\n      site: 'Polymerlink',\n      line: 'C3'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportListWrapper, {\n      ReportListCallBack: RequestJob,\n      site: 'Polymerlink',\n      line: 'C3',\n      ReportList: ReportList['C3ReportList'],\n      Columb: ColumbJobC3,\n      BufferName: \"C3ReportList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TimeTableWrapper, {\n      SetTimeRangeCallBack: UpdateTableDataC3,\n      LogValue: LogValue['LogC3'],\n      Columb: ColumbC3,\n      site: 'C3',\n      page: '1',\n      BufferName: \"LogC3\",\n      Model: C3Model,\n      JobInfo: ReportInfoC3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportWrapper, {\n      CreateJobCallBack: CreateJob,\n      site: 'Polymerlink',\n      line: 'G2'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportListWrapper, {\n      ReportListCallBack: RequestJob,\n      site: 'Polymerlink',\n      line: 'G2',\n      ReportList: ReportList['G2ReportList'],\n      Columb: ColumbJobG2,\n      BufferName: \"G2ReportList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NameTableWrapper, {\n      SetTimeRangeCallBack: UpdateTableDataG2,\n      LogValue: LogValue['LogG2'],\n      Columb: ColumbG2,\n      site: 'G2',\n      page: BlankPage,\n      BufferName: \"LogG2\",\n      Model: G2Model,\n      JobInfo: ReportInfoG2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1Report, \"TOtJj3Zjk9A8N3grQNDDe2GZezA=\");\n\n_c2 = Line1Report;\nexport default Line1Report;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ColumbG2\");\n$RefreshReg$(_c2, \"Line1Report\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1Report.jsx"],"names":["React","useState","useEffect","logdata_request","ReadJob","WriteJob","DataSortTime","LogDataMappingTime","TableColumbTimeAsRow","TableColumbLabelAsRow","LogDataMappingName","ReportSort","TableColumbJob","C3Model","G2Model","JobModel","TimeTableWrapper","NameTableWrapper","ReportWrapper","Button","message","ReportListWrapper","moment","chargeSample","ExtruderSheet","XLSX","saveAs","LogValue","ReportList","ReportInfoG2","ReportInfoC3","BlankPage","ColumbC3","ColumbG2","Line1Report","state","setState","count","DataRequestC3","row","TimeRange","toISOString","split","Info1","Info2","Info3","Info4","Info5","ColumbJobC3","DataRequestG2","console","log","UpdateTableDataG2","ColumbJobG2","UpdateTableDataC3","Parameter","StartTime","EndTime","Site","Line","Page","BufferName","Model","response","data","CreateJob","info","datetimeStart","datetimeEnd","site","line","success","RequestJob","WriteExcelCell","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","jsondata","key","value","test","utils","json_to_sheet","fetch","then","res","arrayBuffer","ab","wb","read","type","wsname","SheetNames","ws","Sheets","sheet_add_json","origin","wbout","write","bookType","Blob"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { logdata_request, ReadJob, WriteJob } from '../../api';\r\nimport { DataSortTime, LogDataMappingTime, TableColumbTimeAsRow, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob } from '../../DataRequest/LogDataRequestWrap';\r\nimport { C3Model, G2Model, JobModel } from '../../DataRequest/DataModel';\r\nimport TimeTableWrapper from '../Report/TimeTableWrapper';\r\nimport NameTableWrapper from '../Report/NameTableWrapper';\r\nimport ReportWrapper from '../Report/ReportWrapper';\r\nimport { Button, message } from 'antd';\r\nimport ReportListWrapper from '../Report/ReportListWrapper';\r\nimport moment from 'moment';\r\nimport chargeSample from '../Report/test.xlsx';\r\nimport ExtruderSheet from '../Report/DefinedSheet.xlsx';\r\nimport XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n}\r\n\r\nlet ReportList = {\r\n    \"C3ReportList\": [],\r\n    \"G2ReportList\": []\r\n}\r\n\r\nlet ReportInfoG2 = {}\r\nlet ReportInfoC3 = {}\r\n\r\n\r\nlet BlankPage\r\n\r\nconst ColumbC3 = TableColumbTimeAsRow()\r\nconst ColumbG2 = TableColumbLabelAsRow(G2Model)\r\n\r\nconst Line1Report = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    const DataRequestC3 = (row) => {\r\n\r\n        let TimeRange = []\r\n\r\n        TimeRange[0] = (moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\")\r\n        TimeRange[1] = (moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\")).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n        ReportInfoC3.Info1 = row['Job No']\r\n        ReportInfoC3.Info2 = row['Start Time']\r\n        ReportInfoC3.Info3 = row['End Time']\r\n        ReportInfoC3.Info4 = row['Color']\r\n        ReportInfoC3.Info5 = row['Grade']\r\n    }\r\n    const ColumbJobC3 = TableColumbJob(JobModel, DataRequestC3)\r\n\r\n\r\n    const DataRequestG2 = (row) => {\r\n\r\n        // console.log(row)\r\n\r\n        let TimeRange = []\r\n\r\n        TimeRange[0] = (moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\")\r\n        TimeRange[1] = (moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\")).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n        ReportInfoG2.Info1 = row['Job No']\r\n        ReportInfoG2.Info2 = row['Start Time']\r\n        ReportInfoG2.Info3 = row['End Time']\r\n        ReportInfoG2.Info4 = row['Color']\r\n        ReportInfoG2.Info5 = row['Grade']\r\n\r\n        console.log(ReportInfoG2);\r\n\r\n\r\n        UpdateTableDataG2([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model)\r\n    }\r\n    const ColumbJobG2 = TableColumbJob(JobModel, DataRequestG2)\r\n\r\n\r\n\r\n    const UpdateTableDataC3 = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        console.log(response);\r\n        let data = DataSortTime(response)\r\n        console.log(data);\r\n\r\n        LogValue[BufferName] = LogDataMappingTime(Model, data)\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const UpdateTableDataG2 = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        let data = DataSortTime(response)\r\n        console.log(data);\r\n\r\n        LogValue[BufferName] = LogDataMappingName(Model, data)\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\r\n        const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line)\r\n        if (response.success === true) {\r\n            message.success('Create Success !')\r\n        }\r\n    }\r\n\r\n    const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\r\n        const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line)\r\n        let data = ReportSort(response)\r\n        ReportList[BufferName] = data\r\n        //console.log(data);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n\r\n\r\n    const WriteExcelCell = () => {\r\n\r\n        function s2ab(s) {\r\n\r\n            var buf = new ArrayBuffer(s.length);\r\n            var view = new Uint8Array(buf);\r\n            for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\r\n            return buf;\r\n\r\n        }\r\n\r\n        const jsondata = [\r\n            {key: \"1\", value: \"4\"},\r\n            {key: \"2\", value: \"5\"}\r\n            ]\r\n\r\n        let test = [\r\n            [\r\n                '11', '11', '11', '11', '11'\r\n            ],\r\n            [\r\n                '12', '12', '12', '12', '12'\r\n            ]\r\n        ]\r\n\r\n        XLSX.utils.json_to_sheet()\r\n\r\n        fetch(\"ExtruderSheet.xlsx\")\r\n            .then(res => res.arrayBuffer())\r\n            .then(ab => {\r\n                const wb = XLSX.read(ab, { type: \"string\" });\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n\r\n                 XLSX.utils.sheet_add_json(ws, jsondata, { origin: \"A7\" })\r\n\r\n\r\n                //XLSX.utils.sheet_add_aoa(ws, test, { origin: 'O6' });\r\n\r\n                //  XLSX.write(wb, 'ExtrudeSheet.xlsx');\r\n                let wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n                console.log('Done');\r\n\r\n                saveAs(new Blob([s2ab(wbout)], { type: \"application/octet-stream\" }), 'test.xlsx');\r\n\r\n\r\n            });\r\n\r\n    }\r\n\r\n    // const exportAsExcelFile = (RowArray, filename) => {\r\n    //     var worksheet: XLSX.WorkSheet = XLSX.utils.aoa_to_sheet([\r\n    //       [`${filename}`]]); // message to display\r\n    //     worksheet['!merges'] = [{ s: { r: 0, c: 0 }, e: { r: 0, c: 3 } }]; //for merging columns. s : start, e: end, c: column, r: row\r\n    //     XLSX.utils.sheet_add_json(worksheet, json, { origin: \"A2\" }); //origin for json data\r\n    //     const workbook: XLSX.WorkBook = { Sheets: { 'data': worksheet }, SheetNames: ['data'] };\r\n    //     const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n    //     }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={WriteExcelCell}> write </Button>\r\n            <Button><a href={\"ExtruderSheet.xlsx\"} download=\"your file name\">Download</a></Button>\r\n\r\n            {/* C3 part here */}\r\n            <ReportWrapper CreateJobCallBack={CreateJob}\r\n                site={'Polymerlink'} line={'C3'}\r\n            />\r\n\r\n            <ReportListWrapper ReportListCallBack={RequestJob}\r\n                site={'Polymerlink'} line={'C3'}\r\n                ReportList={ReportList['C3ReportList']}\r\n                Columb={ColumbJobC3}\r\n                BufferName={\"C3ReportList\"}\r\n            />\r\n\r\n            <TimeTableWrapper SetTimeRangeCallBack={UpdateTableDataC3}\r\n                LogValue={LogValue['LogC3']} Columb={ColumbC3}\r\n                site={'C3'} page={'1'} BufferName={\"LogC3\"} Model={C3Model}\r\n                JobInfo={ReportInfoC3}\r\n            />\r\n\r\n\r\n            {/* G2 part here */}\r\n            <ReportWrapper CreateJobCallBack={CreateJob}\r\n                site={'Polymerlink'} line={'G2'}\r\n            />\r\n\r\n            <ReportListWrapper ReportListCallBack={RequestJob}\r\n                site={'Polymerlink'} line={'G2'}\r\n                ReportList={ReportList['G2ReportList']}\r\n                Columb={ColumbJobG2}\r\n                BufferName={\"G2ReportList\"}\r\n\r\n            />\r\n\r\n            <NameTableWrapper SetTimeRangeCallBack={UpdateTableDataG2}\r\n                LogValue={LogValue['LogG2']} Columb={ColumbG2}\r\n                site={'G2'} page={BlankPage} BufferName={\"LogG2\"} Model={G2Model}\r\n                JobInfo={ReportInfoG2}\r\n            />\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Line1Report\r\n"]},"metadata":{},"sourceType":"module"}