{"ast":null,"code":"\"use strict\";\n\nconst ArgHandler = require(\"./ArgHandler\");\n\nconst addressConverter = require(\"./addressConverter\");\n/**\n * A range of cells.\n */\n\n\nclass Range {\n  // /**\n  //  * Creates a new instance of Range.\n  //  * @param {Cell} startCell - The start cell.\n  //  * @param {Cell} endCell - The end cell.\n  //  */\n  constructor(startCell, endCell) {\n    this._startCell = startCell;\n    this._endCell = endCell;\n\n    this._findRangeExtent(startCell, endCell);\n  }\n  /**\n   * Get the address of the range.\n   * @param {{}} [opts] - Options\n   * @param {boolean} [opts.includeSheetName] - Include the sheet name in the address.\n   * @param {boolean} [opts.startRowAnchored] - Anchor the start row.\n   * @param {boolean} [opts.startColumnAnchored] - Anchor the start column.\n   * @param {boolean} [opts.endRowAnchored] - Anchor the end row.\n   * @param {boolean} [opts.endColumnAnchored] - Anchor the end column.\n   * @param {boolean} [opts.anchored] - Anchor all row and columns.\n   * @returns {string} The address.\n   */\n\n\n  address(opts) {\n    return addressConverter.toAddress({\n      type: 'range',\n      startRowNumber: this.startCell().rowNumber(),\n      startRowAnchored: opts && (opts.startRowAnchored || opts.anchored),\n      startColumnName: this.startCell().columnName(),\n      startColumnAnchored: opts && (opts.startColumnAnchored || opts.anchored),\n      endRowNumber: this.endCell().rowNumber(),\n      endRowAnchored: opts && (opts.endRowAnchored || opts.anchored),\n      endColumnName: this.endCell().columnName(),\n      endColumnAnchored: opts && (opts.endColumnAnchored || opts.anchored),\n      sheetName: opts && opts.includeSheetName && this.sheet().name()\n    });\n  }\n  /**\n   * Gets a cell within the range.\n   * @param {number} ri - Row index relative to the top-left corner of the range (0-based).\n   * @param {number} ci - Column index relative to the top-left corner of the range (0-based).\n   * @returns {Cell} The cell.\n   */\n\n\n  cell(ri, ci) {\n    return this.sheet().cell(this._minRowNumber + ri, this._minColumnNumber + ci);\n  }\n  /**\n   * Sets sheet autoFilter to this range.\n   * @returns {Range} This range.\n   */\n\n\n  autoFilter() {\n    this.sheet().autoFilter(this);\n    return this;\n  }\n  /**\n   * Get the cells in the range as a 2D array.\n   * @returns {Array.<Array.<Cell>>} The cells.\n   */\n\n\n  cells() {\n    return this.map(cell => cell);\n  }\n  /**\n   * Clear the contents of all the cells in the range.\n   * @returns {Range} The range.\n   */\n\n\n  clear() {\n    return this.value(undefined);\n  }\n  /**\n   * Get the end cell of the range.\n   * @returns {Cell} The end cell.\n   */\n\n\n  endCell() {\n    return this._endCell;\n  }\n  /**\n   * Callback used by forEach.\n   * @callback Range~forEachCallback\n   * @param {Cell} cell - The cell.\n   * @param {number} ri - The relative row index.\n   * @param {number} ci - The relative column index.\n   * @param {Range} range - The range.\n   * @returns {undefined}\n   */\n\n  /**\n   * Call a function for each cell in the range. Goes by row then column.\n   * @param {Range~forEachCallback} callback - Function called for each cell in the range.\n   * @returns {Range} The range.\n   */\n\n\n  forEach(callback) {\n    for (let ri = 0; ri < this._numRows; ri++) {\n      for (let ci = 0; ci < this._numColumns; ci++) {\n        callback(this.cell(ri, ci), ri, ci, this);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Gets the shared formula in the start cell (assuming it's the source of the shared formula).\n   * @returns {string|undefined} The shared formula.\n   */\n\n  /**\n  * Sets the shared formula in the range. The formula will be translated for each cell.\n  * @param {string} formula - The formula to set.\n  * @returns {Range} The range.\n  */\n\n\n  formula() {\n    return new ArgHandler(\"Range.formula\").case(() => {\n      return this.startCell().getSharedRefFormula();\n    }).case('string', formula => {\n      const sharedFormulaId = this.sheet().incrementMaxSharedFormulaId();\n      this.forEach((cell, ri, ci) => {\n        if (ri === 0 && ci === 0) {\n          cell.setSharedFormula(sharedFormulaId, formula, this.address());\n        } else {\n          cell.setSharedFormula(sharedFormulaId);\n        }\n      });\n      return this;\n    }).handle(arguments);\n  }\n  /**\n   * Callback used by map.\n   * @callback Range~mapCallback\n   * @param {Cell} cell - The cell.\n   * @param {number} ri - The relative row index.\n   * @param {number} ci - The relative column index.\n   * @param {Range} range - The range.\n   * @returns {*} The value to map to.\n   */\n\n  /**\n   * Creates a 2D array of values by running each cell through a callback.\n   * @param {Range~mapCallback} callback - Function called for each cell in the range.\n   * @returns {Array.<Array.<*>>} The 2D array of return values.\n   */\n\n\n  map(callback) {\n    const result = [];\n    this.forEach((cell, ri, ci) => {\n      if (!result[ri]) result[ri] = [];\n      result[ri][ci] = callback(cell, ri, ci, this);\n    });\n    return result;\n  }\n  /**\n   * Gets a value indicating whether the cells in the range are merged.\n   * @returns {boolean} The value.\n   */\n\n  /**\n  * Sets a value indicating whether the cells in the range should be merged.\n  * @param {boolean} merged - True to merge, false to unmerge.\n  * @returns {Range} The range.\n  */\n\n\n  merged(merged) {\n    return new ArgHandler('Range.merged').case(() => {\n      return this.sheet().merged(this.address());\n    }).case('*', merged => {\n      this.sheet().merged(this.address(), merged);\n      return this;\n    }).handle(arguments);\n  }\n  /**\n   * Gets the data validation object attached to the Range.\n   * @returns {object|undefined} The data validation object or undefined if not set.\n   */\n\n  /**\n  * Set or clear the data validation object of the entire range.\n  * @param {object|undefined} dataValidation - Object or null to clear.\n  * @returns {Range} The range.\n  */\n\n\n  dataValidation() {\n    return new ArgHandler('Range.dataValidation').case(() => {\n      return this.sheet().dataValidation(this.address());\n    }).case('boolean', obj => {\n      return this.sheet().dataValidation(this.address(), obj);\n    }).case('*', obj => {\n      this.sheet().dataValidation(this.address(), obj);\n      return this;\n    }).handle(arguments);\n  }\n  /**\n   * Callback used by reduce.\n   * @callback Range~reduceCallback\n   * @param {*} accumulator - The accumulated value.\n   * @param {Cell} cell - The cell.\n   * @param {number} ri - The relative row index.\n   * @param {number} ci - The relative column index.\n   * @param {Range} range - The range.\n   * @returns {*} The value to map to.\n   */\n\n  /**\n   * Reduces the range to a single value accumulated from the result of a function called for each cell.\n   * @param {Range~reduceCallback} callback - Function called for each cell in the range.\n   * @param {*} [initialValue] - The initial value.\n   * @returns {*} The accumulated value.\n   */\n\n\n  reduce(callback, initialValue) {\n    let accumulator = initialValue;\n    this.forEach((cell, ri, ci) => {\n      accumulator = callback(accumulator, cell, ri, ci, this);\n    });\n    return accumulator;\n  }\n  /**\n   * Gets the parent sheet of the range.\n   * @returns {Sheet} The parent sheet.\n   */\n\n\n  sheet() {\n    return this.startCell().sheet();\n  }\n  /**\n   * Gets the start cell of the range.\n   * @returns {Cell} The start cell.\n   */\n\n\n  startCell() {\n    return this._startCell;\n  }\n  /**\n   * Gets a single style for each cell.\n   * @param {string} name - The name of the style.\n   * @returns {Array.<Array.<*>>} 2D array of style values.\n   */\n\n  /**\n  * Gets multiple styles for each cell.\n  * @param {Array.<string>} names - The names of the styles.\n  * @returns {Object.<string, Array.<Array.<*>>>} Object whose keys are style names and values are 2D arrays of style values.\n  */\n\n  /**\n  * Set the style in each cell to the result of a function called for each.\n  * @param {string} name - The name of the style.\n  * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n  * @returns {Range} The range.\n  */\n\n  /**\n  * Sets the style in each cell to the corresponding value in the given 2D array of values.\n  * @param {string} name - The name of the style.\n  * @param {Array.<Array.<*>>} values - The style values to set.\n  * @returns {Range} The range.\n  */\n\n  /**\n  * Set the style of all cells in the range to a single style value.\n  * @param {string} name - The name of the style.\n  * @param {*} value - The value to set.\n  * @returns {Range} The range.\n  */\n\n  /**\n  * Set multiple styles for the cells in the range.\n  * @param {object.<string,Range~mapCallback|Array.<Array.<*>>|*>} styles - Object whose keys are style names and values are either function callbacks, 2D arrays of style values, or a single value for all the cells.\n  * @returns {Range} The range.\n  */\n\n  /**\n  * Sets to a specific style\n  * @param {Style} style - Style object given from stylesheet.createStyle\n  * @returns {Range} The range.\n  */\n\n\n  style() {\n    return new ArgHandler(\"Range.style\").case('string', name => {\n      // Get single value\n      return this.map(cell => cell.style(name));\n    }).case('array', names => {\n      // Get list of values\n      const values = {};\n      names.forEach(name => {\n        values[name] = this.style(name);\n      });\n      return values;\n    }).case(['string', 'function'], (name, callback) => {\n      // Set a single value for the cells to the result of a function\n      return this.forEach((cell, ri, ci) => {\n        cell.style(name, callback(cell, ri, ci, this));\n      });\n    }).case(['string', 'array'], (name, values) => {\n      // Set a single value for the cells using an array of matching dimension\n      return this.forEach((cell, ri, ci) => {\n        if (values[ri] && values[ri][ci] !== undefined) {\n          cell.style(name, values[ri][ci]);\n        }\n      });\n    }).case(['string', '*'], (name, value) => {\n      // Set a single value for all cells to a single value\n      return this.forEach(cell => cell.style(name, value));\n    }).case('object', nameValues => {\n      // Object of key value pairs to set\n      for (const name in nameValues) {\n        if (!nameValues.hasOwnProperty(name)) continue;\n        const value = nameValues[name];\n        this.style(name, value);\n      }\n\n      return this;\n    }).case('Style', style => {\n      this._style = style;\n      return this.forEach(cell => cell.style(style));\n    }).handle(arguments);\n  }\n  /**\n   * Callback used by tap.\n   * @callback Range~tapCallback\n   * @param {Range} range - The range.\n   * @returns {undefined}\n   */\n\n  /**\n   * Invoke a callback on the range and return the range. Useful for method chaining.\n   * @param {Range~tapCallback} callback - The callback function.\n   * @returns {Range} The range.\n   */\n\n\n  tap(callback) {\n    callback(this);\n    return this;\n  }\n  /**\n   * Callback used by thru.\n   * @callback Range~thruCallback\n   * @param {Range} range - The range.\n   * @returns {*} The value to return from thru.\n   */\n\n  /**\n   * Invoke a callback on the range and return the value provided by the callback. Useful for method chaining.\n   * @param {Range~thruCallback} callback - The callback function.\n   * @returns {*} The return value of the callback.\n   */\n\n\n  thru(callback) {\n    return callback(this);\n  }\n  /**\n   * Get the values of each cell in the range as a 2D array.\n   * @returns {Array.<Array.<*>>} The values.\n   */\n\n  /**\n  * Set the values in each cell to the result of a function called for each.\n  * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n  * @returns {Range} The range.\n  */\n\n  /**\n  * Sets the value in each cell to the corresponding value in the given 2D array of values.\n  * @param {Array.<Array.<*>>} values - The values to set.\n  * @returns {Range} The range.\n  */\n\n  /**\n  * Set the value of all cells in the range to a single value.\n  * @param {*} value - The value to set.\n  * @returns {Range} The range.\n  */\n\n\n  value() {\n    return new ArgHandler(\"Range.value\").case(() => {\n      // Get values\n      return this.map(cell => cell.value());\n    }).case('function', callback => {\n      // Set a value for the cells to the result of a function\n      return this.forEach((cell, ri, ci) => {\n        cell.value(callback(cell, ri, ci, this));\n      });\n    }).case('array', values => {\n      // Set value for the cells using an array of matching dimension\n      return this.forEach((cell, ri, ci) => {\n        if (values[ri] && values[ri][ci] !== undefined) {\n          cell.value(values[ri][ci]);\n        }\n      });\n    }).case('*', value => {\n      // Set the value for all cells to a single value\n      return this.forEach(cell => cell.value(value));\n    }).handle(arguments);\n  }\n  /**\n   * Gets the parent workbook.\n   * @returns {Workbook} The parent workbook.\n   */\n\n\n  workbook() {\n    return this.sheet().workbook();\n  }\n  /**\n   * Find the extent of the range.\n   * @returns {undefined}\n   * @private\n   */\n\n\n  _findRangeExtent() {\n    this._minRowNumber = Math.min(this._startCell.rowNumber(), this._endCell.rowNumber());\n    this._maxRowNumber = Math.max(this._startCell.rowNumber(), this._endCell.rowNumber());\n    this._minColumnNumber = Math.min(this._startCell.columnNumber(), this._endCell.columnNumber());\n    this._maxColumnNumber = Math.max(this._startCell.columnNumber(), this._endCell.columnNumber());\n    this._numRows = this._maxRowNumber - this._minRowNumber + 1;\n    this._numColumns = this._maxColumnNumber - this._minColumnNumber + 1;\n  }\n\n}\n\nmodule.exports = Range;","map":{"version":3,"sources":["C:/Users/tatac/Desktop/MSM-Front/MSM/node_modules/xlsx-populate/lib/Range.js"],"names":["ArgHandler","require","addressConverter","Range","constructor","startCell","endCell","_startCell","_endCell","_findRangeExtent","address","opts","toAddress","type","startRowNumber","rowNumber","startRowAnchored","anchored","startColumnName","columnName","startColumnAnchored","endRowNumber","endRowAnchored","endColumnName","endColumnAnchored","sheetName","includeSheetName","sheet","name","cell","ri","ci","_minRowNumber","_minColumnNumber","autoFilter","cells","map","clear","value","undefined","forEach","callback","_numRows","_numColumns","formula","case","getSharedRefFormula","sharedFormulaId","incrementMaxSharedFormulaId","setSharedFormula","handle","arguments","result","merged","dataValidation","obj","reduce","initialValue","accumulator","style","names","values","nameValues","hasOwnProperty","_style","tap","thru","workbook","Math","min","_maxRowNumber","max","columnNumber","_maxColumnNumber","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst addressConverter = require(\"./addressConverter\");\n\n/**\n * A range of cells.\n */\nclass Range {\n    // /**\n    //  * Creates a new instance of Range.\n    //  * @param {Cell} startCell - The start cell.\n    //  * @param {Cell} endCell - The end cell.\n    //  */\n    constructor(startCell, endCell) {\n        this._startCell = startCell;\n        this._endCell = endCell;\n        this._findRangeExtent(startCell, endCell);\n    }\n\n    /**\n     * Get the address of the range.\n     * @param {{}} [opts] - Options\n     * @param {boolean} [opts.includeSheetName] - Include the sheet name in the address.\n     * @param {boolean} [opts.startRowAnchored] - Anchor the start row.\n     * @param {boolean} [opts.startColumnAnchored] - Anchor the start column.\n     * @param {boolean} [opts.endRowAnchored] - Anchor the end row.\n     * @param {boolean} [opts.endColumnAnchored] - Anchor the end column.\n     * @param {boolean} [opts.anchored] - Anchor all row and columns.\n     * @returns {string} The address.\n     */\n    address(opts) {\n        return addressConverter.toAddress({\n            type: 'range',\n            startRowNumber: this.startCell().rowNumber(),\n            startRowAnchored: opts && (opts.startRowAnchored || opts.anchored),\n            startColumnName: this.startCell().columnName(),\n            startColumnAnchored: opts && (opts.startColumnAnchored || opts.anchored),\n            endRowNumber: this.endCell().rowNumber(),\n            endRowAnchored: opts && (opts.endRowAnchored || opts.anchored),\n            endColumnName: this.endCell().columnName(),\n            endColumnAnchored: opts && (opts.endColumnAnchored || opts.anchored),\n            sheetName: opts && opts.includeSheetName && this.sheet().name()\n        });\n    }\n\n    /**\n     * Gets a cell within the range.\n     * @param {number} ri - Row index relative to the top-left corner of the range (0-based).\n     * @param {number} ci - Column index relative to the top-left corner of the range (0-based).\n     * @returns {Cell} The cell.\n     */\n    cell(ri, ci) {\n        return this.sheet().cell(this._minRowNumber + ri, this._minColumnNumber + ci);\n    }\n\n    /**\n     * Sets sheet autoFilter to this range.\n     * @returns {Range} This range.\n     */\n    autoFilter() {\n        this.sheet().autoFilter(this);\n\n        return this;\n    }\n\n    /**\n     * Get the cells in the range as a 2D array.\n     * @returns {Array.<Array.<Cell>>} The cells.\n     */\n    cells() {\n        return this.map(cell => cell);\n    }\n\n    /**\n     * Clear the contents of all the cells in the range.\n     * @returns {Range} The range.\n     */\n    clear() {\n        return this.value(undefined);\n    }\n\n    /**\n     * Get the end cell of the range.\n     * @returns {Cell} The end cell.\n     */\n    endCell() {\n        return this._endCell;\n    }\n\n    /**\n     * Callback used by forEach.\n     * @callback Range~forEachCallback\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {undefined}\n     */\n    /**\n     * Call a function for each cell in the range. Goes by row then column.\n     * @param {Range~forEachCallback} callback - Function called for each cell in the range.\n     * @returns {Range} The range.\n     */\n    forEach(callback) {\n        for (let ri = 0; ri < this._numRows; ri++) {\n            for (let ci = 0; ci < this._numColumns; ci++) {\n                callback(this.cell(ri, ci), ri, ci, this);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Gets the shared formula in the start cell (assuming it's the source of the shared formula).\n     * @returns {string|undefined} The shared formula.\n     *//**\n     * Sets the shared formula in the range. The formula will be translated for each cell.\n     * @param {string} formula - The formula to set.\n     * @returns {Range} The range.\n     */\n    formula() {\n        return new ArgHandler(\"Range.formula\")\n            .case(() => {\n                return this.startCell().getSharedRefFormula();\n            })\n            .case('string', formula => {\n                const sharedFormulaId = this.sheet().incrementMaxSharedFormulaId();\n                this.forEach((cell, ri, ci) => {\n                    if (ri === 0 && ci === 0) {\n                        cell.setSharedFormula(sharedFormulaId, formula, this.address());\n                    } else {\n                        cell.setSharedFormula(sharedFormulaId);\n                    }\n                });\n\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Callback used by map.\n     * @callback Range~mapCallback\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {*} The value to map to.\n     */\n    /**\n     * Creates a 2D array of values by running each cell through a callback.\n     * @param {Range~mapCallback} callback - Function called for each cell in the range.\n     * @returns {Array.<Array.<*>>} The 2D array of return values.\n     */\n    map(callback) {\n        const result = [];\n        this.forEach((cell, ri, ci) => {\n            if (!result[ri]) result[ri] = [];\n            result[ri][ci] = callback(cell, ri, ci, this);\n        });\n\n        return result;\n    }\n\n    /**\n     * Gets a value indicating whether the cells in the range are merged.\n     * @returns {boolean} The value.\n     *//**\n     * Sets a value indicating whether the cells in the range should be merged.\n     * @param {boolean} merged - True to merge, false to unmerge.\n     * @returns {Range} The range.\n     */\n    merged(merged) {\n        return new ArgHandler('Range.merged')\n            .case(() => {\n                return this.sheet().merged(this.address());\n            })\n            .case('*', merged => {\n                this.sheet().merged(this.address(), merged);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the data validation object attached to the Range.\n     * @returns {object|undefined} The data validation object or undefined if not set.\n     *//**\n     * Set or clear the data validation object of the entire range.\n     * @param {object|undefined} dataValidation - Object or null to clear.\n     * @returns {Range} The range.\n     */\n    dataValidation() {\n        return new ArgHandler('Range.dataValidation')\n            .case(() => {\n                return this.sheet().dataValidation(this.address());\n            })\n            .case('boolean', obj => {\n                return this.sheet().dataValidation(this.address(), obj);\n            })\n            .case('*', obj => {\n                this.sheet().dataValidation(this.address(), obj);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Callback used by reduce.\n     * @callback Range~reduceCallback\n     * @param {*} accumulator - The accumulated value.\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {*} The value to map to.\n     */\n    /**\n     * Reduces the range to a single value accumulated from the result of a function called for each cell.\n     * @param {Range~reduceCallback} callback - Function called for each cell in the range.\n     * @param {*} [initialValue] - The initial value.\n     * @returns {*} The accumulated value.\n     */\n    reduce(callback, initialValue) {\n        let accumulator = initialValue;\n        this.forEach((cell, ri, ci) => {\n            accumulator = callback(accumulator, cell, ri, ci, this);\n        });\n\n        return accumulator;\n    }\n\n    /**\n     * Gets the parent sheet of the range.\n     * @returns {Sheet} The parent sheet.\n     */\n    sheet() {\n        return this.startCell().sheet();\n    }\n\n    /**\n     * Gets the start cell of the range.\n     * @returns {Cell} The start cell.\n     */\n    startCell() {\n        return this._startCell;\n    }\n\n    /**\n     * Gets a single style for each cell.\n     * @param {string} name - The name of the style.\n     * @returns {Array.<Array.<*>>} 2D array of style values.\n     *//**\n     * Gets multiple styles for each cell.\n     * @param {Array.<string>} names - The names of the styles.\n     * @returns {Object.<string, Array.<Array.<*>>>} Object whose keys are style names and values are 2D arrays of style values.\n     *//**\n     * Set the style in each cell to the result of a function called for each.\n     * @param {string} name - The name of the style.\n     * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n     * @returns {Range} The range.\n     *//**\n     * Sets the style in each cell to the corresponding value in the given 2D array of values.\n     * @param {string} name - The name of the style.\n     * @param {Array.<Array.<*>>} values - The style values to set.\n     * @returns {Range} The range.\n     *//**\n     * Set the style of all cells in the range to a single style value.\n     * @param {string} name - The name of the style.\n     * @param {*} value - The value to set.\n     * @returns {Range} The range.\n     *//**\n     * Set multiple styles for the cells in the range.\n     * @param {object.<string,Range~mapCallback|Array.<Array.<*>>|*>} styles - Object whose keys are style names and values are either function callbacks, 2D arrays of style values, or a single value for all the cells.\n     * @returns {Range} The range.\n     *//**\n\t * Sets to a specific style\n\t * @param {Style} style - Style object given from stylesheet.createStyle\n\t * @returns {Range} The range.\n\t */\n    style() {\n        return new ArgHandler(\"Range.style\")\n            .case('string', name => {\n                // Get single value\n                return this.map(cell => cell.style(name));\n            })\n            .case('array', names => {\n                // Get list of values\n                const values = {};\n                names.forEach(name => {\n                    values[name] = this.style(name);\n                });\n\n                return values;\n            })\n            .case(['string', 'function'], (name, callback) => {\n                // Set a single value for the cells to the result of a function\n                return this.forEach((cell, ri, ci) => {\n                    cell.style(name, callback(cell, ri, ci, this));\n                });\n            })\n            .case(['string', 'array'], (name, values) => {\n                // Set a single value for the cells using an array of matching dimension\n                return this.forEach((cell, ri, ci) => {\n                    if (values[ri] && values[ri][ci] !== undefined) {\n                        cell.style(name, values[ri][ci]);\n                    }\n                });\n            })\n            .case(['string', '*'], (name, value) => {\n                // Set a single value for all cells to a single value\n                return this.forEach(cell => cell.style(name, value));\n            })\n            .case('object', nameValues => {\n                // Object of key value pairs to set\n                for (const name in nameValues) {\n                    if (!nameValues.hasOwnProperty(name)) continue;\n                    const value = nameValues[name];\n                    this.style(name, value);\n                }\n\n                return this;\n            })\n            .case('Style', style => {\n                this._style = style;\n                return this.forEach(cell => cell.style(style));\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Callback used by tap.\n     * @callback Range~tapCallback\n     * @param {Range} range - The range.\n     * @returns {undefined}\n     */\n    /**\n     * Invoke a callback on the range and return the range. Useful for method chaining.\n     * @param {Range~tapCallback} callback - The callback function.\n     * @returns {Range} The range.\n     */\n    tap(callback) {\n        callback(this);\n        return this;\n    }\n\n    /**\n     * Callback used by thru.\n     * @callback Range~thruCallback\n     * @param {Range} range - The range.\n     * @returns {*} The value to return from thru.\n     */\n    /**\n     * Invoke a callback on the range and return the value provided by the callback. Useful for method chaining.\n     * @param {Range~thruCallback} callback - The callback function.\n     * @returns {*} The return value of the callback.\n     */\n    thru(callback) {\n        return callback(this);\n    }\n\n    /**\n     * Get the values of each cell in the range as a 2D array.\n     * @returns {Array.<Array.<*>>} The values.\n     *//**\n     * Set the values in each cell to the result of a function called for each.\n     * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n     * @returns {Range} The range.\n     *//**\n     * Sets the value in each cell to the corresponding value in the given 2D array of values.\n     * @param {Array.<Array.<*>>} values - The values to set.\n     * @returns {Range} The range.\n     *//**\n     * Set the value of all cells in the range to a single value.\n     * @param {*} value - The value to set.\n     * @returns {Range} The range.\n     */\n    value() {\n        return new ArgHandler(\"Range.value\")\n            .case(() => {\n                // Get values\n                return this.map(cell => cell.value());\n            })\n            .case('function', callback => {\n                // Set a value for the cells to the result of a function\n                return this.forEach((cell, ri, ci) => {\n                    cell.value(callback(cell, ri, ci, this));\n                });\n            })\n            .case('array', values => {\n                // Set value for the cells using an array of matching dimension\n                return this.forEach((cell, ri, ci) => {\n                    if (values[ri] && values[ri][ci] !== undefined) {\n                        cell.value(values[ri][ci]);\n                    }\n                });\n            })\n            .case('*', value => {\n                // Set the value for all cells to a single value\n                return this.forEach(cell => cell.value(value));\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the parent workbook.\n     * @returns {Workbook} The parent workbook.\n     */\n    workbook() {\n        return this.sheet().workbook();\n    }\n\n    /**\n     * Find the extent of the range.\n     * @returns {undefined}\n     * @private\n     */\n    _findRangeExtent() {\n        this._minRowNumber = Math.min(this._startCell.rowNumber(), this._endCell.rowNumber());\n        this._maxRowNumber = Math.max(this._startCell.rowNumber(), this._endCell.rowNumber());\n        this._minColumnNumber = Math.min(this._startCell.columnNumber(), this._endCell.columnNumber());\n        this._maxColumnNumber = Math.max(this._startCell.columnNumber(), this._endCell.columnNumber());\n        this._numRows = this._maxRowNumber - this._minRowNumber + 1;\n        this._numColumns = this._maxColumnNumber - this._minColumnNumber + 1;\n    }\n}\n\nmodule.exports = Range;\n"]},"metadata":{},"sourceType":"script"}