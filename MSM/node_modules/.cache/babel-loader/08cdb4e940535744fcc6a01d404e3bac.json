{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _ = require(\"lodash\");\n/**\n * The shared strings table.\n * @ignore\n */\n\n\nvar SharedStrings = /*#__PURE__*/function () {\n  /**\n   * Constructs a new instance of _SharedStrings.\n   * @param {{}} node - The node.\n   */\n  function SharedStrings(node) {\n    _classCallCheck(this, SharedStrings);\n\n    this._stringArray = [];\n    this._indexMap = {};\n\n    this._init(node);\n\n    this._cacheExistingSharedStrings();\n  }\n  /**\n   * Gets the index for a string\n   * @param {string|Array.<{}>} string - The string or rich text array.\n   * @returns {number} The index\n   */\n\n\n  _createClass(SharedStrings, [{\n    key: \"getIndexForString\",\n    value: function getIndexForString(string) {\n      // If the string is found in the cache, return the index.\n      var key = _.isArray(string) ? JSON.stringify(string) : string;\n      var index = this._indexMap[key];\n      if (index >= 0) return index; // Otherwise, add it to the caches.\n\n      index = this._stringArray.length;\n\n      this._stringArray.push(string);\n\n      this._indexMap[key] = index; // Append a new si node.\n\n      this._node.children.push({\n        name: \"si\",\n        children: _.isArray(string) ? string : [{\n          name: \"t\",\n          attributes: {\n            'xml:space': \"preserve\"\n          },\n          children: [string]\n        }]\n      });\n\n      return index;\n    }\n    /**\n     * Get the string for a given index\n     * @param {number} index - The index\n     * @returns {string} The string\n     */\n\n  }, {\n    key: \"getStringByIndex\",\n    value: function getStringByIndex(index) {\n      return this._stringArray[index];\n    }\n    /**\n     * Convert the collection to an XML object.\n     * @returns {{}} The XML object.\n     */\n\n  }, {\n    key: \"toXml\",\n    value: function toXml() {\n      return this._node;\n    }\n    /**\n     * Store any existing values in the caches.\n     * @private\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"_cacheExistingSharedStrings\",\n    value: function _cacheExistingSharedStrings() {\n      var _this = this;\n\n      this._node.children.forEach(function (node, i) {\n        var content = node.children[0];\n\n        if (content.name === \"t\") {\n          var string = content.children[0];\n\n          _this._stringArray.push(string);\n\n          _this._indexMap[string] = i;\n        } else {\n          // TODO: Properly support rich text nodes in the future. For now just store the object as a placeholder.\n          _this._stringArray.push(node.children);\n\n          _this._indexMap[JSON.stringify(node.children)] = i;\n        }\n      });\n    }\n    /**\n     * Initialize the node.\n     * @param {{}} [node] - The shared strings node.\n     * @private\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"_init\",\n    value: function _init(node) {\n      if (!node) node = {\n        name: \"sst\",\n        attributes: {\n          xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n        },\n        children: []\n      };\n      this._node = node;\n      delete this._node.attributes.count;\n      delete this._node.attributes.uniqueCount;\n    }\n  }]);\n\n  return SharedStrings;\n}();\n\nmodule.exports = SharedStrings;\n/*\nxl/sharedStrings.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"13\" uniqueCount=\"4\">\n\t<si>\n\t\t<t>Foo</t>\n\t</si>\n\t<si>\n\t\t<t>Bar</t>\n\t</si>\n\t<si>\n\t\t<t>Goo</t>\n\t</si>\n\t<si>\n\t\t<r>\n\t\t\t<t>s</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<b/>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>d;</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>lfk;l</t>\n\t\t</r>\n\t</si>\n</sst>\n*/","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/xlsx-populate/lib/SharedStrings.js"],"names":["_","require","SharedStrings","node","_stringArray","_indexMap","_init","_cacheExistingSharedStrings","string","key","isArray","JSON","stringify","index","length","push","_node","children","name","attributes","forEach","i","content","xmlns","count","uniqueCount","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst _ = require(\"lodash\");\n\n/**\n * The shared strings table.\n * @ignore\n */\nclass SharedStrings {\n    /**\n     * Constructs a new instance of _SharedStrings.\n     * @param {{}} node - The node.\n     */\n    constructor(node) {\n        this._stringArray = [];\n        this._indexMap = {};\n\n        this._init(node);\n        this._cacheExistingSharedStrings();\n    }\n\n    /**\n     * Gets the index for a string\n     * @param {string|Array.<{}>} string - The string or rich text array.\n     * @returns {number} The index\n     */\n    getIndexForString(string) {\n        // If the string is found in the cache, return the index.\n        const key = _.isArray(string) ? JSON.stringify(string) : string;\n        let index = this._indexMap[key];\n        if (index >= 0) return index;\n\n        // Otherwise, add it to the caches.\n        index = this._stringArray.length;\n        this._stringArray.push(string);\n        this._indexMap[key] = index;\n\n        // Append a new si node.\n        this._node.children.push({\n            name: \"si\",\n            children: _.isArray(string) ? string : [\n                {\n                    name: \"t\",\n                    attributes: { 'xml:space': \"preserve\" },\n                    children: [string]\n                }\n            ]\n        });\n\n        return index;\n    }\n\n    /**\n     * Get the string for a given index\n     * @param {number} index - The index\n     * @returns {string} The string\n     */\n    getStringByIndex(index) {\n        return this._stringArray[index];\n    }\n\n    /**\n     * Convert the collection to an XML object.\n     * @returns {{}} The XML object.\n     */\n    toXml() {\n        return this._node;\n    }\n\n    /**\n     * Store any existing values in the caches.\n     * @private\n     * @returns {undefined}\n     */\n    _cacheExistingSharedStrings() {\n        this._node.children.forEach((node, i) => {\n            const content = node.children[0];\n            if (content.name === \"t\") {\n                const string = content.children[0];\n                this._stringArray.push(string);\n                this._indexMap[string] = i;\n            } else {\n                // TODO: Properly support rich text nodes in the future. For now just store the object as a placeholder.\n                this._stringArray.push(node.children);\n                this._indexMap[JSON.stringify(node.children)] = i;\n            }\n        });\n    }\n\n    /**\n     * Initialize the node.\n     * @param {{}} [node] - The shared strings node.\n     * @private\n     * @returns {undefined}\n     */\n    _init(node) {\n        if (!node) node = {\n            name: \"sst\",\n            attributes: {\n                xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n            },\n            children: []\n        };\n\n        this._node = node;\n\n        delete this._node.attributes.count;\n        delete this._node.attributes.uniqueCount;\n    }\n}\n\nmodule.exports = SharedStrings;\n\n/*\nxl/sharedStrings.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"13\" uniqueCount=\"4\">\n\t<si>\n\t\t<t>Foo</t>\n\t</si>\n\t<si>\n\t\t<t>Bar</t>\n\t</si>\n\t<si>\n\t\t<t>Goo</t>\n\t</si>\n\t<si>\n\t\t<r>\n\t\t\t<t>s</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<b/>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>d;</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>lfk;l</t>\n\t\t</r>\n\t</si>\n</sst>\n*/\n"]},"metadata":{},"sourceType":"script"}