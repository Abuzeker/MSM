{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\MSM-Front\\\\MSM\\\\src\\\\pages\\\\EnergyUsage\\\\EnergyUsage.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Divider, Row, DatePicker, Card, Table, Select, Spin, Typography } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { logdata_request, MSM_EventLog_request, MSM_logdata_request } from '../../api';\nimport { C3Model, C3ModelMap, G2Model, MSMTable, DummyData } from '../../DataRequest/DataModel';\nimport { ConvertMonentToDateTime, EventSortTimeMSM, GetDateTime, DataSortTimeMSM, LogDataMappingTime, LogDataMappingTimeMSM, LogDataMappingNameMSM } from '../../DataRequest/LogDataRequestWrap';\nimport { Line, Column } from '@antv/g2plot';\nimport moment from 'moment';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet DTinitial = GetDateTime(0, 1); // get from yesterday 00:00 to today 00:00\n\nlet DTinitial2 = GetDateTime(0, 1); // get from yesterday 00:00 to today 00:00\n\nlet DTinitial3 = GetDateTime(7, 1); // get from yesterday 00:00 to today 00:00\n\nlet RequestDataOption = ['Line50kg', 'Line1kg', 'Line2kg', 'Line1Ton'];\nlet RequestDataOption_Daily = ['Line50kg_Daily', 'Line1kg_Daily', 'Line2kg_Daily', 'Line1Ton_Daily'];\nlet RequestDateRange = [DTinitial[0], DTinitial[1]];\nlet BarChartRange = [DTinitial3[0], DTinitial3[1]];\nlet responseSorted = [];\nconst annotations = [];\nlet EventLogRequestRange = [DTinitial2[0], DTinitial2[1]];\nlet EventLogSorted = [];\nconst Dailydata = [{\n  DateTime: '24/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '24/5/2022',\n  type: 'Line1kg',\n  Value: 543\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line1kg',\n  Value: 463\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line1kg',\n  Value: 234\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line1kg',\n  Value: 54\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line1kg',\n  Value: 643\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line1kg',\n  Value: 76\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line1kg',\n  Value: 876\n}, {\n  DateTime: '24/5/2022',\n  type: 'Line2kg',\n  Value: 543\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line2kg',\n  Value: 463\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line2kg',\n  Value: 234\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line2kg',\n  Value: 54\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line2kg',\n  Value: 643\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line2kg',\n  Value: 76\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line2kg',\n  Value: 876\n}, {\n  DateTime: '24/5/2022',\n  type: 'Line1Ton',\n  Value: 564\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line1Ton',\n  Value: 23\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line1Ton',\n  Value: 64\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line1Ton',\n  Value: 76\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line1Ton',\n  Value: 23\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line1Ton',\n  Value: 46\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line1Ton',\n  Value: 86\n}];\nconst DailyLogTable = [];\nconst headersDaily = [{\n  label: \"DateTime\",\n  key: \"DateTime\"\n}, {\n  label: \"Line50kg\",\n  key: \"Line50kg\"\n}, {\n  label: \"Line1kg\",\n  key: \"Line1kg\"\n}, {\n  label: \"Line2kg\",\n  key: \"Line2kg\"\n}, {\n  label: \"Line1Ton\",\n  key: \"Line1Ton\"\n}];\nconst headersEvent = [{\n  label: \"DateTime\",\n  key: \"DateTime\"\n}, {\n  label: \"Tag\",\n  key: \"Tag\"\n}, {\n  label: \"IdUnit\",\n  key: \"IdUnit\"\n}, {\n  label: \"Label\",\n  key: \"Label\"\n}, {\n  label: \"Weight\",\n  key: \"Weight\"\n}, {\n  label: \"Location\",\n  key: \"Location\"\n}];\nconst {\n  RangePicker\n} = DatePicker;\nconst {\n  Option\n} = Select;\nconst {\n  Title\n} = Typography;\nlet line, stackedColumnPlot;\n\nconst EnergyUsage = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n  const [Loading, setLoading] = useState(false);\n  const [sortedInfo, setSortedInfo] = useState({});\n  const [sortedInfo2, setSortedInfo2] = useState({});\n  const LogColumbPerTime = [{\n    title: 'DateTime',\n    width: 40,\n    dataIndex: 'DateTime',\n    key: 'DateTime',\n    align: 'center',\n    sorter: (a, b) => new Date(moment(a.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")) - new Date(moment(b.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")),\n    sortOrder: sortedInfo2.columnKey === 'DateTime' ? sortedInfo2.order : null,\n    ellipsis: true\n  }, {\n    title: 'Tag',\n    width: 60,\n    dataIndex: 'Tag',\n    key: 'Tag',\n    align: 'center'\n  }, {\n    title: 'Id Unit',\n    width: 20,\n    dataIndex: 'IdUnit',\n    key: 'IdUnit',\n    align: 'center',\n    sorter: (a, b) => a.IdUnit - b.IdUnit,\n    sortOrder: sortedInfo2.columnKey === 'IdUnit' ? sortedInfo2.order : null,\n    ellipsis: true\n  }, {\n    title: 'Label',\n    width: 20,\n    dataIndex: 'Label',\n    key: 'Label',\n    align: 'center',\n    filters: [{\n      text: 'Line50kg',\n      value: 'Line50kg'\n    }, {\n      text: 'Line1kg',\n      value: 'Line1kg'\n    }, {\n      text: 'Line2kg',\n      value: 'Line2kg'\n    }, {\n      text: 'Line1Ton',\n      value: 'Line1Ton'\n    }],\n    onFilter: (value, record) => record.Label.indexOf(value) === 0\n  }, {\n    title: 'Weight',\n    width: 20,\n    dataIndex: 'Weight',\n    key: 'Weight',\n    align: 'center'\n  }, {\n    title: 'Location',\n    width: 20,\n    dataIndex: 'Location',\n    key: 'Location',\n    align: 'center'\n  }];\n\n  const handleChangeOverall = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter);\n    setSortedInfo(sorter);\n  };\n\n  const handleChangePertime = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter);\n    setSortedInfo2(sorter);\n  };\n\n  const EvenLogRequest = async () => {\n    let response = await MSM_EventLog_request(RequestDataOption, EventLogRequestRange[0], EventLogRequestRange[1]); //  let DailyLogSorted = LogDataMappingTimeMSM(MSMTable,response)   \n\n    EventLogSorted = EventSortTimeMSM(response);\n    console.log(EventLogSorted);\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  useEffect(() => {\n    console.log('Reffect');\n    stackedColumnPlot = new Column('container', {\n      data: responseSorted,\n      isStack: true,\n      xField: 'DateTime',\n      yField: 'Value',\n      seriesField: 'type',\n      label: {\n        position: 'middle',\n        layout: [{\n          type: 'interval-adjust-position'\n        }, {\n          type: 'interval-hide-overlap'\n        }, {\n          type: 'adjust-color'\n        }]\n      },\n      annotations\n    });\n    BarChartInit();\n\n    try {\n      stackedColumnPlot.render();\n    } catch {}\n\n    return () => {\n      stackedColumnPlot.destroy();\n    };\n  }, []); // const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n  //     console.log(Parameter)\n  //     const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\n  //     let data = DataSortTime(response)\n  //     LogValue[BufferName] = data\n  //     console.log(data);\n  //     setState(({ count }) => ({ count: count + 1 }));\n  // }\n\n  const BarChartInit = async () => {\n    // setLoading(true)\n    // console.log(Parameter)\n    let response = await MSM_logdata_request(RequestDataOption_Daily, BarChartRange[0], BarChartRange[1]);\n    let BarChartData = DataSortTimeMSM(response);\n    stackedColumnPlot.changeData(BarChartData);\n    console.log(BarChartData); // setLoading(false)\n\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  const LogColumb = [{\n    title: 'DateTime',\n    width: 70,\n    dataIndex: 'DateTime',\n    key: 'DateTime',\n    align: 'center',\n    sorter: (a, b) => new Date(moment(a.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")) - new Date(moment(b.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")),\n    sortOrder: sortedInfo.columnKey === 'DateTime' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '50 kG',\n    width: 70,\n    dataIndex: 'Line50kg',\n    key: 'Line50kg',\n    align: 'center',\n    sorter: (a, b) => a.Line50kg - b.Line50kg,\n    sortOrder: sortedInfo.columnKey === 'Line50kg' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '1 kG',\n    width: 70,\n    dataIndex: 'Line1kg',\n    key: 'Line1kg',\n    align: 'center',\n    sorter: (a, b) => a.Line1kg - b.Line1kg,\n    sortOrder: sortedInfo.columnKey === 'Line1kg' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '2 kG',\n    width: 70,\n    dataIndex: 'Line2kg',\n    key: 'Line2kg',\n    align: 'center',\n    sorter: (a, b) => a.Line2kg - b.Line2kg,\n    sortOrder: sortedInfo.columnKey === 'Line2kg' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '1 Ton',\n    width: 70,\n    dataIndex: 'Line1Ton',\n    key: 'Line1Ton',\n    align: 'center',\n    sorter: (a, b) => a.Line1Ton - b.Line1Ton,\n    sortOrder: sortedInfo.columnKey === 'Line1Ton' ? sortedInfo.order : null,\n    ellipsis: true\n  }];\n\n  const DailyLogRequest = async () => {\n    let response = await MSM_logdata_request(RequestDataOption_Daily, RequestDateRange[0], RequestDateRange[1]); //  let responseSorted = LogDataMappingTimeMSM(MSMTable,response)   \n\n    responseSorted = LogDataMappingNameMSM(MSMTable, DataSortTimeMSM(response));\n    console.log(responseSorted);\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  const ChangeDateRange = (value, type) => {\n    switch (type) {\n      case 'Daily':\n        RequestDateRange = [];\n        RequestDateRange = ConvertMonentToDateTime(value);\n        break;\n\n      case 'Event':\n        EventLogRequestRange = [];\n        EventLogRequestRange = ConvertMonentToDateTime(value);\n        break;\n\n      default:\n        break;\n    } // console.log(RequestDateRange);\n\n  };\n\n  const ChangeOption = value => {\n    if (value === 'All') {\n      RequestDataOption = ['Line50kg', 'Line1kg', 'Line2kg', 'Line1Ton'];\n    } else {\n      console.log(`selected ${value}`);\n      RequestDataOption = [];\n      RequestDataOption.push(value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        children: \"Daily Count Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: 'Weekly Record',\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15,\n        backgroundColor: '#ffffff'\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        children: \"Daily Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(RangePicker, {\n        onChange: e => ChangeDateRange(e, 'Daily')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        style: {\n          marginLeft: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(CSVLink, {\n          data: responseSorted,\n          target: \"_blank\",\n          filename: \"DataLog.csv\",\n          headers: headersDaily,\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        style: {\n          marginLeft: '10px'\n        },\n        onClick: () => {\n          DailyLogRequest();\n        },\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Daily Log\",\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15,\n        marginBottom: '10px'\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        columns: LogColumb,\n        dataSource: responseSorted,\n        size: \"small\",\n        scroll: {\n          y: 500\n        },\n        onChange: handleChangeOverall,\n        pagination: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '16px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          paddingBottom: '10px',\n          paddingTop: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Divider, {\n          orientation: \"left\",\n          children: \"Event Log\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          paddingBottom: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(RangePicker, {\n          showTime: true,\n          onChange: e => ChangeDateRange(e, 'Event')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          defaultValue: \"Line50kg\",\n          style: {\n            width: 100,\n            marginLeft: '10px'\n          },\n          onChange: ChangeOption,\n          children: [/*#__PURE__*/_jsxDEV(Option, {\n            value: \"All\",\n            children: \"All\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Option, {\n            value: \"Line50kg\",\n            children: \"Line50kg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Option, {\n            value: \"Line1kg\",\n            children: \"Line1kg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Option, {\n            value: \"Line2kg\",\n            children: \"Line2kg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Option, {\n            value: \"Line1Ton\",\n            children: \"Line1Ton\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 530,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          style: {\n            marginLeft: '10px'\n          },\n          children: /*#__PURE__*/_jsxDEV(CSVLink, {\n            data: EventLogSorted,\n            target: \"_blank\",\n            filename: \"EventLog.csv\",\n            headers: headersEvent,\n            children: \"Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          style: {\n            marginLeft: '10px'\n          },\n          onClick: () => {\n            EvenLogRequest();\n          },\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        title: \"Event Log\",\n        bordered: true,\n        style: {\n          width: '100%',\n          borderRadius: 15,\n          marginBottom: '10px'\n        },\n        hoverable: true,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          bordered: true,\n          columns: LogColumbPerTime,\n          dataSource: EventLogSorted,\n          scroll: {\n            x: 600,\n            y: 350\n          },\n          pagination: false,\n          size: \"small\",\n          onChange: handleChangePertime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 480,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EnergyUsage, \"0vcqjnwsJW7OHEZqFrGAJQLatTA=\");\n\n_c = EnergyUsage;\nexport default EnergyUsage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EnergyUsage\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/MSM-Front/MSM/src/pages/EnergyUsage/EnergyUsage.jsx"],"names":["Button","Col","Divider","Row","DatePicker","Card","Table","Select","Spin","Typography","React","useState","useEffect","logdata_request","MSM_EventLog_request","MSM_logdata_request","C3Model","C3ModelMap","G2Model","MSMTable","DummyData","ConvertMonentToDateTime","EventSortTimeMSM","GetDateTime","DataSortTimeMSM","LogDataMappingTime","LogDataMappingTimeMSM","LogDataMappingNameMSM","Line","Column","moment","CSVLink","CSVDownload","DTinitial","DTinitial2","DTinitial3","RequestDataOption","RequestDataOption_Daily","RequestDateRange","BarChartRange","responseSorted","annotations","EventLogRequestRange","EventLogSorted","Dailydata","DateTime","type","Value","DailyLogTable","headersDaily","label","key","headersEvent","RangePicker","Option","Title","line","stackedColumnPlot","EnergyUsage","state","setState","count","Loading","setLoading","sortedInfo","setSortedInfo","sortedInfo2","setSortedInfo2","LogColumbPerTime","title","width","dataIndex","align","sorter","a","b","Date","format","sortOrder","columnKey","order","ellipsis","IdUnit","filters","text","value","onFilter","record","Label","indexOf","handleChangeOverall","pagination","console","log","handleChangePertime","EvenLogRequest","response","data","isStack","xField","yField","seriesField","position","layout","BarChartInit","render","destroy","BarChartData","changeData","LogColumb","Line50kg","Line1kg","Line2kg","Line1Ton","DailyLogRequest","ChangeDateRange","ChangeOption","push","paddingBottom","borderRadius","backgroundColor","e","marginLeft","marginBottom","y","marginTop","paddingTop","x"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,OAAtB,EAA+BC,GAA/B,EAAoCC,UAApC,EAAgDC,IAAhD,EAAsDC,KAAtD,EAA6DC,MAA7D,EAAqEC,IAArE,EAA2EC,UAA3E,QAA6F,MAA7F;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,eAAT,EAA0BC,oBAA1B,EAAgDC,mBAAhD,QAA2E,WAA3E;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAiDC,SAAjD,QAAkE,6BAAlE;AACA,SACIC,uBADJ,EAC6BC,gBAD7B,EAC+CC,WAD/C,EAEIC,eAFJ,EAEqBC,kBAFrB,EAEyCC,qBAFzC,EAGIC,qBAHJ,QAIO,sCAJP;AAKA,SAASC,IAAT,EAAeC,MAAf,QAA6B,cAA7B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,WAArC;;AAGA,IAAIC,SAAS,GAAGV,WAAW,CAAC,CAAD,EAAI,CAAJ,CAA3B,C,CAAmC;;AACnC,IAAIW,UAAU,GAAGX,WAAW,CAAC,CAAD,EAAI,CAAJ,CAA5B,C,CAAoC;;AACpC,IAAIY,UAAU,GAAGZ,WAAW,CAAC,CAAD,EAAI,CAAJ,CAA5B,C,CAAoC;;AAGpC,IAAIa,iBAAiB,GAAG,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,EAAmC,UAAnC,CAAxB;AACA,IAAIC,uBAAuB,GAAG,CAAC,gBAAD,EAAmB,eAAnB,EAAoC,eAApC,EAAqD,gBAArD,CAA9B;AAEA,IAAIC,gBAAgB,GAAG,CAACL,SAAS,CAAC,CAAD,CAAV,EAAeA,SAAS,CAAC,CAAD,CAAxB,CAAvB;AAEA,IAAIM,aAAa,GAAG,CAACJ,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,CAApB;AAEA,IAAIK,cAAc,GAAG,EAArB;AACA,MAAMC,WAAW,GAAG,EAApB;AAEA,IAAIC,oBAAoB,GAAG,CAACR,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,CAA3B;AACA,IAAIS,cAAc,GAAG,EAArB;AAIA,MAAMC,SAAS,GAAG,CACd;AACIC,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CADc,EAMd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CANc,EAWd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAXc,EAgBd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAhBc,EAqBd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CArBc,EA0Bd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CA1Bc,EA+Bd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CA/Bc,EAsCd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAtCc,EA2Cd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CA3Cc,EAgDd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAhDc,EAqDd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CArDc,EA0Dd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CA1Dc,EA+Dd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CA/Dc,EAoEd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CApEc,EA2Ed;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CA3Ec,EAgFd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAhFc,EAqFd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CArFc,EA0Fd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CA1Fc,EA+Fd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CA/Fc,EAoGd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CApGc,EAyGd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,SAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAzGc,EAgHd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAhHc,EAqHd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CArHc,EA0Hd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CA1Hc,EA+Hd;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CA/Hc,EAoId;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CApIc,EAyId;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CAzIc,EA8Id;AACIF,EAAAA,QAAQ,EAAE,WADd;AAEIC,EAAAA,IAAI,EAAE,UAFV;AAGIC,EAAAA,KAAK,EAAE;AAHX,CA9Ic,CAAlB;AAsJA,MAAMC,aAAa,GAAG,EAAtB;AAIA,MAAMC,YAAY,GAAG,CACjB;AAAEC,EAAAA,KAAK,EAAE,UAAT;AAAqBC,EAAAA,GAAG,EAAE;AAA1B,CADiB,EAEjB;AAAED,EAAAA,KAAK,EAAE,UAAT;AAAqBC,EAAAA,GAAG,EAAE;AAA1B,CAFiB,EAGjB;AAAED,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,GAAG,EAAE;AAAzB,CAHiB,EAIjB;AAAED,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,GAAG,EAAE;AAAzB,CAJiB,EAKjB;AAAED,EAAAA,KAAK,EAAE,UAAT;AAAqBC,EAAAA,GAAG,EAAE;AAA1B,CALiB,CAArB;AAQA,MAAMC,YAAY,GAAG,CACjB;AAAEF,EAAAA,KAAK,EAAE,UAAT;AAAqBC,EAAAA,GAAG,EAAE;AAA1B,CADiB,EAEjB;AAAED,EAAAA,KAAK,EAAE,KAAT;AAAgBC,EAAAA,GAAG,EAAE;AAArB,CAFiB,EAGjB;AAAED,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,GAAG,EAAE;AAAxB,CAHiB,EAIjB;AAAED,EAAAA,KAAK,EAAE,OAAT;AAAkBC,EAAAA,GAAG,EAAE;AAAvB,CAJiB,EAKjB;AAAED,EAAAA,KAAK,EAAE,QAAT;AAAmBC,EAAAA,GAAG,EAAE;AAAxB,CALiB,EAMjB;AAAED,EAAAA,KAAK,EAAE,UAAT;AAAqBC,EAAAA,GAAG,EAAE;AAA1B,CANiB,CAArB;AAYA,MAAM;AAAEE,EAAAA;AAAF,IAAkBjD,UAAxB;AACA,MAAM;AAAEkD,EAAAA;AAAF,IAAa/C,MAAnB;AACA,MAAM;AAAEgD,EAAAA;AAAF,IAAY9C,UAAlB;AAGA,IAAI+C,IAAJ,EAAUC,iBAAV;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAEtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjD,QAAQ,CAAC;AAAEkD,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAlC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBpD,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACqD,UAAD,EAAaC,aAAb,IAA8BtD,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACuD,WAAD,EAAcC,cAAd,IAAgCxD,QAAQ,CAAC,EAAD,CAA9C;AAGA,QAAMyD,gBAAgB,GAAG,CACrB;AACIC,IAAAA,KAAK,EAAE,UADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,UAHf;AAIIpB,IAAAA,GAAG,EAAE,UAJT;AAKIqB,IAAAA,KAAK,EAAE,QALX;AAOIC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KACJ,IAAIC,IAAJ,CAAS9C,MAAM,CAAC4C,CAAC,CAAC7B,QAAH,EAAa,sBAAb,CAAN,CAA2CgC,MAA3C,CAAkD,KAAlD,CAAT,IACA,IAAID,IAAJ,CAAS9C,MAAM,CAAC6C,CAAC,CAAC9B,QAAH,EAAa,sBAAb,CAAN,CAA2CgC,MAA3C,CAAkD,KAAlD,CAAT,CATR;AAWIC,IAAAA,SAAS,EAAEZ,WAAW,CAACa,SAAZ,KAA0B,UAA1B,GAAuCb,WAAW,CAACc,KAAnD,GAA2D,IAX1E;AAYIC,IAAAA,QAAQ,EAAE;AAZd,GADqB,EAerB;AACIZ,IAAAA,KAAK,EAAE,KADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,KAHf;AAIIpB,IAAAA,GAAG,EAAE,KAJT;AAKIqB,IAAAA,KAAK,EAAE;AALX,GAfqB,EAsBrB;AACIH,IAAAA,KAAK,EAAE,SADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,QAHf;AAIIpB,IAAAA,GAAG,EAAE,QAJT;AAKIqB,IAAAA,KAAK,EAAE,QALX;AAOIC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACQ,MAAF,GAAWP,CAAC,CAACO,MAPnC;AAQIJ,IAAAA,SAAS,EAAEZ,WAAW,CAACa,SAAZ,KAA0B,QAA1B,GAAqCb,WAAW,CAACc,KAAjD,GAAyD,IARxE;AASIC,IAAAA,QAAQ,EAAE;AATd,GAtBqB,EAiCrB;AACIZ,IAAAA,KAAK,EAAE,OADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,OAHf;AAIIpB,IAAAA,GAAG,EAAE,OAJT;AAKIqB,IAAAA,KAAK,EAAE,QALX;AAOIW,IAAAA,OAAO,EAAE,CACL;AACIC,MAAAA,IAAI,EAAE,UADV;AAEIC,MAAAA,KAAK,EAAE;AAFX,KADK,EAKL;AACID,MAAAA,IAAI,EAAE,SADV;AAEIC,MAAAA,KAAK,EAAE;AAFX,KALK,EASL;AACID,MAAAA,IAAI,EAAE,SADV;AAEIC,MAAAA,KAAK,EAAE;AAFX,KATK,EAaL;AACID,MAAAA,IAAI,EAAE,UADV;AAEIC,MAAAA,KAAK,EAAE;AAFX,KAbK,CAPb;AAyBIC,IAAAA,QAAQ,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmBA,MAAM,CAACC,KAAP,CAAaC,OAAb,CAAqBJ,KAArB,MAAgC;AAzBjE,GAjCqB,EA6DrB;AACIhB,IAAAA,KAAK,EAAE,QADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,QAHf;AAIIpB,IAAAA,GAAG,EAAE,QAJT;AAKIqB,IAAAA,KAAK,EAAE;AALX,GA7DqB,EAoErB;AACIH,IAAAA,KAAK,EAAE,UADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,UAHf;AAIIpB,IAAAA,GAAG,EAAE,UAJT;AAKIqB,IAAAA,KAAK,EAAE;AALX,GApEqB,CAAzB;;AA6EA,QAAMkB,mBAAmB,GAAG,CAACC,UAAD,EAAaR,OAAb,EAAsBV,MAAtB,KAAiC;AACzDmB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,UAAlC,EAA8CR,OAA9C,EAAuDV,MAAvD;AACAR,IAAAA,aAAa,CAACQ,MAAD,CAAb;AACH,GAHD;;AAKA,QAAMqB,mBAAmB,GAAG,CAACH,UAAD,EAAaR,OAAb,EAAsBV,MAAtB,KAAiC;AACzDmB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,UAAlC,EAA8CR,OAA9C,EAAuDV,MAAvD;AACAN,IAAAA,cAAc,CAACM,MAAD,CAAd;AACH,GAHD;;AAKA,QAAMsB,cAAc,GAAG,YAAY;AAC/B,QAAIC,QAAQ,GAAG,MAAMlF,oBAAoB,CAACsB,iBAAD,EAAoBM,oBAAoB,CAAC,CAAD,CAAxC,EAA6CA,oBAAoB,CAAC,CAAD,CAAjE,CAAzC,CAD+B,CAE/B;;AACAC,IAAAA,cAAc,GAAGrB,gBAAgB,CAAC0E,QAAD,CAAjC;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYlD,cAAZ;AACAiB,IAAAA,QAAQ,CAAC,CAAC;AAAEC,MAAAA;AAAF,KAAD,MAAgB;AAAEA,MAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,KAAhB,CAAD,CAAR;AACH,GAND;;AAQAjD,EAAAA,SAAS,CAAC,MAAM;AACZgF,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAEApC,IAAAA,iBAAiB,GAAG,IAAI5B,MAAJ,CAAW,WAAX,EAAwB;AACxCoE,MAAAA,IAAI,EAAEzD,cADkC;AAExC0D,MAAAA,OAAO,EAAE,IAF+B;AAGxCC,MAAAA,MAAM,EAAE,UAHgC;AAIxCC,MAAAA,MAAM,EAAE,OAJgC;AAKxCC,MAAAA,WAAW,EAAE,MAL2B;AAMxCnD,MAAAA,KAAK,EAAE;AACHoD,QAAAA,QAAQ,EAAE,QADP;AAEHC,QAAAA,MAAM,EAAE,CACJ;AAAEzD,UAAAA,IAAI,EAAE;AAAR,SADI,EAEJ;AAAEA,UAAAA,IAAI,EAAE;AAAR,SAFI,EAGJ;AAAEA,UAAAA,IAAI,EAAE;AAAR,SAHI;AAFL,OANiC;AAcxCL,MAAAA;AAdwC,KAAxB,CAApB;AAiBA+D,IAAAA,YAAY;;AAGZ,QAAI;AAAE/C,MAAAA,iBAAiB,CAACgD,MAAlB;AAA6B,KAAnC,CACA,MAAM,CAAG;;AAET,WAAO,MAAM;AACThD,MAAAA,iBAAiB,CAACiD,OAAlB;AACH,KAFD;AAGH,GA7BQ,EA6BN,EA7BM,CAAT,CAvGsB,CAsItB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMF,YAAY,GAAG,YAAY;AAC7B;AACA;AACA,QAAIR,QAAQ,GAAG,MAAMjF,mBAAmB,CAACsB,uBAAD,EAA0BE,aAAa,CAAC,CAAD,CAAvC,EAA4CA,aAAa,CAAC,CAAD,CAAzD,CAAxC;AACA,QAAIoE,YAAY,GAAGnF,eAAe,CAACwE,QAAD,CAAlC;AAEAvC,IAAAA,iBAAiB,CAACmD,UAAlB,CAA6BD,YAA7B;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAYc,YAAZ,EAP6B,CAQ7B;;AACA/C,IAAAA,QAAQ,CAAC,CAAC;AAAEC,MAAAA;AAAF,KAAD,MAAgB;AAAEA,MAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,KAAhB,CAAD,CAAR;AACH,GAVD;;AAaA,QAAMgD,SAAS,GAAG,CACd;AACIxC,IAAAA,KAAK,EAAE,UADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,UAHf;AAIIpB,IAAAA,GAAG,EAAE,UAJT;AAKIqB,IAAAA,KAAK,EAAE,QALX;AAOIC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KACJ,IAAIC,IAAJ,CAAS9C,MAAM,CAAC4C,CAAC,CAAC7B,QAAH,EAAa,sBAAb,CAAN,CAA2CgC,MAA3C,CAAkD,KAAlD,CAAT,IACA,IAAID,IAAJ,CAAS9C,MAAM,CAAC6C,CAAC,CAAC9B,QAAH,EAAa,sBAAb,CAAN,CAA2CgC,MAA3C,CAAkD,KAAlD,CAAT,CATR;AAWIC,IAAAA,SAAS,EAAEd,UAAU,CAACe,SAAX,KAAyB,UAAzB,GAAsCf,UAAU,CAACgB,KAAjD,GAAyD,IAXxE;AAYIC,IAAAA,QAAQ,EAAE;AAZd,GADc,EAed;AACIZ,IAAAA,KAAK,EAAE,OADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,UAHf;AAIIpB,IAAAA,GAAG,EAAE,UAJT;AAKIqB,IAAAA,KAAK,EAAE,QALX;AAOIC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACoC,QAAF,GAAanC,CAAC,CAACmC,QAPrC;AAQIhC,IAAAA,SAAS,EAAEd,UAAU,CAACe,SAAX,KAAyB,UAAzB,GAAsCf,UAAU,CAACgB,KAAjD,GAAyD,IARxE;AASIC,IAAAA,QAAQ,EAAE;AATd,GAfc,EA0Bd;AACIZ,IAAAA,KAAK,EAAE,MADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,SAHf;AAIIpB,IAAAA,GAAG,EAAE,SAJT;AAKIqB,IAAAA,KAAK,EAAE,QALX;AAOIC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACqC,OAAF,GAAYpC,CAAC,CAACoC,OAPpC;AAQIjC,IAAAA,SAAS,EAAEd,UAAU,CAACe,SAAX,KAAyB,SAAzB,GAAqCf,UAAU,CAACgB,KAAhD,GAAwD,IARvE;AASIC,IAAAA,QAAQ,EAAE;AATd,GA1Bc,EAqCd;AACIZ,IAAAA,KAAK,EAAE,MADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,SAHf;AAIIpB,IAAAA,GAAG,EAAE,SAJT;AAKIqB,IAAAA,KAAK,EAAE,QALX;AAOIC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACsC,OAAF,GAAYrC,CAAC,CAACqC,OAPpC;AAQIlC,IAAAA,SAAS,EAAEd,UAAU,CAACe,SAAX,KAAyB,SAAzB,GAAqCf,UAAU,CAACgB,KAAhD,GAAwD,IARvE;AASIC,IAAAA,QAAQ,EAAE;AATd,GArCc,EAgDd;AACIZ,IAAAA,KAAK,EAAE,OADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,UAHf;AAIIpB,IAAAA,GAAG,EAAE,UAJT;AAKIqB,IAAAA,KAAK,EAAE,QALX;AAOIC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACuC,QAAF,GAAatC,CAAC,CAACsC,QAPrC;AAQInC,IAAAA,SAAS,EAAEd,UAAU,CAACe,SAAX,KAAyB,UAAzB,GAAsCf,UAAU,CAACgB,KAAjD,GAAyD,IARxE;AASIC,IAAAA,QAAQ,EAAE;AATd,GAhDc,CAAlB;;AA8DA,QAAMiC,eAAe,GAAG,YAAY;AAChC,QAAIlB,QAAQ,GAAG,MAAMjF,mBAAmB,CAACsB,uBAAD,EAA0BC,gBAAgB,CAAC,CAAD,CAA1C,EAA+CA,gBAAgB,CAAC,CAAD,CAA/D,CAAxC,CADgC,CAEhC;;AACAE,IAAAA,cAAc,GAAGb,qBAAqB,CAACR,QAAD,EAAWK,eAAe,CAACwE,QAAD,CAA1B,CAAtC;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYrD,cAAZ;AACAoB,IAAAA,QAAQ,CAAC,CAAC;AAAEC,MAAAA;AAAF,KAAD,MAAgB;AAAEA,MAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,KAAhB,CAAD,CAAR;AACH,GAND;;AAQA,QAAMsD,eAAe,GAAG,CAAC9B,KAAD,EAAQvC,IAAR,KAAiB;AAErC,YAAQA,IAAR;AACI,WAAK,OAAL;AACIR,QAAAA,gBAAgB,GAAG,EAAnB;AACAA,QAAAA,gBAAgB,GAAGjB,uBAAuB,CAACgE,KAAD,CAA1C;AACA;;AAEJ,WAAK,OAAL;AACI3C,QAAAA,oBAAoB,GAAG,EAAvB;AACAA,QAAAA,oBAAoB,GAAGrB,uBAAuB,CAACgE,KAAD,CAA9C;AACA;;AAEJ;AACI;AAZR,KAFqC,CAoBrC;;AACH,GArBD;;AAwBA,QAAM+B,YAAY,GAAI/B,KAAD,IAAW;AAE5B,QAAIA,KAAK,KAAK,KAAd,EAAqB;AACjBjD,MAAAA,iBAAiB,GAAG,CAAC,UAAD,EAAa,SAAb,EAAwB,SAAxB,EAAmC,UAAnC,CAApB;AACH,KAFD,MAIK;AACDwD,MAAAA,OAAO,CAACC,GAAR,CAAa,YAAWR,KAAM,EAA9B;AACAjD,MAAAA,iBAAiB,GAAG,EAApB;AACAA,MAAAA,iBAAiB,CAACiF,IAAlB,CAAuBhC,KAAvB;AACH;AACJ,GAXD;;AAaA,sBACI;AAAA,4BACI;AAAK,MAAA,KAAK,EAAE;AAAEiC,QAAAA,aAAa,EAAE;AAAjB,OAAZ;AAAA,6BACI,QAAC,OAAD;AAAS,QAAA,WAAW,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAOQ,QAAC,IAAD;AAAM,MAAA,KAAK,EAAE,eAAb;AAA8B,MAAA,QAAQ,EAAE,IAAxC;AAA8C,MAAA,KAAK,EAAE;AAAEhD,QAAAA,KAAK,EAAE,MAAT;AAAiBiD,QAAAA,YAAY,EAAE,EAA/B;AAAmCC,QAAAA,eAAe,EAAE;AAApD,OAArD;AAAsH,MAAA,SAAS,EAAE,IAAjI;AAAA,6BACI;AAAK,QAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAPR,eAaI;AAAK,MAAA,KAAK,EAAE;AAAEF,QAAAA,aAAa,EAAE;AAAjB,OAAZ;AAAA,6BACI,QAAC,OAAD;AAAS,QAAA,WAAW,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAbJ,eAiBI;AAAK,MAAA,KAAK,EAAE;AAAEA,QAAAA,aAAa,EAAE;AAAjB,OAAZ;AAAA,8BACI,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAGG,CAAD,IAAON,eAAe,CAACM,CAAD,EAAI,OAAJ;AAA7C;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,KAAK,EAAE;AAAEC,UAAAA,UAAU,EAAE;AAAd,SAA9B;AAAA,+BACI,QAAC,OAAD;AAAS,UAAA,IAAI,EAAElF,cAAf;AAA+B,UAAA,MAAM,EAAC,QAAtC;AAA+C,UAAA,QAAQ,EAAE,aAAzD;AAAwE,UAAA,OAAO,EAAES,YAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAHJ,eASI,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,KAAK,EAAE;AAAEyE,UAAAA,UAAU,EAAE;AAAd,SAA9B;AAAsD,QAAA,OAAO,EAAE,MAAM;AAAER,UAAAA,eAAe;AAAI,SAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBJ,eA8BI,QAAC,IAAD;AAAM,MAAA,KAAK,EAAC,WAAZ;AAAwB,MAAA,QAAQ,EAAE,IAAlC;AACI,MAAA,KAAK,EAAE;AAAE5C,QAAAA,KAAK,EAAE,MAAT;AAAiBiD,QAAAA,YAAY,EAAE,EAA/B;AAAmCI,QAAAA,YAAY,EAAE;AAAjD,OADX;AACsE,MAAA,SAAS,EAAE,IADjF;AAAA,6BAEI,QAAC,KAAD;AAAO,QAAA,QAAQ,MAAf;AAAgB,QAAA,OAAO,EAAEd,SAAzB;AAAoC,QAAA,UAAU,EAAErE,cAAhD;AAAgE,QAAA,IAAI,EAAC,OAArE;AAA6E,QAAA,MAAM,EAAE;AAAEoF,UAAAA,CAAC,EAAE;AAAL,SAArF;AACI,QAAA,QAAQ,EAAElC,mBADd;AACmC,QAAA,UAAU,EAAE;AAD/C;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YA9BJ,eAoCI;AAAK,MAAA,KAAK,EAAE;AAAEmC,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA,8BAEI;AAAK,QAAA,KAAK,EAAE;AAAEP,UAAAA,aAAa,EAAE,MAAjB;AAAyBQ,UAAAA,UAAU,EAAE;AAArC,SAAZ;AAAA,+BACI,QAAC,OAAD;AAAS,UAAA,WAAW,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,eAMI;AAAK,QAAA,KAAK,EAAE;AAAER,UAAAA,aAAa,EAAE;AAAjB,SAAZ;AAAA,gCACQ,QAAC,WAAD;AAAa,UAAA,QAAQ,MAArB;AAAsB,UAAA,QAAQ,EAAGG,CAAD,IAAON,eAAe,CAACM,CAAD,EAAI,OAAJ;AAAtD;AAAA;AAAA;AAAA;AAAA,gBADR,eAGQ,QAAC,MAAD;AAAQ,UAAA,YAAY,EAAC,UAArB;AAAgC,UAAA,KAAK,EAAE;AAAEnD,YAAAA,KAAK,EAAE,GAAT;AAAcoD,YAAAA,UAAU,EAAE;AAA1B,WAAvC;AAA2E,UAAA,QAAQ,EAAEN,YAArF;AAAA,kCACI,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI,QAAC,MAAD;AAAQ,YAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHR,eAWQ,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,SAAb;AAAuB,UAAA,KAAK,EAAE;AAAEM,YAAAA,UAAU,EAAE;AAAd,WAA9B;AAAA,iCACI,QAAC,OAAD;AAAS,YAAA,IAAI,EAAE/E,cAAf;AAA+B,YAAA,MAAM,EAAC,QAAtC;AAA+C,YAAA,QAAQ,EAAE,cAAzD;AAAyE,YAAA,OAAO,EAAES,YAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAXR,eAmBQ,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,SAAb;AAAuB,UAAA,KAAK,EAAE;AAAEsE,YAAAA,UAAU,EAAE;AAAd,WAA9B;AAAsD,UAAA,OAAO,EAAE,MAAM;AAAE3B,YAAAA,cAAc;AAAI,WAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBR;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,eA4BI,QAAC,IAAD;AAAM,QAAA,KAAK,EAAC,WAAZ;AAAwB,QAAA,QAAQ,EAAE,IAAlC;AACI,QAAA,KAAK,EAAE;AAAEzB,UAAAA,KAAK,EAAE,MAAT;AAAiBiD,UAAAA,YAAY,EAAE,EAA/B;AAAmCI,UAAAA,YAAY,EAAE;AAAjD,SADX;AACsE,QAAA,SAAS,EAAE,IADjF;AAAA,+BAEI,QAAC,KAAD;AAAO,UAAA,QAAQ,MAAf;AAAgB,UAAA,OAAO,EAAEvD,gBAAzB;AAA2C,UAAA,UAAU,EAAEzB,cAAvD;AAAuE,UAAA,MAAM,EAAE;AAAEoF,YAAAA,CAAC,EAAE,GAAL;AAAUH,YAAAA,CAAC,EAAE;AAAb,WAA/E;AAAmG,UAAA,UAAU,EAAE,KAA/G;AAAsH,UAAA,IAAI,EAAC,OAA3H;AAAmI,UAAA,QAAQ,EAAE9B;AAA7I;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YApCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4EH,CAnVD;;GAAMpC,W;;KAAAA,W;AAqVN,eAAeA,WAAf","sourcesContent":["import { Button, Col, Divider, Row, DatePicker, Card, Table, Select, Spin, Typography } from 'antd'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { logdata_request, MSM_EventLog_request, MSM_logdata_request } from '../../api'\r\nimport { C3Model, C3ModelMap, G2Model, MSMTable, DummyData } from '../../DataRequest/DataModel'\r\nimport {\r\n    ConvertMonentToDateTime, EventSortTimeMSM, GetDateTime,\r\n    DataSortTimeMSM, LogDataMappingTime, LogDataMappingTimeMSM,\r\n    LogDataMappingNameMSM\r\n} from '../../DataRequest/LogDataRequestWrap'\r\nimport { Line, Column } from '@antv/g2plot';\r\nimport moment from 'moment';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\n\r\n\r\nlet DTinitial = GetDateTime(0, 1)  // get from yesterday 00:00 to today 00:00\r\nlet DTinitial2 = GetDateTime(0, 1)  // get from yesterday 00:00 to today 00:00\r\nlet DTinitial3 = GetDateTime(7, 1)  // get from yesterday 00:00 to today 00:00\r\n\r\n\r\nlet RequestDataOption = ['Line50kg', 'Line1kg', 'Line2kg', 'Line1Ton']\r\nlet RequestDataOption_Daily = ['Line50kg_Daily', 'Line1kg_Daily', 'Line2kg_Daily', 'Line1Ton_Daily']\r\n\r\nlet RequestDateRange = [DTinitial[0], DTinitial[1]]\r\n\r\nlet BarChartRange = [DTinitial3[0], DTinitial3[1]]\r\n\r\nlet responseSorted = []\r\nconst annotations = [];\r\n\r\nlet EventLogRequestRange = [DTinitial2[0], DTinitial2[1]]\r\nlet EventLogSorted = []\r\n\r\n\r\n\r\nconst Dailydata = [\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n\r\n\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 543,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 463,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 234,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 54,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 643,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 76,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 876,\r\n    },\r\n\r\n\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 543,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 463,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 234,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 54,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 643,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 76,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 876,\r\n    },\r\n\r\n\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 564,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 23,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 64,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 76,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 23,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 46,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 86,\r\n    },\r\n]\r\n\r\n\r\nconst DailyLogTable = [\r\n\r\n]\r\n\r\nconst headersDaily = [\r\n    { label: \"DateTime\", key: \"DateTime\" },\r\n    { label: \"Line50kg\", key: \"Line50kg\" },\r\n    { label: \"Line1kg\", key: \"Line1kg\" },\r\n    { label: \"Line2kg\", key: \"Line2kg\" },\r\n    { label: \"Line1Ton\", key: \"Line1Ton\" },\r\n];\r\n\r\nconst headersEvent = [\r\n    { label: \"DateTime\", key: \"DateTime\" },\r\n    { label: \"Tag\", key: \"Tag\" },\r\n    { label: \"IdUnit\", key: \"IdUnit\" },\r\n    { label: \"Label\", key: \"Label\" },\r\n    { label: \"Weight\", key: \"Weight\" },\r\n    { label: \"Location\", key: \"Location\" },\r\n\r\n];\r\n\r\n\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\nconst { Title } = Typography\r\n\r\n\r\nlet line, stackedColumnPlot\r\n\r\nconst EnergyUsage = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n    const [Loading, setLoading] = useState(false);\r\n    const [sortedInfo, setSortedInfo] = useState({});\r\n    const [sortedInfo2, setSortedInfo2] = useState({});\r\n\r\n\r\n    const LogColumbPerTime = [\r\n        {\r\n            title: 'DateTime',\r\n            width: 40,\r\n            dataIndex: 'DateTime',\r\n            key: 'DateTime',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) =>\r\n                new Date(moment(a.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")) -\r\n                new Date(moment(b.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")),\r\n\r\n            sortOrder: sortedInfo2.columnKey === 'DateTime' ? sortedInfo2.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: 'Tag',\r\n            width: 60,\r\n            dataIndex: 'Tag',\r\n            key: 'Tag',\r\n            align: 'center',\r\n        },\r\n        {\r\n            title: 'Id Unit',\r\n            width: 20,\r\n            dataIndex: 'IdUnit',\r\n            key: 'IdUnit',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.IdUnit - b.IdUnit,\r\n            sortOrder: sortedInfo2.columnKey === 'IdUnit' ? sortedInfo2.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: 'Label',\r\n            width: 20,\r\n            dataIndex: 'Label',\r\n            key: 'Label',\r\n            align: 'center',\r\n\r\n            filters: [\r\n                {\r\n                    text: 'Line50kg',\r\n                    value: 'Line50kg',\r\n                },\r\n                {\r\n                    text: 'Line1kg',\r\n                    value: 'Line1kg',\r\n                },\r\n                {\r\n                    text: 'Line2kg',\r\n                    value: 'Line2kg',\r\n                },\r\n                {\r\n                    text: 'Line1Ton',\r\n                    value: 'Line1Ton',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.Label.indexOf(value) === 0,\r\n        },\r\n\r\n        {\r\n            title: 'Weight',\r\n            width: 20,\r\n            dataIndex: 'Weight',\r\n            key: 'Weight',\r\n            align: 'center',\r\n        },\r\n        {\r\n            title: 'Location',\r\n            width: 20,\r\n            dataIndex: 'Location',\r\n            key: 'Location',\r\n            align: 'center',\r\n        },\r\n    ]\r\n\r\n    const handleChangeOverall = (pagination, filters, sorter) => {\r\n        console.log('Various parameters', pagination, filters, sorter);\r\n        setSortedInfo(sorter);\r\n    };\r\n\r\n    const handleChangePertime = (pagination, filters, sorter) => {\r\n        console.log('Various parameters', pagination, filters, sorter);\r\n        setSortedInfo2(sorter);\r\n    };\r\n\r\n    const EvenLogRequest = async () => {\r\n        let response = await MSM_EventLog_request(RequestDataOption, EventLogRequestRange[0], EventLogRequestRange[1])\r\n        //  let DailyLogSorted = LogDataMappingTimeMSM(MSMTable,response)   \r\n        EventLogSorted = EventSortTimeMSM(response)\r\n        console.log(EventLogSorted);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('Reffect');\r\n\r\n        stackedColumnPlot = new Column('container', {\r\n            data: responseSorted,\r\n            isStack: true,\r\n            xField: 'DateTime',\r\n            yField: 'Value',\r\n            seriesField: 'type',\r\n            label: {\r\n                position: 'middle',\r\n                layout: [\r\n                    { type: 'interval-adjust-position' },\r\n                    { type: 'interval-hide-overlap' },\r\n                    { type: 'adjust-color' },\r\n                ],\r\n            },\r\n            annotations,\r\n        });\r\n\r\n        BarChartInit()\r\n\r\n\r\n        try { stackedColumnPlot.render(); }\r\n        catch { }\r\n\r\n        return () => {\r\n            stackedColumnPlot.destroy()\r\n        }\r\n    }, [])\r\n\r\n    // const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n    //     console.log(Parameter)\r\n    //     const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n    //     let data = DataSortTime(response)\r\n    //     LogValue[BufferName] = data\r\n    //     console.log(data);\r\n    //     setState(({ count }) => ({ count: count + 1 }));\r\n    // }\r\n\r\n    const BarChartInit = async () => {\r\n        // setLoading(true)\r\n        // console.log(Parameter)\r\n        let response = await MSM_logdata_request(RequestDataOption_Daily, BarChartRange[0], BarChartRange[1])\r\n        let BarChartData = DataSortTimeMSM(response)\r\n\r\n        stackedColumnPlot.changeData(BarChartData)\r\n        console.log(BarChartData);\r\n        // setLoading(false)\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n\r\n    const LogColumb = [\r\n        {\r\n            title: 'DateTime',\r\n            width: 70,\r\n            dataIndex: 'DateTime',\r\n            key: 'DateTime',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) =>\r\n                new Date(moment(a.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")) -\r\n                new Date(moment(b.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")),\r\n\r\n            sortOrder: sortedInfo.columnKey === 'DateTime' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '50 kG',\r\n            width: 70,\r\n            dataIndex: 'Line50kg',\r\n            key: 'Line50kg',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line50kg - b.Line50kg,\r\n            sortOrder: sortedInfo.columnKey === 'Line50kg' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '1 kG',\r\n            width: 70,\r\n            dataIndex: 'Line1kg',\r\n            key: 'Line1kg',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line1kg - b.Line1kg,\r\n            sortOrder: sortedInfo.columnKey === 'Line1kg' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '2 kG',\r\n            width: 70,\r\n            dataIndex: 'Line2kg',\r\n            key: 'Line2kg',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line2kg - b.Line2kg,\r\n            sortOrder: sortedInfo.columnKey === 'Line2kg' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '1 Ton',\r\n            width: 70,\r\n            dataIndex: 'Line1Ton',\r\n            key: 'Line1Ton',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line1Ton - b.Line1Ton,\r\n            sortOrder: sortedInfo.columnKey === 'Line1Ton' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n\r\n    ]\r\n\r\n    const DailyLogRequest = async () => {\r\n        let response = await MSM_logdata_request(RequestDataOption_Daily, RequestDateRange[0], RequestDateRange[1])\r\n        //  let responseSorted = LogDataMappingTimeMSM(MSMTable,response)   \r\n        responseSorted = LogDataMappingNameMSM(MSMTable, DataSortTimeMSM(response))\r\n        console.log(responseSorted);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const ChangeDateRange = (value, type) => {\r\n\r\n        switch (type) {\r\n            case 'Daily':\r\n                RequestDateRange = []\r\n                RequestDateRange = ConvertMonentToDateTime(value)\r\n                break;\r\n\r\n            case 'Event':\r\n                EventLogRequestRange = []\r\n                EventLogRequestRange = ConvertMonentToDateTime(value)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n\r\n\r\n        // console.log(RequestDateRange);\r\n    }\r\n\r\n\r\n    const ChangeOption = (value) => {\r\n\r\n        if (value === 'All') {\r\n            RequestDataOption = ['Line50kg', 'Line1kg', 'Line2kg', 'Line1Ton']\r\n        }\r\n\r\n        else {\r\n            console.log(`selected ${value}`);\r\n            RequestDataOption = []\r\n            RequestDataOption.push(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <Divider orientation=\"left\">Daily Count Log</Divider>\r\n            </div>\r\n\r\n\r\n            {/* <Spin tip=\"Loading...\" spinning={Loading} size=\"large\"> */}\r\n                <Card title={'Weekly Record'} bordered={true} style={{ width: '100%', borderRadius: 15, backgroundColor: '#ffffff' }} hoverable={true}>\r\n                    <div id='container'></div>\r\n                </Card>\r\n            {/* </Spin> */}\r\n\r\n\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <Divider orientation=\"left\">Daily Log</Divider>\r\n            </div>\r\n\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <RangePicker onChange={(e) => ChangeDateRange(e, 'Daily')} />\r\n\r\n                <Button type='primary' style={{ marginLeft: '10px' }} >\r\n                    <CSVLink data={responseSorted} target=\"_blank\" filename={\"DataLog.csv\"} headers={headersDaily}>\r\n                        Export\r\n                    </CSVLink>\r\n                </Button>\r\n\r\n                <Button type='primary' style={{ marginLeft: '10px' }} onClick={() => { DailyLogRequest() }}>Update</Button>\r\n            </div>\r\n\r\n\r\n            <Card title='Daily Log' bordered={true}\r\n                style={{ width: '100%', borderRadius: 15, marginBottom: '10px' }} hoverable={true}>\r\n                <Table bordered columns={LogColumb} dataSource={responseSorted} size=\"small\" scroll={{ y: 500 }}\r\n                    onChange={handleChangeOverall} pagination={false} />\r\n            </Card>\r\n\r\n            <div style={{ marginTop: '16px' }}>\r\n\r\n                <div style={{ paddingBottom: '10px', paddingTop: '10px' }}>\r\n                    <Divider orientation=\"left\">Event Log</Divider>\r\n                </div>\r\n\r\n                <div style={{ paddingBottom: '10px' }}>\r\n                        <RangePicker showTime onChange={(e) => ChangeDateRange(e, 'Event')} />\r\n\r\n                        <Select defaultValue=\"Line50kg\" style={{ width: 100, marginLeft: '10px' }} onChange={ChangeOption}>\r\n                            <Option value=\"All\">All</Option>\r\n                            <Option value=\"Line50kg\">Line50kg</Option>\r\n                            <Option value=\"Line1kg\">Line1kg</Option>\r\n                            <Option value=\"Line2kg\">Line2kg</Option>\r\n                            <Option value=\"Line1Ton\">Line1Ton</Option>\r\n                        </Select>\r\n\r\n                        <Button type='primary' style={{ marginLeft: '10px' }} >\r\n                            <CSVLink data={EventLogSorted} target=\"_blank\" filename={\"EventLog.csv\"} headers={headersEvent}>\r\n                                Export\r\n                            </CSVLink>\r\n                        </Button>\r\n\r\n\r\n\r\n                        <Button type='primary' style={{ marginLeft: '10px' }} onClick={() => { EvenLogRequest() }}>Update</Button>\r\n                    </div>\r\n\r\n                <Card title='Event Log' bordered={true}\r\n                    style={{ width: '100%', borderRadius: 15, marginBottom: '10px' }} hoverable={true}>\r\n                    <Table bordered columns={LogColumbPerTime} dataSource={EventLogSorted} scroll={{ x: 600, y: 350 }} pagination={false} size=\"small\" onChange={handleChangePertime} />\r\n                </Card>\r\n\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EnergyUsage\r\n\r\n"]},"metadata":{},"sourceType":"module"}