{"ast":null,"code":"import axios from'axios';import{message}from'antd';export default function request(url){var data=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var type=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'GET';axios.defaults.withCredentials=true;return new Promise(function(resolve,reject){var promise;if(type==='GET'){promise=axios.get(url,{params:data});}else{promise=axios.post(url,data);}promise.then(function(response){resolve(response.data);//console.log(response);\n}).catch(function(error){message.error('Request Fail: '+error.message);});});}","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/api/request.js"],"names":["axios","message","request","url","data","type","defaults","withCredentials","Promise","resolve","reject","promise","get","params","post","then","response","catch","error"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,MAAxB,CAGA,cAAe,SAASC,CAAAA,OAAT,CAAiBC,GAAjB,CAA+C,IAAzBC,CAAAA,IAAyB,2DAAlB,EAAkB,IAAdC,CAAAA,IAAc,2DAAP,KAAO,CAC1DL,KAAK,CAACM,QAAN,CAAeC,eAAf,CAAiC,IAAjC,CAGA,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACpC,GAAIC,CAAAA,OAAJ,CAEA,GAAIN,IAAI,GAAK,KAAb,CAAoB,CAChBM,OAAO,CAAGX,KAAK,CAACY,GAAN,CAAUT,GAAV,CAAc,CAAEU,MAAM,CAAET,IAAV,CAAd,CAAV,CACH,CAFD,IAEO,CACHO,OAAO,CAAGX,KAAK,CAACc,IAAN,CAAWX,GAAX,CAAgBC,IAAhB,CAAV,CACH,CAEDO,OAAO,CAACI,IAAR,CAAa,SAAAC,QAAQ,CAAI,CACrBP,OAAO,CAACO,QAAQ,CAACZ,IAAV,CAAP,CACA;AACH,CAHD,EAGGa,KAHH,CAGS,SAAAC,KAAK,CAAI,CACdjB,OAAO,CAACiB,KAAR,CAAc,iBAAmBA,KAAK,CAACjB,OAAvC,EACH,CALD,EAMH,CAfM,CAAP,CAgBH","sourcesContent":["import axios from 'axios'\r\nimport { message } from 'antd'\r\n\r\n\r\nexport default function request(url, data = {}, type = 'GET') {\r\n    axios.defaults.withCredentials = true\r\n    \r\n\r\n    return new Promise((resolve, reject) => {\r\n        let promise\r\n\r\n        if (type === 'GET') {\r\n            promise = axios.get(url,{ params: data})\r\n        } else {\r\n            promise = axios.post(url, data)\r\n        }\r\n\r\n        promise.then(response => {\r\n            resolve(response.data)\r\n            //console.log(response);\r\n        }).catch(error => {\r\n            message.error('Request Fail: ' + error.message)\r\n        })\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}