{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1ReportG2.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { DeleteJob, logdata_request, logdata_Write, ReadJob, WriteJob } from '../../api';\nimport { DataSortTime, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob } from '../../DataRequest/LogDataRequestWrap';\nimport { G2Model, JobModel } from '../../DataRequest/DataModel';\nimport NameTableWrapper from '../Report/NameTableWrapper';\nimport ReportWrapper from '../Report/ReportWrapper';\nimport { Button, message } from 'antd';\nimport ReportListWrapper from '../Report/ReportListWrapper';\nimport moment from 'moment';\nimport BagModal from '../Report/BagModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": []\n};\nlet ReportList = {\n  \"C3ReportList\": [],\n  \"G2ReportList\": []\n};\nlet JobDetailRecord = {\n  datetimeStart: '',\n  datetimeEnd: '',\n  site: '',\n  line: '',\n  BufferName: ''\n};\nlet ReportInfoG2 = {};\nlet BlankPage, ClickTime;\n\nconst Line1ReportG2 = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const JobDeleteHandler = async (jobnumber, line, page) => {\n    const response = await DeleteJob(jobnumber['Job No'], line, page);\n\n    if (response.success === true) {\n      message.success(`Job ${jobnumber['Job No']} Deleted`);\n      RequestJob([], JobDetailRecord.datetimeStart, JobDetailRecord.datetimeEnd, JobDetailRecord.site, JobDetailRecord.line, JobDetailRecord.BufferName);\n    } else {\n      message.error(`Unable to Delete Job ${jobnumber['Job No']}`);\n    }\n  };\n\n  const DataRequestG2 = row => {\n    let TimeRange = [];\n    TimeRange[0] = moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    TimeRange[1] = moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    ReportInfoG2.Info1 = row['Job No'];\n    ReportInfoG2.Info2 = row['Start Time'];\n    ReportInfoG2.Info3 = row['End Time'];\n    ReportInfoG2.Info4 = row['Color'];\n    ReportInfoG2.Info5 = row['Grade'];\n    UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model);\n  };\n\n  const ColumbJobG2 = TableColumbJob(JobModel, DataRequestG2, JobDeleteHandler, 'G2', BlankPage);\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    let data = DataSortTime(response);\n    LogValue[BufferName] = LogDataMappingName(Model, data);\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\n    const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line);\n\n    if (response.success === true) {\n      message.success('Create Success !');\n    }\n  };\n\n  const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\n    JobDetailRecord.datetimeStart = datetimeStart;\n    JobDetailRecord.datetimeEnd = datetimeEnd;\n    JobDetailRecord.site = site;\n    JobDetailRecord.line = line;\n    JobDetailRecord.BufferName = BufferName;\n    const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line);\n    let data = ReportSort(response);\n    ReportList[BufferName] = data; //console.log(data);\n\n    setState(_ref2 => {\n      let {\n        count\n      } = _ref2;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const InputBag = async value => {\n    let DateTime,\n        parameter = {},\n        Value = []; // console.log(record['Time']);\n\n    DateTime = ClickTime;\n    parameter['DateTime'] = DateTime;\n    parameter['Bag'] = value;\n    Value.push(parameter);\n    console.log(parameter);\n    const response = await logdata_Write(Value, 'G2', BlankPage);\n    console.log(response);\n  };\n\n  const showModal = record => {\n    ClickTime = moment(record['Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    setIsModalVisible(true);\n  };\n\n  const handleOk = record => {\n    console.log(record['Bag']); // InputBag(record)\n\n    setIsModalVisible(false);\n    console.log(record);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const ColumbG2 = TableColumbLabelAsRow(G2Model, showModal);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BagModal, {\n      visible: isModalVisible,\n      onok: handleOk,\n      onCancle: handleCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportWrapper, {\n      CreateJobCallBack: CreateJob,\n      site: 'Polymerlink',\n      line: 'G2'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportListWrapper, {\n      ReportListCallBack: RequestJob,\n      site: 'Polymerlink',\n      line: 'G2',\n      ReportList: ReportList['G2ReportList'],\n      Columb: ColumbJobG2,\n      BufferName: \"G2ReportList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NameTableWrapper, {\n      SetTimeRangeCallBack: UpdateTableData,\n      LogValue: LogValue['LogG2'],\n      Columb: ColumbG2,\n      site: 'G2',\n      page: BlankPage,\n      BufferName: \"LogG2\",\n      Model: G2Model,\n      JobInfo: ReportInfoG2,\n      FileName: 'MILL.xlsx',\n      startingColumb: 'A',\n      startingRow: 14,\n      EndingColumb: 'N',\n      EndingRow: 14\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1ReportG2, \"gzK1TlJFB/euOQTxQKVzKN902aU=\");\n\n_c = Line1ReportG2;\nexport default Line1ReportG2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Line1ReportG2\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1ReportG2.jsx"],"names":["React","useState","useEffect","DeleteJob","logdata_request","logdata_Write","ReadJob","WriteJob","DataSortTime","TableColumbLabelAsRow","LogDataMappingName","ReportSort","TableColumbJob","G2Model","JobModel","NameTableWrapper","ReportWrapper","Button","message","ReportListWrapper","moment","BagModal","LogValue","ReportList","JobDetailRecord","datetimeStart","datetimeEnd","site","line","BufferName","ReportInfoG2","BlankPage","ClickTime","Line1ReportG2","state","setState","count","isModalVisible","setIsModalVisible","JobDeleteHandler","jobnumber","page","response","success","RequestJob","error","DataRequestG2","row","TimeRange","toISOString","split","Info1","Info2","Info3","Info4","Info5","UpdateTableData","ColumbJobG2","Parameter","StartTime","EndTime","Site","Line","Page","Model","data","CreateJob","info","InputBag","value","DateTime","parameter","Value","push","console","log","showModal","record","handleOk","handleCancel","ColumbG2"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { DeleteJob, logdata_request, logdata_Write, ReadJob, WriteJob } from '../../api';\r\nimport { DataSortTime, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob } from '../../DataRequest/LogDataRequestWrap';\r\nimport { G2Model, JobModel } from '../../DataRequest/DataModel';\r\nimport NameTableWrapper from '../Report/NameTableWrapper';\r\nimport ReportWrapper from '../Report/ReportWrapper';\r\nimport { Button, message } from 'antd';\r\nimport ReportListWrapper from '../Report/ReportListWrapper';\r\nimport moment from 'moment';\r\nimport BagModal from '../Report/BagModal';\r\n\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n}\r\n\r\nlet ReportList = {\r\n    \"C3ReportList\": [],\r\n    \"G2ReportList\": []\r\n}\r\n\r\nlet JobDetailRecord = {\r\n    datetimeStart: '',\r\n    datetimeEnd: '',\r\n    site: '',\r\n    line: '',\r\n    BufferName: ''\r\n}\r\n\r\nlet ReportInfoG2 = {}\r\n\r\nlet BlankPage, ClickTime\r\n\r\n\r\nconst Line1ReportG2 = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n\r\n    const JobDeleteHandler = async (jobnumber, line, page) => {\r\n        const response = await DeleteJob(jobnumber['Job No'], line, page)\r\n\r\n        if (response.success === true) {\r\n            message.success(`Job ${jobnumber['Job No']} Deleted`)\r\n            RequestJob([], JobDetailRecord.datetimeStart, JobDetailRecord.datetimeEnd,\r\n                JobDetailRecord.site, JobDetailRecord.line, JobDetailRecord.BufferName)\r\n        }\r\n\r\n        else {\r\n            message.error(`Unable to Delete Job ${jobnumber['Job No']}`)\r\n        }\r\n\r\n    }\r\n\r\n    const DataRequestG2 = (row) => {\r\n\r\n        let TimeRange = []\r\n\r\n        TimeRange[0] = (moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\")\r\n        TimeRange[1] = (moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\")).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n        ReportInfoG2.Info1 = row['Job No']\r\n        ReportInfoG2.Info2 = row['Start Time']\r\n        ReportInfoG2.Info3 = row['End Time']\r\n        ReportInfoG2.Info4 = row['Color']\r\n        ReportInfoG2.Info5 = row['Grade']\r\n\r\n        UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model)\r\n    }\r\n    const ColumbJobG2 = TableColumbJob(JobModel, DataRequestG2, JobDeleteHandler, 'G2', BlankPage)\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        let data = DataSortTime(response)\r\n\r\n        LogValue[BufferName] = LogDataMappingName(Model, data)\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\r\n        const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line)\r\n        if (response.success === true) {\r\n            message.success('Create Success !')\r\n        }\r\n    }\r\n\r\n    const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\r\n        JobDetailRecord.datetimeStart = datetimeStart\r\n        JobDetailRecord.datetimeEnd = datetimeEnd\r\n        JobDetailRecord.site = site\r\n        JobDetailRecord.line = line\r\n        JobDetailRecord.BufferName = BufferName\r\n\r\n        const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line)\r\n        let data = ReportSort(response)\r\n        ReportList[BufferName] = data\r\n        //console.log(data);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const InputBag = async (value) => {\r\n        let DateTime, parameter = {}, Value = []\r\n\r\n        // console.log(record['Time']);\r\n\r\n        DateTime = ClickTime\r\n        parameter['DateTime'] = DateTime\r\n        parameter['Bag'] = value\r\n\r\n        Value.push(parameter)\r\n\r\n        console.log(parameter);\r\n\r\n        const response = await logdata_Write(Value, 'G2', BlankPage)\r\n\r\n        console.log(response);\r\n    }\r\n\r\n    const showModal = (record) => {\r\n        ClickTime = moment(record['Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\"\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = (record) => {\r\n        console.log(record['Bag']);\r\n        // InputBag(record)\r\n        setIsModalVisible(false)\r\n        console.log(record);\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const ColumbG2 = TableColumbLabelAsRow(G2Model, showModal)\r\n\r\n    return (\r\n        <div>\r\n            {/* G2 part here */}\r\n            <BagModal \r\n                visible={isModalVisible}\r\n                onok={handleOk} onCancle = {handleCancel}\r\n            />\r\n\r\n            <ReportWrapper CreateJobCallBack={CreateJob}\r\n                site={'Polymerlink'} line={'G2'}\r\n            />\r\n\r\n            <ReportListWrapper ReportListCallBack={RequestJob}\r\n                site={'Polymerlink'} line={'G2'}\r\n                ReportList={ReportList['G2ReportList']}\r\n                Columb={ColumbJobG2}\r\n                BufferName={\"G2ReportList\"}\r\n            />\r\n\r\n            <NameTableWrapper SetTimeRangeCallBack={UpdateTableData}\r\n                LogValue={LogValue['LogG2']} Columb={ColumbG2}\r\n                site={'G2'} page={BlankPage} BufferName={\"LogG2\"} Model={G2Model}\r\n                JobInfo={ReportInfoG2} FileName={'MILL.xlsx'} startingColumb={'A'} startingRow={14}\r\n                EndingColumb={'N'} EndingRow={14}\r\n            />\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Line1ReportG2\r\n"]},"metadata":{},"sourceType":"module"}