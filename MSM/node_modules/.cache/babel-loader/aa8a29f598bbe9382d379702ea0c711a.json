{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Home\\\\Home.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { ReadJob, RealtimeData_Request } from '../../api';\nimport { FilterOutEndedJob, GetDateTime, ReportSort, TableColumbJob, TableColumbJobHome } from '../../DataRequest/LogDataRequestWrap';\nimport moment from 'moment';\nimport { C3Model, G2Model, JobModel } from '../../DataRequest/DataModel';\nimport { Button, Col, Row, Table } from 'antd';\nimport RealTimeTableWrapper from '../Realtime/RealTimeTableWrapper';\nimport { DataSortRT } from '../../DataRequest/RealTimeRequestWrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": []\n};\nlet ReportList = {\n  \"C3ReportList\": [],\n  \"G2ReportList\": []\n};\nlet JobDetailRecord = {\n  datetimeStart: '',\n  datetimeEnd: '',\n  site: '',\n  line: '',\n  BufferName: ''\n};\nlet ReportInfoG2 = {};\nlet BlankPage, ClickTime;\nlet RealTimeValue = {\n  \"C3Table\": [],\n  \"G2Table\": [],\n  \"C3Graph\": [],\n  \"G2Graph\": []\n};\n\nconst Home = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n\n  const DataRequest = async (label, site, page, line, HMIName, TableName) => {\n    const response = await RealtimeData_Request(label, site, page, line);\n    RealTimeValue[TableName] = DataSortRT(response);\n    RealTimeValue[HMIName] = RealTimeValue[TableName];\n  };\n\n  const RenderNewData = () => {\n    DataRequest([], 'Polymerlink', '1', 'C3', 'C3HMI', \"C3Table\");\n    DataRequest([], 'Polymerlink', BlankPage, 'G2', 'G2HMI', \"G2Table\");\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  useEffect(() => {\n    RenderNewData();\n    const interval = setInterval(() => {\n      RenderNewData();\n    }, 3000);\n    return () => {\n      clearInterval(interval);\n      console.log('Unmount Effect Line1RT');\n    };\n  }, []);\n\n  const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\n    const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line);\n    let data = ReportSort(response);\n    let OngoingJob = FilterOutEndedJob(data);\n    ReportList[BufferName] = OngoingJob;\n    setState(_ref2 => {\n      let {\n        count\n      } = _ref2;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const time = () => {\n    const timetange = GetDateTime(2, 2);\n    RequestJob([], timetange[0], timetange[1], 'Polymerlink', 'G2', \"G2ReportList\");\n  };\n\n  const ViewRealtime = record => {\n    console.log(record);\n  };\n\n  const ViewLog = () => {};\n\n  const ColumbJob = TableColumbJobHome(JobModel, ViewRealtime, ViewLog, 'G2', BlankPage, 'RealTime', 'Log');\n\n  const comparedate = () => {\n    const ii = new Date();\n    const NowTime = moment(ii).format('DD-MM-yyyy HH:mm:ss');\n    let dat1 = '11-12-2021 01:00:00';\n    let dat2 = '01-12-2021 23:00:00';\n    var date1 = new Date(dat1);\n    var date2 = new Date(dat2);\n    console.log(NowTime);\n    date2 > date1 ? console.log('yes') : console.log('no');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: time,\n      children: \" test \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: comparedate,\n      children: \" compare \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      columns: ColumbJob,\n      dataSource: ReportList[\"G2ReportList\"],\n      bordered: true,\n      scroll: {\n        x: 1000,\n        y: 500\n      },\n      pagination: false,\n      size: \"small\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        gutter: [16, 16],\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          span: 12,\n          xs: 24,\n          xl: 12,\n          children: /*#__PURE__*/_jsxDEV(RealTimeTableWrapper, {\n            TableTitle: 'C3',\n            TableData: RealTimeValue['C3Table']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          span: 12,\n          xs: 24,\n          xl: 12,\n          children: /*#__PURE__*/_jsxDEV(RealTimeTableWrapper, {\n            TableTitle: 'G2',\n            TableData: RealTimeValue['G2Table']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"kcd+c1a7RyKAa2KvtJN963wq2Sk=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Home/Home.jsx"],"names":["React","useEffect","useState","ReadJob","RealtimeData_Request","FilterOutEndedJob","GetDateTime","ReportSort","TableColumbJob","TableColumbJobHome","moment","C3Model","G2Model","JobModel","Button","Col","Row","Table","RealTimeTableWrapper","DataSortRT","LogValue","ReportList","JobDetailRecord","datetimeStart","datetimeEnd","site","line","BufferName","ReportInfoG2","BlankPage","ClickTime","RealTimeValue","Home","state","setState","count","DataRequest","label","page","HMIName","TableName","response","RenderNewData","interval","setInterval","clearInterval","console","log","RequestJob","info","data","OngoingJob","time","timetange","ViewRealtime","record","ViewLog","ColumbJob","comparedate","ii","Date","NowTime","format","dat1","dat2","date1","date2","x","y"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { ReadJob, RealtimeData_Request } from '../../api'\r\nimport { FilterOutEndedJob, GetDateTime, ReportSort, TableColumbJob, TableColumbJobHome } from '../../DataRequest/LogDataRequestWrap';\r\nimport moment from 'moment';\r\nimport { C3Model, G2Model, JobModel } from '../../DataRequest/DataModel';\r\nimport { Button, Col, Row, Table } from 'antd';\r\nimport RealTimeTableWrapper from '../Realtime/RealTimeTableWrapper';\r\nimport { DataSortRT } from '../../DataRequest/RealTimeRequestWrap';\r\n\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n}\r\n\r\nlet ReportList = {\r\n    \"C3ReportList\": [],\r\n    \"G2ReportList\": []\r\n}\r\n\r\nlet JobDetailRecord = {\r\n    datetimeStart: '',\r\n    datetimeEnd: '',\r\n    site: '',\r\n    line: '',\r\n    BufferName: ''\r\n}\r\n\r\nlet ReportInfoG2 = {}\r\n\r\nlet BlankPage, ClickTime\r\n\r\nlet RealTimeValue = {\r\n    \"C3Table\": [],\r\n    \"G2Table\": [],\r\n    \"C3Graph\": [],\r\n    \"G2Graph\": [],\r\n}\r\n\r\nconst Home = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    const DataRequest = async (label, site, page, line, HMIName, TableName) => {\r\n        const response = await RealtimeData_Request(label, site, page, line)\r\n        RealTimeValue[TableName] = DataSortRT(response)\r\n        RealTimeValue[HMIName] = RealTimeValue[TableName]\r\n    }\r\n\r\n    const RenderNewData = () => {\r\n\r\n        DataRequest([], 'Polymerlink', '1', 'C3', 'C3HMI', \"C3Table\")\r\n        DataRequest([], 'Polymerlink', BlankPage, 'G2', 'G2HMI', \"G2Table\")\r\n\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        RenderNewData()\r\n\r\n        const interval = setInterval(() => {\r\n            RenderNewData()\r\n        }, 3000)\r\n\r\n        return () => {\r\n            clearInterval(interval)\r\n            console.log('Unmount Effect Line1RT');\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\r\n        const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line)\r\n        let data = ReportSort(response)\r\n        let OngoingJob = FilterOutEndedJob(data)\r\n        ReportList[BufferName] = OngoingJob\r\n\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n\r\n\r\n    const time = () => {\r\n        const timetange = GetDateTime(2, 2)\r\n        RequestJob([], timetange[0], timetange[1], 'Polymerlink', 'G2', \"G2ReportList\")\r\n    }\r\n\r\n    const ViewRealtime = (record) => {\r\n        console.log(record);\r\n    }\r\n\r\n    const ViewLog = () => {\r\n\r\n    }\r\n\r\n    const ColumbJob = TableColumbJobHome(JobModel, ViewRealtime, ViewLog, 'G2', BlankPage, 'RealTime', 'Log')\r\n\r\n    const comparedate = () => {\r\n        const ii = new Date()\r\n        const NowTime = moment(ii).format('DD-MM-yyyy HH:mm:ss');\r\n\r\n        let dat1 = '11-12-2021 01:00:00'\r\n        let dat2 = '01-12-2021 23:00:00'\r\n\r\n        var date1 = new Date(dat1);\r\n        var date2 = new Date(dat2);\r\n\r\n        console.log(NowTime);\r\n\r\n        date2 > date1 ? console.log('yes') : console.log('no');\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={time}> test </Button>\r\n            <Button onClick={comparedate}> compare </Button>\r\n\r\n            <Table columns={ColumbJob} dataSource={ReportList[\"G2ReportList\"]} bordered scroll={{ x: 1000, y: 500 }} pagination={false} size=\"small\" />\r\n\r\n            <div>\r\n                <Row gutter={[16, 16]}>\r\n                    <Col span={12} xs={24} xl={12}>\r\n                        <RealTimeTableWrapper TableTitle={'C3'} TableData={RealTimeValue['C3Table']} />\r\n                    </Col>\r\n                    <Col span={12} xs={24} xl={12}>\r\n                        <RealTimeTableWrapper TableTitle={'G2'} TableData={RealTimeValue['G2Table']} />\r\n                    </Col>\r\n\r\n                </Row>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n"]},"metadata":{},"sourceType":"module"}