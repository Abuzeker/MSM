{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Notification\\\\NotificationC3.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form, Typography, Card, Switch, Button } from 'antd';\nimport { RealtimeData_Request, write_setting } from '../../../api';\nimport { DataSortRT } from '../../../DataRequest/RealTimeRequestWrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst originData = [];\nlet RT_tablebuf = {};\nlet ValueSetting = [];\n\nconst EditableCell = _ref => {\n  let {\n    editing,\n    dataIndex,\n    title,\n    inputType,\n    record,\n    index,\n    children,\n    ...restProps\n  } = _ref;\n  const inputNode = inputType === 'number' ? /*#__PURE__*/_jsxDEV(InputNumber, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 48\n  }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n    defaultChecked: !record\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 66\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"td\", { ...restProps,\n    children: editing ? inputType === 'number' ? /*#__PURE__*/_jsxDEV(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      children: inputNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(Form.Item, {\n      valuePropName: \"checked\",\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      children: inputNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 22\n    }, this) : children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n};\n\n_c = EditableCell;\n\nconst NotificationC3 = () => {\n  _s();\n\n  const [form] = Form.useForm();\n  const [data, setData] = useState(originData);\n  const [editingKey, setEditingKey] = useState('');\n  const [state, setState] = useState({\n    count: 0,\n    count2: 100\n  });\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    console.log(record);\n    form.setFieldsValue({ ...record\n    });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async key => {\n    try {\n      const row = await form.validateFields();\n      const newData = [...ValueSetting];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        }); // setData(newData);\n\n        ValueSetting = newData;\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        ValueSetting = newData;\n        setEditingKey('');\n      }\n\n      console.log(data);\n      setState(_ref2 => {\n        let {\n          count\n        } = _ref2;\n        return {\n          count: count + 1\n        };\n      });\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    }\n  };\n\n  const columns = [{\n    title: 'Site',\n    dataIndex: 'Line',\n    width: '15%',\n    align: 'center',\n    editable: false\n  }, {\n    title: 'Parameter',\n    dataIndex: 'Label',\n    width: '25%',\n    align: 'center',\n    editable: false\n  }, {\n    title: 'Upper Threshold',\n    dataIndex: 'HighThreshold',\n    width: '15%',\n    align: 'center',\n    editable: true\n  }, {\n    title: 'Activation',\n    dataIndex: 'HighThreshold_active',\n    width: '10%',\n    align: 'center',\n    editable: true,\n    render: record => {\n      return /*#__PURE__*/_jsxDEV(Switch, {\n        checked: record,\n        disabled: isEditing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }, this);\n    }\n  }, {\n    title: 'Lower Threshold',\n    dataIndex: 'LowThreshold',\n    width: '15%',\n    align: 'center',\n    editable: true\n  }, {\n    title: 'Activation',\n    dataIndex: 'LowThreshold_active',\n    width: '10%',\n    align: 'center',\n    editable: true,\n    render: record => {\n      return (\n        /*#__PURE__*/\n        // SelectorHandler(record)\n        _jsxDEV(Switch, {\n          checked: record,\n          disabled: isEditing\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)\n      );\n    }\n  }, {\n    title: 'Operation',\n    dataIndex: 'operation',\n    width: '20%',\n    render: (_, record) => {\n      const editable = isEditing(record);\n      return editable ? /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"javascript:;\",\n          onClick: () => save(record.key),\n          style: {\n            marginRight: 8\n          },\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n          title: \"Sure to cancel?\",\n          onConfirm: cancel,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Typography.Link, {\n        disabled: editingKey !== '',\n        onClick: () => edit(record),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }, this);\n    }\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return { ...col,\n      onCell: record => ({\n        record,\n        inputType: col.title === 'Activation' ? 'checked' : 'number',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    };\n  });\n\n  const GetSetting = async () => {};\n\n  const DataRequest = async (label, site, page, line) => {\n    const response = await RealtimeData_Request(label, site, page, line);\n    ValueSetting = DataSortRT(response);\n    console.log(ValueSetting);\n    setState(_ref3 => {\n      let {\n        count\n      } = _ref3;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const RenderNewData = () => {\n    DataRequest([], 'Polymerlink', '1', 'C3');\n  };\n\n  useEffect(() => {\n    RenderNewData();\n    console.log('sdsd');\n    return () => {\n      console.log(\"unmount\");\n    };\n  }, []);\n\n  const SettingSavehandler = async () => {\n    const WriteStatus = await write_setting(data, 'C3');\n    console.log(WriteStatus);\n\n    if (WriteStatus[\"success\"] === true) {\n      console.log('success');\n      RenderNewData();\n    } else {\n      console.log('fail');\n    }\n\n    console.log(data);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Notification Setting\",\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15,\n        backgroundColor: '#c4c4c4'\n      },\n      bodyStyle: {\n        backgroundColor: '#575757',\n        borderBottomLeftRadius: 15,\n        borderBottomRightRadius: 15\n      },\n      hoverable: true,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: SettingSavehandler,\n        style: {\n          marginBottom: '8px'\n        },\n        children: \" Save \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        form: form,\n        component: false,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          components: {\n            body: {\n              cell: EditableCell\n            }\n          },\n          bordered: true,\n          scroll: {\n            x: 500,\n            y: 800\n          },\n          dataSource: ValueSetting,\n          columns: mergedColumns,\n          rowClassName: \"editable-row\",\n          pagination: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NotificationC3, \"f+hSga+LUMUxoiRXQiHYwaCHbNw=\", false, function () {\n  return [Form.useForm];\n});\n\n_c2 = NotificationC3;\nexport default NotificationC3;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableCell\");\n$RefreshReg$(_c2, \"NotificationC3\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Notification/NotificationC3.jsx"],"names":["React","useEffect","useState","Table","Input","InputNumber","Popconfirm","Form","Typography","Card","Switch","Button","RealtimeData_Request","write_setting","DataSortRT","originData","RT_tablebuf","ValueSetting","EditableCell","editing","dataIndex","title","inputType","record","index","children","restProps","inputNode","margin","required","message","NotificationC3","form","useForm","data","setData","editingKey","setEditingKey","state","setState","count","count2","isEditing","key","edit","console","log","setFieldsValue","cancel","save","row","validateFields","newData","findIndex","item","splice","push","errInfo","columns","width","align","editable","render","_","marginRight","mergedColumns","map","col","onCell","GetSetting","DataRequest","label","site","page","line","response","RenderNewData","SettingSavehandler","WriteStatus","borderRadius","backgroundColor","borderBottomLeftRadius","borderBottomRightRadius","marginBottom","body","cell","x","y"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Table, Input, InputNumber, Popconfirm, Form, Typography, Card, Switch, Button } from 'antd';\r\nimport { RealtimeData_Request, write_setting } from '../../../api';\r\nimport { DataSortRT } from '../../../DataRequest/RealTimeRequestWrap';\r\n\r\nconst originData = [];\r\nlet RT_tablebuf = {}\r\n\r\nlet ValueSetting = []\r\n\r\n\r\nconst EditableCell = ({\r\n    editing,\r\n    dataIndex,\r\n    title,\r\n    inputType,\r\n    record,\r\n    index,\r\n    children,\r\n    ...restProps\r\n}) => {\r\n\r\n    const inputNode = inputType === 'number' ? <InputNumber /> : <Switch defaultChecked={!record} />;\r\n    return (\r\n        <td {...restProps}>\r\n            {editing ? (\r\n\r\n                inputType === 'number' ?\r\n                    (<Form.Item\r\n\r\n                        name={dataIndex}\r\n                        style={{\r\n                            margin: 0,\r\n                        }}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: `Please Input ${title}!`,\r\n                            },\r\n                        ]}\r\n                    >\r\n                        {inputNode}\r\n                    </Form.Item>) :\r\n                    (<Form.Item\r\n                        valuePropName=\"checked\"\r\n                        name={dataIndex}\r\n                        style={{\r\n                            margin: 0,\r\n                        }}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: `Please Input ${title}!`,\r\n                            },\r\n                        ]}\r\n                    >\r\n                        {inputNode}\r\n                    </Form.Item>)\r\n            ) : (\r\n                children\r\n            )}\r\n        </td>\r\n    );\r\n};\r\n\r\nconst NotificationC3 = () => {\r\n    const [form] = Form.useForm()\r\n    const [data, setData] = useState(originData)\r\n    const [editingKey, setEditingKey] = useState('')\r\n\r\n    const [state, setState] = useState({ count: 0, count2: 100 });\r\n\r\n\r\n    const isEditing = (record) => record.key === editingKey;\r\n\r\n\r\n    const edit = (record) => {\r\n        console.log(record)\r\n        form.setFieldsValue({\r\n            ...record,\r\n        });\r\n        setEditingKey(record.key);\r\n    };\r\n\r\n    const cancel = () => {\r\n        setEditingKey('');\r\n    };\r\n\r\n    const save = async (key) => {\r\n        try {\r\n            const row = await form.validateFields();\r\n            const newData = [...ValueSetting];\r\n            const index = newData.findIndex((item) => key === item.key);\r\n\r\n            if (index > -1) {\r\n                const item = newData[index];\r\n                newData.splice(index, 1, { ...item, ...row });\r\n                // setData(newData);\r\n                ValueSetting = newData\r\n                setEditingKey('');\r\n            } else {\r\n                newData.push(row);\r\n                ValueSetting = newData\r\n                setEditingKey('');\r\n            }\r\n            console.log(data)\r\n            setState(({ count }) => ({ count: count + 1 }));\r\n\r\n        } catch (errInfo) {\r\n            console.log('Validate Failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Site',\r\n            dataIndex: 'Line',\r\n            width: '15%',\r\n            align: 'center',\r\n            editable: false,\r\n        },\r\n        {\r\n            title: 'Parameter',\r\n            dataIndex: 'Label',\r\n            width: '25%',\r\n            align: 'center',\r\n            editable: false,\r\n        },\r\n\r\n        {\r\n            title: 'Upper Threshold',\r\n            dataIndex: 'HighThreshold',\r\n            width: '15%',\r\n            align: 'center',\r\n            editable: true,\r\n        },\r\n        {\r\n            title: 'Activation',\r\n            dataIndex: 'HighThreshold_active',\r\n            width: '10%',\r\n            align: 'center',\r\n            editable: true,\r\n            render: (record) => {\r\n                return (\r\n                    <Switch checked={record} disabled={isEditing} />\r\n                )\r\n            }\r\n        },\r\n\r\n        {\r\n            title: 'Lower Threshold',\r\n            dataIndex: 'LowThreshold',\r\n            width: '15%',\r\n            align: 'center',\r\n            editable: true,\r\n        },\r\n        {\r\n            title: 'Activation',\r\n            dataIndex: 'LowThreshold_active',\r\n            width: '10%',\r\n            align: 'center',\r\n            editable: true,\r\n            render: (record) => {\r\n                return (\r\n                    // SelectorHandler(record)\r\n                    <Switch checked={record} disabled={isEditing} />\r\n                )\r\n            }\r\n        },\r\n\r\n        {\r\n            title: 'Operation',\r\n            dataIndex: 'operation',\r\n            width: '20%',\r\n            render: (_, record) => {\r\n                const editable = isEditing(record);\r\n                return editable ? (\r\n                    <span>\r\n                        <a\r\n                            href=\"javascript:;\"\r\n                            onClick={() => save(record.key)}\r\n                            style={{\r\n                                marginRight: 8,\r\n                            }}\r\n                        >\r\n                            Save\r\n                        </a>\r\n                        <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\r\n                            <a>Cancel</a>\r\n                        </Popconfirm>\r\n                    </span>\r\n                ) : (\r\n                    <Typography.Link disabled={editingKey !== ''} onClick={() => edit(record)}>\r\n                        Edit\r\n                    </Typography.Link>\r\n                );\r\n            },\r\n        },\r\n    ];\r\n\r\n    const mergedColumns = columns.map((col) => {\r\n        if (!col.editable) {\r\n            return col;\r\n        }\r\n\r\n        return {\r\n            ...col,\r\n            onCell: (record) => ({\r\n                record,\r\n                inputType: col.title === 'Activation' ? 'checked' : 'number',\r\n                dataIndex: col.dataIndex,\r\n                title: col.title,\r\n                editing: isEditing(record),\r\n            }),\r\n        };\r\n    });\r\n\r\n    const GetSetting = async() =>{\r\n\r\n    }\r\n\r\n    const DataRequest = async (label, site, page, line) => {\r\n        const response = await RealtimeData_Request(label, site, page, line)\r\n        ValueSetting = DataSortRT(response)\r\n        console.log(ValueSetting);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n\r\n    }\r\n\r\n\r\n    const RenderNewData = () => {\r\n        DataRequest([], 'Polymerlink', '1', 'C3')\r\n    }\r\n\r\n    useEffect(() => {\r\n        RenderNewData()\r\n        console.log('sdsd');\r\n        return () => {\r\n            console.log(\"unmount\");\r\n        }\r\n\r\n    }, []);\r\n\r\n    const SettingSavehandler = async () => {\r\n        const WriteStatus = await write_setting(data, 'C3')\r\n\r\n        console.log(WriteStatus)\r\n        if (WriteStatus[\"success\"] === true) {\r\n            console.log('success')\r\n            RenderNewData()        }\r\n\r\n        else { console.log('fail') }\r\n\r\n        console.log(data)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Card title='Notification Setting' bordered={true} style={{ width: '100%', borderRadius: 15, backgroundColor: '#c4c4c4' }}\r\n                bodyStyle={{ backgroundColor: '#575757', borderBottomLeftRadius: 15, borderBottomRightRadius: 15 }} hoverable={true}>\r\n\r\n                <Button onClick={SettingSavehandler} style={{ marginBottom: '8px' }}> Save </Button>\r\n\r\n                <Form form={form} component={false}>\r\n                    <Table\r\n                        components={{\r\n                            body: {\r\n                                cell: EditableCell,\r\n                            },\r\n                        }}\r\n                        bordered\r\n                        scroll={{ x: 500, y: 800 }}\r\n                        dataSource={ValueSetting}\r\n                        columns={mergedColumns}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={false}\r\n\r\n\r\n                    />\r\n                </Form>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotificationC3\r\n"]},"metadata":{},"sourceType":"module"}