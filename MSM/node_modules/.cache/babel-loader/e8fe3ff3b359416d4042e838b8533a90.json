{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\MSM-Front\\\\MSM\\\\src\\\\pages\\\\EnergyUsage\\\\EnergyUsage.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Divider, Row, DatePicker, Card, Table, Select, Spin } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { logdata_request, RealtimeData_Request, MSM_logdata_request } from '../../api';\nimport { C3Model, C3ModelMap, G2Model, MSMTable, DummyData } from '../../DataRequest/DataModel';\nimport { ConvertMonentToDateTime, DataSortTime, GetDateTime, DataSortTimeMSM } from '../../DataRequest/LogDataRequestWrap';\nimport { Line, Column } from '@antv/g2plot';\nimport moment from 'moment';\nimport { each, groupBy } from '@antv/util';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet DTinitial = GetDateTime(0, 1); // get from yesterday 00:00 to today 00:00\n\nlet BlankPage = 1,\n    DTc3 = [],\n    DTg2 = [];\nlet EnergyDTRange = [],\n    G2DTRange = [];\nlet MonthlyEnergyDataSet = [];\nlet TotalEnergyInmonth = [];\nconst annotations = [];\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nconst Dailydata = [{\n  DateTime: '24/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '24/5/2022',\n  type: 'Line1kg',\n  Value: 543\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line1kg',\n  Value: 463\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line1kg',\n  Value: 234\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line1kg',\n  Value: 54\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line1kg',\n  Value: 643\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line1kg',\n  Value: 76\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line1kg',\n  Value: 876\n}, {\n  DateTime: '24/5/2022',\n  type: 'Line2kg',\n  Value: 543\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line2kg',\n  Value: 463\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line2kg',\n  Value: 234\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line2kg',\n  Value: 54\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line2kg',\n  Value: 643\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line2kg',\n  Value: 76\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line2kg',\n  Value: 876\n}, {\n  DateTime: '24/5/2022',\n  type: 'Line1Ton',\n  Value: 564\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line1Ton',\n  Value: 23\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line1Ton',\n  Value: 64\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line1Ton',\n  Value: 76\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line1Ton',\n  Value: 23\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line1Ton',\n  Value: 46\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line1Ton',\n  Value: 86\n}];\nconst DailyLogTable = [];\nDTc3.push(moment(DTinitial[2]));\nDTc3.push(moment(DTinitial[3]));\nDTg2 = DTc3;\nlet LogValue = {\n  'EnergyTable': [],\n  \"G2Table\": [],\n  \"C3Graph\": [],\n  \"G2Graph\": [],\n  \"C3Selected\": [],\n  \"G2Selected\": []\n};\nlet LogSelect = {\n  LineSelect: 'C3',\n  paraname: 'Power Meter'\n};\nconst {\n  RangePicker\n} = DatePicker;\nconst {\n  Option\n} = Select;\nlet line, stackedColumnPlot;\n\nconst EnergyUsage = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n  const [Loading, setLoading] = useState(false);\n  useEffect(() => {\n    console.log('Reffect'); //  BarChartInit()\n\n    stackedColumnPlot = new Column('container', {\n      data: Dailydata,\n      isStack: true,\n      xField: 'DateTime',\n      yField: 'Value',\n      seriesField: 'type',\n      label: {\n        position: 'middle',\n        layout: [{\n          type: 'interval-adjust-position'\n        }, {\n          type: 'interval-hide-overlap'\n        }, {\n          type: 'adjust-color'\n        }]\n      },\n      annotations\n    });\n\n    try {\n      stackedColumnPlot.render();\n    } catch {}\n\n    return () => {\n      stackedColumnPlot.destroy();\n    };\n  }, []);\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n    console.log(Parameter);\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    let data = DataSortTime(response);\n    LogValue[BufferName] = data;\n    console.log(data);\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  const BarChartInit = async () => {\n    setLoading(true); // console.log(Parameter)\n\n    stackedColumnPlot.changeData(Dailydata);\n    setLoading(false); // setState(({ count }) => ({ count: count + 1 }));\n  };\n\n  const DailyLogRequest = async () => {\n    let response = await MSM_logdata_request([\"Line50kg\", \"Line1kg\", \"Line2kg\", \"Line1Ton\"], \"2022-02-15T00:00:00Z\", \"2022-06-27T00:00:00Z\");\n    let responseSorted = DataSortTimeMSM(response);\n    console.log(responseSorted);\n  };\n\n  const ConvertJsonModel = RawData => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        children: \"Daily Count Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Spin, {\n      tip: \"Loading...\",\n      spinning: Loading,\n      size: \"large\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        title: 'Weekly Record',\n        bordered: true,\n        style: {\n          width: '100%',\n          borderRadius: 15,\n          backgroundColor: '#ffffff'\n        },\n        hoverable: true,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"container\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        children: \"Daily Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(RangePicker, {\n        onChange: DailyLogRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        defaultValue: \"Line50kg\",\n        style: {\n          width: 100,\n          marginLeft: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Option, {\n          value: \"Line50kg\",\n          children: \"Line50kg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Option, {\n          value: \"Line1kg\",\n          children: \"Line1kg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Option, {\n          value: \"Line2kg\",\n          children: \"Line2kg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Option, {\n          value: \"Line1Ton\",\n          children: \"Line1Ton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        style: {\n          marginLeft: '10px'\n        },\n        onClick: () => {\n          DailyLogRequest();\n        },\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Daily Log\",\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15,\n        marginBottom: '10px'\n      },\n      hoverable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EnergyUsage, \"G6EQGfqUWdjgCzIVOkREd1p6K24=\");\n\n_c = EnergyUsage;\nexport default EnergyUsage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EnergyUsage\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/MSM-Front/MSM/src/pages/EnergyUsage/EnergyUsage.jsx"],"names":["Button","Col","Divider","Row","DatePicker","Card","Table","Select","Spin","React","useState","useEffect","logdata_request","RealtimeData_Request","MSM_logdata_request","C3Model","C3ModelMap","G2Model","MSMTable","DummyData","ConvertMonentToDateTime","DataSortTime","GetDateTime","DataSortTimeMSM","Line","Column","moment","each","groupBy","DTinitial","BlankPage","DTc3","DTg2","EnergyDTRange","G2DTRange","MonthlyEnergyDataSet","TotalEnergyInmonth","annotations","monthNames","Dailydata","DateTime","type","Value","DailyLogTable","push","LogValue","LogSelect","LineSelect","paraname","RangePicker","Option","line","stackedColumnPlot","EnergyUsage","state","setState","count","Loading","setLoading","console","log","data","isStack","xField","yField","seriesField","label","position","layout","render","destroy","UpdateTableData","Parameter","StartTime","EndTime","Site","Page","BufferName","Model","response","BarChartInit","changeData","DailyLogRequest","responseSorted","ConvertJsonModel","RawData","paddingBottom","width","borderRadius","backgroundColor","marginLeft","marginBottom"],"mappings":"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","sourcesContent":["import { Button, Col, Divider, Row, DatePicker, Card, Table, Select, Spin } from 'antd'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { logdata_request, RealtimeData_Request, MSM_logdata_request } from '../../api'\r\nimport { C3Model, C3ModelMap, G2Model, MSMTable, DummyData } from '../../DataRequest/DataModel'\r\nimport { ConvertMonentToDateTime, DataSortTime, GetDateTime, DataSortTimeMSM } from '../../DataRequest/LogDataRequestWrap'\r\nimport { Line, Column } from '@antv/g2plot';\r\nimport moment from 'moment';\r\nimport { each, groupBy } from '@antv/util';\r\n\r\n\r\n\r\n\r\nlet DTinitial = GetDateTime(0, 1)  // get from yesterday 00:00 to today 00:00\r\nlet BlankPage = 1, DTc3 = [], DTg2 = []\r\nlet EnergyDTRange = [], G2DTRange = []\r\nlet MonthlyEnergyDataSet = []\r\nlet TotalEnergyInmonth = []\r\n\r\nconst annotations = [];\r\n\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\n\r\n\r\nconst Dailydata = [\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n\r\n\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 543,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 463,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 234,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 54,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 643,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 76,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 876,\r\n    },\r\n\r\n\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 543,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 463,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 234,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 54,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 643,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 76,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 876,\r\n    },\r\n\r\n\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 564,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 23,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 64,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 76,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 23,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 46,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 86,\r\n    },\r\n]\r\n\r\n\r\nconst DailyLogTable = [\r\n \r\n]\r\n\r\n\r\n\r\n\r\nDTc3.push(moment(DTinitial[2]))\r\nDTc3.push(moment(DTinitial[3]))\r\nDTg2 = DTc3\r\n\r\n\r\nlet LogValue = {\r\n    'EnergyTable': [],\r\n    \"G2Table\": [],\r\n    \"C3Graph\": [],\r\n    \"G2Graph\": [],\r\n    \"C3Selected\": [],\r\n    \"G2Selected\": [],\r\n}\r\n\r\nlet LogSelect = {\r\n    LineSelect: 'C3',\r\n    paraname: 'Power Meter'\r\n}\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\nlet line, stackedColumnPlot\r\n\r\nconst EnergyUsage = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n    const [Loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        console.log('Reffect');\r\n\r\n        //  BarChartInit()\r\n\r\n        stackedColumnPlot = new Column('container', {\r\n            data: Dailydata,\r\n            isStack: true,\r\n            xField: 'DateTime',\r\n            yField: 'Value',\r\n            seriesField: 'type',\r\n            label: {\r\n                position: 'middle',\r\n                layout: [\r\n                    { type: 'interval-adjust-position' },\r\n                    { type: 'interval-hide-overlap' },\r\n                    { type: 'adjust-color' },\r\n                ],\r\n            },\r\n            annotations,\r\n        });\r\n\r\n        try { stackedColumnPlot.render(); }\r\n        catch { }\r\n\r\n        return () => {\r\n            stackedColumnPlot.destroy()\r\n        }\r\n    }, [])\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n        console.log(Parameter)\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        let data = DataSortTime(response)\r\n        LogValue[BufferName] = data\r\n        console.log(data);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const BarChartInit = async () => {\r\n        setLoading(true)\r\n        // console.log(Parameter)\r\n\r\n        stackedColumnPlot.changeData(Dailydata)\r\n        setLoading(false)\r\n        // setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const DailyLogRequest = async () => {\r\n         let response = await MSM_logdata_request([\"Line50kg\", \"Line1kg\",\"Line2kg\",\"Line1Ton\"], \"2022-02-15T00:00:00Z\",\"2022-06-27T00:00:00Z\")\r\n         let responseSorted = DataSortTimeMSM(response)   \r\n\r\n         console.log(responseSorted);\r\n    }\r\n\r\n    const ConvertJsonModel =(RawData)=>{\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <Divider orientation=\"left\">Daily Count Log</Divider>\r\n            </div>\r\n\r\n\r\n            <Spin tip=\"Loading...\" spinning={Loading} size=\"large\">\r\n                <Card title={'Weekly Record'} bordered={true} style={{ width: '100%', borderRadius: 15, backgroundColor: '#ffffff' }} hoverable={true}>\r\n                    <div id='container'></div>\r\n                </Card>\r\n            </Spin>\r\n\r\n\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <Divider orientation=\"left\">Daily Log</Divider>\r\n            </div>\r\n\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <RangePicker onChange={DailyLogRequest} />\r\n\r\n                <Select defaultValue=\"Line50kg\" style={{ width: 100, marginLeft: '10px' }} >\r\n                    <Option value=\"Line50kg\">Line50kg</Option>\r\n                    <Option value=\"Line1kg\">Line1kg</Option>\r\n                    <Option value=\"Line2kg\">Line2kg</Option>\r\n                    <Option value=\"Line1Ton\">Line1Ton</Option>\r\n                </Select>\r\n\r\n                <Button type='primary' style={{ marginLeft: '10px' }} onClick={() => { DailyLogRequest() }}>Update</Button>\r\n            </div>\r\n\r\n\r\n            <Card title='Daily Log' bordered={true}\r\n                style={{ width: '100%', borderRadius: 15, marginBottom: '10px' }} hoverable={true}>\r\n                {/* <Table bordered columns={columnsC3} dataSource={LogValue['EnergyTable']} size=\"small\" scroll={{ y: 500 }} pagination={false} /> */}\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EnergyUsage\r\n\r\n"]},"metadata":{},"sourceType":"module"}