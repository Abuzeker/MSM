{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1DataLog.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Divider, Row, DatePicker, Card, Table } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { RealtimeData_Request } from '../../api';\nimport { C3Model, G2Model } from '../../DataRequest/DataModel';\nimport { VisualizeLogColumb } from '../../DataRequest/LogDataRequestWrap';\nimport { DataSortRT } from '../../DataRequest/RealTimeRequestWrap';\nimport RealTimeGraphWrapper from '../Realtime/RealTimeGraphWrapper';\nimport RealTimeTableWrapper from '../Realtime/RealTimeTableWrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet C3DataModel = C3Model;\nlet G2DataModel = G2Model;\nlet BlankPage,\n    data_filter = [];\nlet LogValue = {\n  \"C3Table\": [],\n  \"G2Table\": [],\n  \"C3Graph\": [],\n  \"G2Graph\": []\n};\nlet DateTimeRange;\nconst {\n  RangePicker\n} = DatePicker;\nlet OptionC3 = Object.keys(C3Model);\n_c = OptionC3;\nlet OptionG2 = Object.keys(G2Model);\n_c2 = OptionG2;\nconst columnsC3 = VisualizeLogColumb(OptionC3);\nconst columnsG2 = VisualizeLogColumb(OptionG2);\n\nconst Line1DataLog = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n\n  const DataRequest = async (label, site, page, line, HMIName, TableName) => {\n    const response = await RealtimeData_Request(label, site, page, line);\n    LogValue[TableName] = DataSortRT(response);\n    LogValue[HMIName] = LogValue[TableName];\n  };\n\n  const RenderNewData = () => {\n    DataRequest([], 'Polymerlink', '1', 'C3', 'C3HMI', \"C3Table\");\n    DataRequest([], 'Polymerlink', BlankPage, 'G2', 'G2HMI', \"G2Table\");\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const test = value => {\n    console.log(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(RangePicker, {\n      showTime: true,\n      onOk: test\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"RealTime\",\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        columns: columnsC3,\n        dataSource: [],\n        size: \"small\",\n        scroll: {\n          y: 500\n        },\n        pagination: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RangePicker, {\n      showTime: true,\n      onOk: test\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"RealTime\",\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        columns: columnsG2,\n        dataSource: [],\n        size: \"small\",\n        scroll: {\n          y: 500\n        },\n        pagination: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1DataLog, \"TOtJj3Zjk9A8N3grQNDDe2GZezA=\");\n\n_c3 = Line1DataLog;\nexport default Line1DataLog;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"OptionC3\");\n$RefreshReg$(_c2, \"OptionG2\");\n$RefreshReg$(_c3, \"Line1DataLog\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1DataLog.jsx"],"names":["Button","Col","Divider","Row","DatePicker","Card","Table","React","useState","useEffect","RealtimeData_Request","C3Model","G2Model","VisualizeLogColumb","DataSortRT","RealTimeGraphWrapper","RealTimeTableWrapper","C3DataModel","G2DataModel","BlankPage","data_filter","LogValue","DateTimeRange","RangePicker","OptionC3","Object","keys","OptionG2","columnsC3","columnsG2","Line1DataLog","state","setState","count","DataRequest","label","site","page","line","HMIName","TableName","response","RenderNewData","test","value","console","log","width","borderRadius","y"],"mappings":"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","sourcesContent":["import { Button, Col, Divider, Row, DatePicker, Card, Table } from 'antd'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { RealtimeData_Request } from '../../api'\r\nimport { C3Model, G2Model } from '../../DataRequest/DataModel'\r\nimport { VisualizeLogColumb } from '../../DataRequest/LogDataRequestWrap'\r\nimport { DataSortRT } from '../../DataRequest/RealTimeRequestWrap'\r\nimport RealTimeGraphWrapper from '../Realtime/RealTimeGraphWrapper'\r\nimport RealTimeTableWrapper from '../Realtime/RealTimeTableWrapper'\r\n\r\n\r\nlet C3DataModel = C3Model\r\nlet G2DataModel = G2Model\r\nlet BlankPage, data_filter=[]\r\n\r\nlet LogValue = {\r\n    \"C3Table\": [],\r\n    \"G2Table\": [],\r\n    \"C3Graph\": [],\r\n    \"G2Graph\": [],\r\n}\r\nlet DateTimeRange\r\nconst { RangePicker } = DatePicker;\r\n\r\nlet OptionC3 = Object.keys(C3Model)\r\nlet OptionG2 = Object.keys(G2Model)\r\n\r\nconst columnsC3 = VisualizeLogColumb(OptionC3) \r\nconst columnsG2 = VisualizeLogColumb(OptionG2) \r\n\r\n\r\n\r\nconst Line1DataLog = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    const DataRequest = async (label, site, page, line, HMIName, TableName) => {\r\n        const response = await RealtimeData_Request(label, site, page, line)\r\n        LogValue[TableName] = DataSortRT(response)\r\n        LogValue[HMIName] = LogValue[TableName]\r\n    }\r\n\r\n    const RenderNewData = () => {\r\n\r\n        DataRequest([], 'Polymerlink', '1', 'C3', 'C3HMI', \"C3Table\")\r\n        DataRequest([], 'Polymerlink', BlankPage, 'G2', 'G2HMI', \"G2Table\")\r\n\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n\r\n\r\n    const test = (value) =>{\r\n        console.log(value);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <RangePicker showTime onOk={test}/>\r\n\r\n            <Card title='RealTime' bordered={true}\r\n                style={{ width: '100%', borderRadius: 15, }} hoverable={true}>\r\n                <Table bordered columns={columnsC3} dataSource={[]} size=\"small\" scroll={{ y: 500 }} pagination={false} />\r\n            </Card>\r\n\r\n            <RangePicker showTime onOk={test}/>\r\n\r\n            <Card title='RealTime' bordered={true}\r\n                style={{ width: '100%', borderRadius: 15, }} hoverable={true}>\r\n                <Table bordered columns={columnsG2} dataSource={[]} size=\"small\" scroll={{ y: 500 }} pagination={false} />\r\n            </Card>\r\n\r\n            \r\n            \r\n       \r\n  \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Line1DataLog\r\n"]},"metadata":{},"sourceType":"module"}