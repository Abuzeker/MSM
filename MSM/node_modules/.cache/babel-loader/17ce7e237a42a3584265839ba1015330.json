{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1ReportG2.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { DeleteJob, logdata_request, logdata_Write, ReadJob, WriteJob } from '../../api';\nimport { DataSortTime, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob, TableColumbLabelAsRowG2, GetDateTime, TableColumbJobtest, FilterByName, FilterOutExcessTime, TimeInterval, DataSortTimeMcG } from '../../DataRequest/LogDataRequestWrap';\nimport { G2Model, JobModel, McGuire } from '../../DataRequest/DataModel';\nimport NameTableWrapper from '../Report/NameTableWrapper';\nimport ReportWrapper from '../Report/ReportWrapper';\nimport { Button, message } from 'antd';\nimport ReportListWrapper from '../Report/ReportListWrapper';\nimport moment from 'moment';\nimport BagModal from '../Report/BagModal';\nimport EditReportForm from '../Report/EditReportForm';\nimport ReportGraph from '../Report/ReportGraph';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": [],\n  \"TimingData\": []\n};\nlet ReportList = {\n  \"C3ReportList\": [],\n  \"G2ReportList\": []\n};\nlet JobDetailRecord = {\n  datetimeStart: '',\n  datetimeEnd: '',\n  site: '',\n  line: '',\n  BufferName: ''\n};\nlet ReportAnalysis = {\n  TotalPeriod: '',\n  RunPeriod: '',\n  ExpectedRate: '',\n  ActualRate: '',\n  ExpectedProduct: '',\n  ActualProduct: '',\n  EffectiveTime: '',\n  RateEfficiency: '',\n  Effciency: ''\n};\nlet Cell = [\"A10\", \"E10\", \"I10\", \"M10\", \"Q10\"];\nlet EditJobData = {};\nlet TotalJobDuration;\nlet ReportInfoG2 = {};\nlet BlankPage = 1,\n    ClickTime;\n\nconst Line1ReportG2 = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [Edit, setEdit] = useState(false);\n  useEffect(() => {\n    let period = GetDateTime(14, 14);\n    RequestJob([], period[0], period[1], 'PolymerLink', 'G2', 'G2ReportList');\n    return () => {};\n  }, []);\n\n  const EditJobSheet = RowData => {\n    setEdit(true);\n    EditJobData = RowData;\n    console.log(EditJobData);\n  };\n\n  const CloseEditJobSheet = () => {\n    setEdit(false); // console.log(RowData);\n  };\n\n  const JobDeleteHandler = async (jobnumber, line, page) => {\n    const response = await DeleteJob(jobnumber['Job No'], line, page);\n\n    if (response.success === true) {\n      message.success(`Job ${jobnumber['Job No']} Deleted`);\n      RequestJob([], JobDetailRecord.datetimeStart, JobDetailRecord.datetimeEnd, JobDetailRecord.site, JobDetailRecord.line, JobDetailRecord.BufferName);\n    } else {\n      message.error(`Unable to Delete Job ${jobnumber['Job No']}`);\n    }\n  };\n\n  const DataRequestG2 = row => {\n    let TimeRange = [];\n    TimeRange[0] = moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    TimeRange[1] = moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    ReportInfoG2.Info1 = row['Job No'];\n    ReportInfoG2.Info2 = row['Start Time'];\n    ReportInfoG2.Info3 = row['End Time'];\n    ReportInfoG2.Info4 = row['Color'];\n    ReportInfoG2.Info5 = row['Grade'];\n    ReportInfoG2.Info6 = row['Actual Product'];\n    ReportInfoG2.Info7 = row['Estimated Rate'];\n    UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model);\n  }; // const ColumbJobG2 = TableColumbJob(JobModel, DataRequestG2, JobDeleteHandler, 'G2', BlankPage, 'View', 'Delete')\n\n\n  const ColumbJobG2 = TableColumbJobtest(JobModel, DataRequestG2, JobDeleteHandler, EditJobSheet, 'G2', BlankPage, 'View', 'Delete', 'Edit');\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    let data = DataSortTime(response);\n    let Runtime,\n        RuntimeCounter = 0;\n    LogValue[BufferName] = LogDataMappingName(Model, data);\n    let FeederState = FilterByName('Mill 1 Feeder', LogValue[BufferName]);\n    LogValue['TimingData'] = FeederState;\n    FeederState.forEach(element => {\n      if (element.State === 1) {\n        RuntimeCounter++;\n      }\n    });\n    let SecondRuntime = RuntimeCounter * 600;\n    let DayRuntime = parseInt(SecondRuntime / 86400);\n    let HourRuntime = parseInt(SecondRuntime / 3600) - DayRuntime * 24;\n    let MinutesRuntime = parseInt(SecondRuntime / 60) - DayRuntime * 1440 - HourRuntime * 60;\n    LogValue[BufferName] = FilterOutExcessTime(LogValue[BufferName]);\n    let duration = TimeInterval(ReportInfoG2.Info2, ReportInfoG2.Info3);\n    TotalJobDuration = duration;\n    let TotalPeriodSecond = TotalJobDuration.Day * 86400 + TotalJobDuration.Hours * 3600 + TotalJobDuration.Minutes * 60;\n    ReportAnalysis.TotalPeriod = `${TotalJobDuration.Day} Days ${TotalJobDuration.Hours} Hours  ${TotalJobDuration.Minutes} Minutes`;\n    ReportAnalysis.RunPeriod = `${DayRuntime} Days ${HourRuntime} Hours  ${MinutesRuntime} Minutes`;\n    ReportAnalysis.ActualProduct = ReportInfoG2.Info6;\n    ReportAnalysis.ExpectedRate = ReportInfoG2.Info7;\n    ReportAnalysis.ActualRate = (ReportAnalysis.ActualProduct / (TotalJobDuration.Day * 24 + TotalJobDuration.Hours + TotalJobDuration.Minutes / 60)).toFixed(2);\n    ReportAnalysis.ExpectedProduct = ReportAnalysis.ExpectedRate * (TotalJobDuration.Day * 24 + TotalJobDuration.Hours + TotalJobDuration.Minutes / 60);\n    ReportAnalysis.EffectiveTime = (SecondRuntime / TotalPeriodSecond * 100).toFixed(2);\n    ReportAnalysis.RateEfficiency = (ReportAnalysis.ActualRate / ReportAnalysis.ExpectedRate * 100).toFixed(2);\n    ReportAnalysis.Effciency = (ReportAnalysis.ActualProduct / ReportAnalysis.ExpectedProduct * 100).toFixed(2);\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  const AvgAppend = data => {\n    let ComAvg;\n    const type = ['FINAL_DISP_TOTAL'];\n    let ComTotal = 0,\n        totalnumber,\n        i = 0;\n    let buf = Object.keys(data);\n    console.log(data);\n    type.forEach(element => {\n      data.forEach(element2 => {\n        console.log(element2[element]);\n\n        if (element2[element] !== undefined) {\n          let NumberBuf = parseFloat(element2[element]);\n          ComTotal = NumberBuf + ComTotal;\n        }\n      });\n      ComAvg = parseFloat(ComTotal).toFixed(2);\n      ComTotal = 0;\n      i++;\n    });\n    console.log(ComAvg);\n    return ComAvg;\n  };\n\n  const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\n    const response2 = await logdata_request(['FINAL_DISP_TOTAL'], datetimeStart, datetimeEnd, 'PolymerLink', 'Maguire C3', '1');\n    let data = LogDataMappingName(McGuire, DataSortTimeMcG(response2));\n    let AvgTotal = AvgAppend(data);\n    info.info5 = AvgTotal;\n    console.log(AvgTotal);\n    const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line);\n\n    if (response.success === true) {\n      message.success('Create Success !');\n      let period = GetDateTime(14, 14);\n      RequestJob([], period[0], period[1], 'PolymerLink', 'G2', 'G2ReportList');\n    }\n  };\n\n  const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\n    JobDetailRecord.datetimeStart = datetimeStart;\n    JobDetailRecord.datetimeEnd = datetimeEnd;\n    JobDetailRecord.site = site;\n    JobDetailRecord.line = line;\n    JobDetailRecord.BufferName = BufferName;\n    const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line);\n    let data = ReportSort(response);\n    ReportList[BufferName] = data; //console.log(data);\n\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  const InputBag = async value => {\n    let DateTime,\n        parameter = {},\n        Value = []; // console.log(record['Time']);\n\n    DateTime = ClickTime;\n    parameter['DateTime'] = DateTime;\n    parameter['Bag'] = value;\n    Value.push(parameter);\n    console.log(parameter);\n    const response = await logdata_Write(Value, 'G2', BlankPage);\n\n    if (response.success === true) {\n      console.log('ok');\n      message.success(`Bag Number Added`);\n      let TimeRange = [];\n      TimeRange[0] = moment(ReportInfoG2.Info2, \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n      TimeRange[1] = moment(ReportInfoG2.Info3, \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n      UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model); // UpdateTableData([], JobDetailRecord.datetimeStart, JobDetailRecord.datetimeEnd, 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model)\n    } else {\n      message.error(`Fail to add`);\n    }\n\n    console.log(response);\n  };\n\n  const showModal = record => {\n    ClickTime = moment(record['Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    setIsModalVisible(true);\n  };\n\n  const handleOk = record => {\n    //console.log(record['Bag']);\n    InputBag(record['Bag']);\n    setIsModalVisible(false);\n    console.log(record);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const ColumbG2 = TableColumbLabelAsRowG2(G2Model, showModal);\n  console.log(ColumbG2);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BagModal, {\n      visible: isModalVisible,\n      onok: handleOk,\n      onCancle: handleCancel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportWrapper, {\n      CreateJobCallBack: CreateJob,\n      site: 'Polymerlink',\n      line: 'G2'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportListWrapper, {\n      ReportListCallBack: RequestJob,\n      site: 'Polymerlink',\n      line: 'G2',\n      ReportList: ReportList['G2ReportList'],\n      Columb: ColumbJobG2,\n      BufferName: \"G2ReportList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NameTableWrapper, {\n      SetTimeRangeCallBack: UpdateTableData,\n      LogValue: LogValue['LogG2'],\n      Columb: ColumbG2,\n      site: 'G2',\n      page: BlankPage,\n      BufferName: \"LogG2\",\n      Model: G2Model,\n      JobInfo: ReportInfoG2,\n      FileName: 'MILL.xlsx',\n      startingColumb: 'A',\n      startingRow: 14,\n      EndingColumb: 'O',\n      EndingRow: 14,\n      Cell: Cell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportGraph, {\n      ReportAnalysis: ReportAnalysis,\n      RunningStep: LogValue['TimingData']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EditReportForm, {\n      Visibility: Edit,\n      callbackClose: CloseEditJobSheet,\n      InfoData: EditJobData,\n      CreateJobCallBack: CreateJob,\n      site: 'Polymerlink',\n      line: 'G2'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1ReportG2, \"V1xaw72XKDoTAgD86AGi5JG5bog=\");\n\n_c = Line1ReportG2;\nexport default Line1ReportG2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Line1ReportG2\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1ReportG2.jsx"],"names":["React","useState","useEffect","DeleteJob","logdata_request","logdata_Write","ReadJob","WriteJob","DataSortTime","TableColumbLabelAsRow","LogDataMappingName","ReportSort","TableColumbJob","TableColumbLabelAsRowG2","GetDateTime","TableColumbJobtest","FilterByName","FilterOutExcessTime","TimeInterval","DataSortTimeMcG","G2Model","JobModel","McGuire","NameTableWrapper","ReportWrapper","Button","message","ReportListWrapper","moment","BagModal","EditReportForm","ReportGraph","LogValue","ReportList","JobDetailRecord","datetimeStart","datetimeEnd","site","line","BufferName","ReportAnalysis","TotalPeriod","RunPeriod","ExpectedRate","ActualRate","ExpectedProduct","ActualProduct","EffectiveTime","RateEfficiency","Effciency","Cell","EditJobData","TotalJobDuration","ReportInfoG2","BlankPage","ClickTime","Line1ReportG2","state","setState","count","isModalVisible","setIsModalVisible","Edit","setEdit","period","RequestJob","EditJobSheet","RowData","console","log","CloseEditJobSheet","JobDeleteHandler","jobnumber","page","response","success","error","DataRequestG2","row","TimeRange","toISOString","split","Info1","Info2","Info3","Info4","Info5","Info6","Info7","UpdateTableData","ColumbJobG2","Parameter","StartTime","EndTime","Site","Line","Page","Model","data","Runtime","RuntimeCounter","FeederState","forEach","element","State","SecondRuntime","DayRuntime","parseInt","HourRuntime","MinutesRuntime","duration","TotalPeriodSecond","Day","Hours","Minutes","toFixed","AvgAppend","ComAvg","type","ComTotal","totalnumber","i","buf","Object","keys","element2","undefined","NumberBuf","parseFloat","CreateJob","info","response2","AvgTotal","info5","InputBag","value","DateTime","parameter","Value","push","showModal","record","handleOk","handleCancel","ColumbG2"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { DeleteJob, logdata_request, logdata_Write, ReadJob, WriteJob } from '../../api';\r\nimport { DataSortTime, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob, TableColumbLabelAsRowG2, GetDateTime, TableColumbJobtest, FilterByName, FilterOutExcessTime, TimeInterval, DataSortTimeMcG } from '../../DataRequest/LogDataRequestWrap';\r\nimport { G2Model, JobModel, McGuire } from '../../DataRequest/DataModel';\r\nimport NameTableWrapper from '../Report/NameTableWrapper';\r\nimport ReportWrapper from '../Report/ReportWrapper';\r\nimport { Button, message } from 'antd';\r\nimport ReportListWrapper from '../Report/ReportListWrapper';\r\nimport moment from 'moment';\r\nimport BagModal from '../Report/BagModal';\r\nimport EditReportForm from '../Report/EditReportForm';\r\nimport ReportGraph from '../Report/ReportGraph';\r\n\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n    \"TimingData\": [],\r\n}\r\n\r\nlet ReportList = {\r\n    \"C3ReportList\": [],\r\n    \"G2ReportList\": []\r\n}\r\n\r\nlet JobDetailRecord = {\r\n    datetimeStart: '',\r\n    datetimeEnd: '',\r\n    site: '',\r\n    line: '',\r\n    BufferName: ''\r\n}\r\n\r\nlet ReportAnalysis = {\r\n    TotalPeriod: '',\r\n    RunPeriod: '',\r\n    ExpectedRate: '',\r\n    ActualRate: '',\r\n    ExpectedProduct: '',\r\n    ActualProduct: '',\r\n    EffectiveTime: '',\r\n    RateEfficiency: '',\r\n    Effciency: ''\r\n}\r\n\r\nlet Cell = [\"A10\", \"E10\", \"I10\", \"M10\", \"Q10\"]\r\n\r\nlet EditJobData = {}\r\nlet TotalJobDuration\r\nlet ReportInfoG2 = {}\r\n\r\nlet BlankPage = 1, ClickTime\r\n\r\n\r\nconst Line1ReportG2 = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [Edit, setEdit] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let period = GetDateTime(14, 14)\r\n        RequestJob([], period[0], period[1], 'PolymerLink', 'G2', 'G2ReportList')\r\n        return () => {\r\n        }\r\n    }, [])\r\n\r\n    const EditJobSheet = (RowData) => {\r\n        setEdit(true);\r\n        EditJobData = RowData\r\n        console.log(EditJobData);\r\n    }\r\n\r\n    const CloseEditJobSheet = () => {\r\n        setEdit(false);\r\n        // console.log(RowData);\r\n    }\r\n\r\n\r\n    const JobDeleteHandler = async (jobnumber, line, page) => {\r\n        const response = await DeleteJob(jobnumber['Job No'], line, page)\r\n\r\n        if (response.success === true) {\r\n            message.success(`Job ${jobnumber['Job No']} Deleted`)\r\n            RequestJob([], JobDetailRecord.datetimeStart, JobDetailRecord.datetimeEnd,\r\n                JobDetailRecord.site, JobDetailRecord.line, JobDetailRecord.BufferName)\r\n        }\r\n\r\n        else {\r\n            message.error(`Unable to Delete Job ${jobnumber['Job No']}`)\r\n        }\r\n\r\n    }\r\n\r\n    const DataRequestG2 = (row) => {\r\n\r\n        let TimeRange = []\r\n\r\n        TimeRange[0] = (moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\")\r\n        TimeRange[1] = (moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\")).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n        ReportInfoG2.Info1 = row['Job No']\r\n        ReportInfoG2.Info2 = row['Start Time']\r\n        ReportInfoG2.Info3 = row['End Time']\r\n        ReportInfoG2.Info4 = row['Color']\r\n        ReportInfoG2.Info5 = row['Grade']\r\n        ReportInfoG2.Info6 = row['Actual Product']\r\n        ReportInfoG2.Info7 = row['Estimated Rate']\r\n\r\n        UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model)\r\n    }\r\n    // const ColumbJobG2 = TableColumbJob(JobModel, DataRequestG2, JobDeleteHandler, 'G2', BlankPage, 'View', 'Delete')\r\n    const ColumbJobG2 = TableColumbJobtest(JobModel, DataRequestG2, JobDeleteHandler, EditJobSheet, 'G2', BlankPage, 'View', 'Delete', 'Edit')\r\n\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        let data = DataSortTime(response)\r\n        let Runtime, RuntimeCounter = 0\r\n\r\n        LogValue[BufferName] = LogDataMappingName(Model, data)\r\n        let FeederState = FilterByName('Mill 1 Feeder', LogValue[BufferName])\r\n\r\n        LogValue['TimingData'] = FeederState\r\n\r\n        FeederState.forEach(element => {\r\n            if (element.State === 1) {\r\n                RuntimeCounter++\r\n            }\r\n        });\r\n\r\n        let SecondRuntime = RuntimeCounter * 600\r\n        let DayRuntime = parseInt(SecondRuntime / 86400)\r\n        let HourRuntime = (parseInt(SecondRuntime / 3600) - DayRuntime * 24)\r\n        let MinutesRuntime = (parseInt(SecondRuntime / 60) - DayRuntime * 1440 - HourRuntime * 60)\r\n\r\n        LogValue[BufferName] = FilterOutExcessTime(LogValue[BufferName])\r\n        let duration = TimeInterval(ReportInfoG2.Info2, ReportInfoG2.Info3)\r\n        TotalJobDuration = duration\r\n        let TotalPeriodSecond = TotalJobDuration.Day * 86400 + TotalJobDuration.Hours * 3600 + TotalJobDuration.Minutes * 60\r\n\r\n        ReportAnalysis.TotalPeriod = `${TotalJobDuration.Day} Days ${TotalJobDuration.Hours} Hours  ${TotalJobDuration.Minutes} Minutes`\r\n        ReportAnalysis.RunPeriod = `${DayRuntime} Days ${HourRuntime} Hours  ${MinutesRuntime} Minutes`\r\n        ReportAnalysis.ActualProduct = ReportInfoG2.Info6\r\n        ReportAnalysis.ExpectedRate = ReportInfoG2.Info7\r\n        ReportAnalysis.ActualRate = (ReportAnalysis.ActualProduct / (TotalJobDuration.Day * 24 + TotalJobDuration.Hours + TotalJobDuration.Minutes / 60)).toFixed(2)\r\n        ReportAnalysis.ExpectedProduct = ReportAnalysis.ExpectedRate * (TotalJobDuration.Day * 24 + TotalJobDuration.Hours + TotalJobDuration.Minutes / 60)\r\n\r\n        ReportAnalysis.EffectiveTime = ((SecondRuntime / TotalPeriodSecond) * 100).toFixed(2)\r\n        ReportAnalysis.RateEfficiency = ((ReportAnalysis.ActualRate / ReportAnalysis.ExpectedRate) * 100).toFixed(2)\r\n        ReportAnalysis.Effciency = ((ReportAnalysis.ActualProduct / ReportAnalysis.ExpectedProduct) * 100).toFixed(2)\r\n\r\n\r\n\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const AvgAppend = (data) => {\r\n        let ComAvg\r\n        const type = ['FINAL_DISP_TOTAL']\r\n        let ComTotal = 0, totalnumber, i = 0\r\n        let buf = Object.keys(data)\r\n        console.log(data);\r\n        type.forEach(element => {\r\n            data.forEach(element2 => {\r\n                console.log(element2[element]);\r\n\r\n                if (element2[element] !== undefined) {\r\n                    let NumberBuf = parseFloat(element2[element])\r\n                    ComTotal = NumberBuf + ComTotal\r\n                }\r\n\r\n            });\r\n            ComAvg = parseFloat(ComTotal).toFixed(2)\r\n            ComTotal = 0\r\n            i++\r\n        });\r\n        console.log(ComAvg);\r\n        return ComAvg\r\n    }\r\n\r\n    const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\r\n\r\n        const response2 = await logdata_request(['FINAL_DISP_TOTAL'], datetimeStart, datetimeEnd, 'PolymerLink', 'Maguire C3', '1')\r\n        let data = LogDataMappingName(McGuire, DataSortTimeMcG(response2))\r\n        let AvgTotal = AvgAppend(data)\r\n        info.info5 = AvgTotal\r\n\r\n        console.log(AvgTotal);\r\n        \r\n        const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line)\r\n        if (response.success === true) {\r\n            message.success('Create Success !')\r\n            let period = GetDateTime(14, 14)\r\n            RequestJob([], period[0], period[1], 'PolymerLink', 'G2', 'G2ReportList')\r\n        }\r\n    }\r\n\r\n    const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\r\n        JobDetailRecord.datetimeStart = datetimeStart\r\n        JobDetailRecord.datetimeEnd = datetimeEnd\r\n        JobDetailRecord.site = site\r\n        JobDetailRecord.line = line\r\n        JobDetailRecord.BufferName = BufferName\r\n\r\n        const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line)\r\n        let data = ReportSort(response)\r\n        ReportList[BufferName] = data\r\n        //console.log(data);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const InputBag = async (value) => {\r\n        let DateTime, parameter = {}, Value = []\r\n\r\n        // console.log(record['Time']);\r\n\r\n        DateTime = ClickTime\r\n        parameter['DateTime'] = DateTime\r\n        parameter['Bag'] = value\r\n\r\n        Value.push(parameter)\r\n\r\n        console.log(parameter);\r\n\r\n        const response = await logdata_Write(Value, 'G2', BlankPage)\r\n\r\n        if (response.success === true) {\r\n            console.log('ok');\r\n            message.success(`Bag Number Added`)\r\n            let TimeRange = []\r\n\r\n            TimeRange[0] = (moment(ReportInfoG2.Info2, \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\")\r\n            TimeRange[1] = (moment(ReportInfoG2.Info3, \"DD-MM-YYYY HH:mm:ss\")).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n            UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model)\r\n            // UpdateTableData([], JobDetailRecord.datetimeStart, JobDetailRecord.datetimeEnd, 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model)\r\n        }\r\n\r\n        else {\r\n            message.error(`Fail to add`)\r\n        }\r\n\r\n\r\n        console.log(response);\r\n    }\r\n\r\n    const showModal = (record) => {\r\n        ClickTime = moment(record['Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\"\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = (record) => {\r\n        //console.log(record['Bag']);\r\n        InputBag(record['Bag'])\r\n        setIsModalVisible(false)\r\n        console.log(record);\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const ColumbG2 = TableColumbLabelAsRowG2(G2Model, showModal)\r\n    console.log(ColumbG2);\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* G2 part here */}\r\n            <BagModal\r\n                visible={isModalVisible}\r\n                onok={handleOk} onCancle={handleCancel}\r\n            />\r\n\r\n            <ReportWrapper CreateJobCallBack={CreateJob}\r\n                site={'Polymerlink'} line={'G2'}\r\n            />\r\n\r\n            <ReportListWrapper ReportListCallBack={RequestJob}\r\n                site={'Polymerlink'} line={'G2'}\r\n                ReportList={ReportList['G2ReportList']}\r\n                Columb={ColumbJobG2}\r\n                BufferName={\"G2ReportList\"}\r\n            />\r\n\r\n            <NameTableWrapper SetTimeRangeCallBack={UpdateTableData}\r\n                LogValue={LogValue['LogG2']} Columb={ColumbG2}\r\n                site={'G2'} page={BlankPage} BufferName={\"LogG2\"} Model={G2Model}\r\n                JobInfo={ReportInfoG2} FileName={'MILL.xlsx'} startingColumb={'A'} startingRow={14}\r\n                EndingColumb={'O'} EndingRow={14} Cell={Cell}\r\n            />\r\n\r\n            <ReportGraph ReportAnalysis={ReportAnalysis} RunningStep={LogValue['TimingData']} />\r\n\r\n            <EditReportForm Visibility={Edit} callbackClose={CloseEditJobSheet}\r\n                InfoData={EditJobData} CreateJobCallBack={CreateJob}\r\n                site={'Polymerlink'} line={'G2'} />\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Line1ReportG2\r\n"]},"metadata":{},"sourceType":"module"}