{"ast":null,"code":"import moment from 'moment';\nexport const DataSortRT = response => {\n  if (response.success !== false) {\n    const data = response.Data;\n    let DataReturn = data.map(obj => {\n      let cobj = [];\n      let ar0 = moment(obj.fields.LastChange).utc(true).format('MM/DD/YY HH:mm:ss');\n      cobj = {\n        'time': ar0,\n        'Label': obj.fields.DisplayLabel,\n        'Value': obj.fields.Value,\n        'SV': obj.fields.SetValue,\n        'Line': obj.fields.Line,\n        'key': obj.fields.Label,\n        'Page': obj.fields.Page,\n        'label': obj.fields.Label,\n        'LowThreshold': obj.fields.LowThreshold,\n        'LowThreshold_active': obj.fields.LowThreshold,\n        'HighThreshold': obj.fields.HighThreshold,\n        'HighThreshold_active': obj.fields.HighThreshold_active\n      };\n      return cobj;\n    }); // console.log(data);\n\n    return DataReturn;\n  } else {\n    console.log('Data Request Error');\n  }\n};\n_c = DataSortRT;\nexport const DataSortST = response => {\n  if (response.success !== false) {\n    const data = response.Data;\n    let DataReturn = data.map(obj => {\n      let cobj = [];\n      let ar0 = moment(obj.fields.LastChange).utc(true).format('MM/DD/YY HH:mm:ss');\n      cobj = {\n        'time': ar0,\n        'Parameter': obj.fields.DisplayLabel,\n        'Line': obj.fields.Line,\n        'key': obj.fields.Label,\n        'label': obj.fields.Label,\n        'LowThreshold': obj.fields.LowThreshold,\n        'LowThreshold_active': obj.fields.LowThreshold,\n        'HighThreshold': obj.fields.HighThreshold,\n        'HighThreshold_active': obj.fields.HighThreshold_active\n      };\n      return cobj;\n    }); // console.log(data);\n\n    return DataReturn;\n  } else {\n    console.log('Data Request Error');\n  }\n};\n_c2 = DataSortST;\nexport const DataMapping = (Datamodel, RawData) => {\n  const name = Object.keys(Datamodel);\n  let ReturnValue = Datamodel;\n  Datamodel.forEach(element => {\n    try {\n      let DataFound = RawData.find(({\n        Label\n      }) => Label === element.Name);\n      ReturnValue[element].PV = DataFound.Value;\n      ReturnValue[element].SV = DataFound.SV;\n    } catch {\n      console.log('None');\n    } // ReturnValue['Time'].PV = DataFound.time\n\n  });\n  return ReturnValue;\n};\n_c3 = DataMapping;\nexport const GraphDataFind = (SelectedLabel, RawData) => {\n  let FoundDataArray = [];\n  SelectedLabel.forEach(element => {\n    try {\n      let obj = {};\n      let FoundData = RawData.find(({\n        Label\n      }) => Label === element);\n      obj['Label'] = FoundData.Label;\n      obj['time'] = FoundData.time;\n      obj['Value'] = parseFloat(FoundData.Value);\n      var CurrentTime = new Date();\n      var LabelTime = new Date(obj['time']);\n      var NewLabelTime = LabelTime.getTime() + 30000;\n\n      if (CurrentTime.getTime() < NewLabelTime) {\n        //console.log('NewData');\n        FoundDataArray.push(obj);\n      } else {//console.log('OldData');\n      }\n    } catch {\n      console.log('Data Not Found');\n    }\n  }); //console.log(FoundDataArray);\n\n  return FoundDataArray;\n};\n_c4 = GraphDataFind;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"DataSortRT\");\n$RefreshReg$(_c2, \"DataSortST\");\n$RefreshReg$(_c3, \"DataMapping\");\n$RefreshReg$(_c4, \"GraphDataFind\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/DataRequest/RealTimeRequestWrap.js"],"names":["moment","DataSortRT","response","success","data","Data","DataReturn","map","obj","cobj","ar0","fields","LastChange","utc","format","DisplayLabel","Value","SetValue","Line","Label","Page","LowThreshold","HighThreshold","HighThreshold_active","console","log","DataSortST","DataMapping","Datamodel","RawData","name","Object","keys","ReturnValue","forEach","element","DataFound","find","Name","PV","SV","GraphDataFind","SelectedLabel","FoundDataArray","FoundData","time","parseFloat","CurrentTime","Date","LabelTime","NewLabelTime","getTime","push"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\n\r\n\r\nexport const DataSortRT = (response) => {\r\n\r\n    if (response.success !== false) {\r\n        const data = response.Data\r\n\r\n        let DataReturn = data.map(obj => {\r\n            let cobj = []\r\n            let ar0 = moment(obj.fields.LastChange).utc(true).format('MM/DD/YY HH:mm:ss')\r\n\r\n            cobj = {\r\n                'time': ar0,\r\n                'Label': obj.fields.DisplayLabel,\r\n                'Value': obj.fields.Value,\r\n                'SV': obj.fields.SetValue,\r\n                'Line': obj.fields.Line,\r\n                'key': obj.fields.Label,\r\n                'Page': obj.fields.Page,\r\n                'label': obj.fields.Label,\r\n                'LowThreshold' : obj.fields.LowThreshold,\r\n                'LowThreshold_active' : obj.fields.LowThreshold,\r\n                'HighThreshold' : obj.fields.HighThreshold,\r\n                'HighThreshold_active' : obj.fields.HighThreshold_active,\r\n\r\n            }\r\n            return cobj\r\n        })\r\n        // console.log(data);\r\n        return DataReturn\r\n    }\r\n    else {\r\n        console.log('Data Request Error');\r\n    }\r\n}\r\n\r\nexport const DataSortST = (response) => {\r\n\r\n    if (response.success !== false) {\r\n        const data = response.Data\r\n\r\n        let DataReturn = data.map(obj => {\r\n            let cobj = []\r\n            let ar0 = moment(obj.fields.LastChange).utc(true).format('MM/DD/YY HH:mm:ss')\r\n\r\n            cobj = {\r\n                'time': ar0,\r\n                'Parameter': obj.fields.DisplayLabel,\r\n                'Line': obj.fields.Line,\r\n                'key': obj.fields.Label,\r\n                'label': obj.fields.Label,\r\n                'LowThreshold' : obj.fields.LowThreshold,\r\n                'LowThreshold_active' : obj.fields.LowThreshold,\r\n                'HighThreshold' : obj.fields.HighThreshold,\r\n                'HighThreshold_active' : obj.fields.HighThreshold_active,\r\n\r\n            }\r\n            return cobj\r\n        })\r\n        // console.log(data);\r\n        return DataReturn\r\n    }\r\n    else {\r\n        console.log('Data Request Error');\r\n    }\r\n}\r\n\r\n\r\nexport const DataMapping = (Datamodel, RawData) => {\r\n\r\n    const name = Object.keys(Datamodel)\r\n    let ReturnValue = Datamodel\r\n    Datamodel.forEach(element => {\r\n        try {\r\n            let DataFound = RawData.find(({ Label }) => Label === element.Name)\r\n            ReturnValue[element].PV = DataFound.Value\r\n            ReturnValue[element].SV = DataFound.SV\r\n        }\r\n        catch {\r\n            console.log('None');\r\n        }\r\n\r\n        // ReturnValue['Time'].PV = DataFound.time\r\n\r\n    });\r\n\r\n    return ReturnValue\r\n}\r\n\r\nexport const GraphDataFind = (SelectedLabel, RawData) => {\r\n\r\n    let FoundDataArray = []\r\n\r\n    SelectedLabel.forEach(element => {\r\n        try{\r\n            let obj = {}\r\n            let FoundData = RawData.find(({ Label }) => Label === element)\r\n            obj['Label'] = FoundData.Label\r\n            obj['time'] = FoundData.time\r\n            obj['Value'] = parseFloat(FoundData.Value)\r\n\r\n            var CurrentTime = new Date()\r\n            var LabelTime = new Date(obj['time'])\r\n            var NewLabelTime = LabelTime.getTime() + 30000\r\n\r\n            if( CurrentTime.getTime() < NewLabelTime ){\r\n                //console.log('NewData');\r\n                FoundDataArray.push(obj)\r\n            }\r\n            else{\r\n                //console.log('OldData');\r\n            }\r\n\r\n        }\r\n\r\n        catch{\r\n            console.log(('Data Not Found'));\r\n        }\r\n    })\r\n\r\n    //console.log(FoundDataArray);\r\n    \r\n    return FoundDataArray\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}