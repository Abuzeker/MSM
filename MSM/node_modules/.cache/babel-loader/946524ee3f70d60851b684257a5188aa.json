{"ast":null,"code":"import moment from 'moment';\nimport { C3Model } from './DataModel'; // export const DateTimeNow = \n\nexport const GetDateTime = OffsetDay => {\n  let DateTimeArray = [];\n  let separator = '-';\n  let today = new Date();\n  let tomorrow = new Date(today);\n  tomorrow.setDate(tomorrow.getDate() + OffsetDay);\n  let date1 = today.getDate();\n  let month1 = today.getMonth() + 1;\n  let year1 = today.getFullYear();\n  let date2 = tomorrow.getDate();\n  let month2 = tomorrow.getMonth() + 1;\n  let year2 = tomorrow.getFullYear();\n  let Start_time = `${year1}${separator}${month1 < 10 ? `0${month1}` : `${month1}`}${separator}${date1} 00:00:00`;\n  let End_time = `${year2}${separator}${month2 < 10 ? `0${month2}` : `${month2}`}${separator}${date2} 00:00:00`;\n  DateTimeArray[0] = moment(Start_time).toISOString(false).split('.')[0] + \"Z\";\n  DateTimeArray[1] = moment(End_time).toISOString(false).split('.')[0] + \"Z\";\n  return DateTimeArray;\n};\n_c = GetDateTime;\nexport const DataSortTime = response => {\n  let DataReturn;\n\n  if (response.success === true) {\n    const data = response.data;\n    DataReturn = data.map(obj => {\n      let cobj = [];\n      let date_new = moment(obj.fields.DateCreated);\n      let dateComponent = date_new.utc(true).format('HH:mm:ss');\n      let ar0 = dateComponent.split(':');\n      let ar1 = ar0[0] + ':' + ar0[1];\n      cobj = {\n        'key': obj.fields.Parameter,\n        'time': ar1,\n        'Parameter': obj.fields.Parameter,\n        'Value': obj.fields.Value\n      };\n      return cobj;\n    });\n  } else {\n    console.log(response);\n  }\n\n  return DataReturn;\n};\n_c2 = DataSortTime;\nexport const LogDataMappingTime = (Datamodel, RawData) => {\n  const name = Object.keys(Datamodel);\n  let ReturnValue = Datamodel;\n  name.forEach(element => {\n    let Buffer = {};\n    Buffer.Parameter = element;\n    RawData.forEach(element2 => {\n      if (element2.Parameter === element) {\n        Buffer[element2.time] = element2.Value;\n        Buffer['key'] = element2.Parameter;\n      }\n    });\n    ReturnValue.push(Buffer);\n  });\n  return ReturnValue;\n};\n_c3 = LogDataMappingTime;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GetDateTime\");\n$RefreshReg$(_c2, \"DataSortTime\");\n$RefreshReg$(_c3, \"LogDataMappingTime\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/DataRequest/LogDataRequestWrap.js"],"names":["moment","C3Model","GetDateTime","OffsetDay","DateTimeArray","separator","today","Date","tomorrow","setDate","getDate","date1","month1","getMonth","year1","getFullYear","date2","month2","year2","Start_time","End_time","toISOString","split","DataSortTime","response","DataReturn","success","data","map","obj","cobj","date_new","fields","DateCreated","dateComponent","utc","format","ar0","ar1","Parameter","Value","console","log","LogDataMappingTime","Datamodel","RawData","name","Object","keys","ReturnValue","forEach","element","Buffer","element2","time","push"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAIA;;AAEA,OAAO,MAAMC,WAAW,GAAIC,SAAD,IAAe;AAEtC,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,SAAS,GAAG,GAAhB;AAEA,MAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAIC,QAAQ,GAAG,IAAID,IAAJ,CAASD,KAAT,CAAf;AACAE,EAAAA,QAAQ,CAACC,OAAT,CAAiBD,QAAQ,CAACE,OAAT,KAAqBP,SAAtC;AAEA,MAAIQ,KAAK,GAAGL,KAAK,CAACI,OAAN,EAAZ;AACA,MAAIE,MAAM,GAAGN,KAAK,CAACO,QAAN,KAAmB,CAAhC;AACA,MAAIC,KAAK,GAAGR,KAAK,CAACS,WAAN,EAAZ;AAEA,MAAIC,KAAK,GAAGR,QAAQ,CAACE,OAAT,EAAZ;AACA,MAAIO,MAAM,GAAGT,QAAQ,CAACK,QAAT,KAAsB,CAAnC;AACA,MAAIK,KAAK,GAAGV,QAAQ,CAACO,WAAT,EAAZ;AAGA,MAAII,UAAU,GAAI,GAAEL,KAAM,GAAET,SAAU,GAAEO,MAAM,GAAG,EAAT,GAAe,IAAGA,MAAO,EAAzB,GAA8B,GAAEA,MAAO,EAAE,GAAEP,SAAU,GAAEM,KAAM,WAArG;AACA,MAAIS,QAAQ,GAAI,GAAEF,KAAM,GAAEb,SAAU,GAAEY,MAAM,GAAG,EAAT,GAAe,IAAGA,MAAO,EAAzB,GAA8B,GAAEA,MAAO,EAAE,GAAEZ,SAAU,GAAEW,KAAM,WAAnG;AAEAZ,EAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBJ,MAAM,CAACmB,UAAD,CAAN,CAAmBE,WAAnB,CAA+B,KAA/B,EAAsCC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,IAAsD,GAAzE;AACAlB,EAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBJ,MAAM,CAACoB,QAAD,CAAN,CAAiBC,WAAjB,CAA6B,KAA7B,EAAoCC,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,IAAoD,GAAvE;AAEA,SAAOlB,aAAP;AACH,CAzBM;KAAMF,W;AA2Bb,OAAO,MAAMqB,YAAY,GAAIC,QAAD,IAAc;AACtC,MAAIC,UAAJ;;AACA,MAAID,QAAQ,CAACE,OAAT,KAAqB,IAAzB,EAA+B;AAC3B,UAAMC,IAAI,GAAGH,QAAQ,CAACG,IAAtB;AAECF,IAAAA,UAAU,GAAGE,IAAI,CAACC,GAAL,CAASC,GAAG,IAAI;AAC1B,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIC,QAAQ,GAAG/B,MAAM,CAAC6B,GAAG,CAACG,MAAJ,CAAWC,WAAZ,CAArB;AACA,UAAIC,aAAa,GAAGH,QAAQ,CAACI,GAAT,CAAa,IAAb,EAAmBC,MAAnB,CAA0B,UAA1B,CAApB;AACA,UAAIC,GAAG,GAAGH,aAAa,CAACZ,KAAd,CAAoB,GAApB,CAAV;AACA,UAAIgB,GAAG,GAAGD,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT,GAAeA,GAAG,CAAC,CAAD,CAA5B;AAEAP,MAAAA,IAAI,GAAG;AACH,eAAOD,GAAG,CAACG,MAAJ,CAAWO,SADf;AAEH,gBAAQD,GAFL;AAGH,qBAAaT,GAAG,CAACG,MAAJ,CAAWO,SAHrB;AAIH,iBAASV,GAAG,CAACG,MAAJ,CAAWQ;AAJjB,OAAP;AAMA,aAAOV,IAAP;AACH,KAda,CAAb;AAeJ,GAlBD,MAmBK;AACDW,IAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAZ;AACH;;AACD,SAAOC,UAAP;AACH,CAzBM;MAAMF,Y;AA2Bb,OAAO,MAAMoB,kBAAkB,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AACtD,QAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAAb;AACA,MAAIK,WAAW,GAAGL,SAAlB;AAEAE,EAAAA,IAAI,CAACI,OAAL,CAAaC,OAAO,IAAI;AACpB,QAAIC,MAAM,GAAG,EAAb;AACAA,IAAAA,MAAM,CAACb,SAAP,GAAmBY,OAAnB;AAEAN,IAAAA,OAAO,CAACK,OAAR,CAAgBG,QAAQ,IAAI;AACxB,UAAIA,QAAQ,CAACd,SAAT,KAAuBY,OAA3B,EAAoC;AAChCC,QAAAA,MAAM,CAACC,QAAQ,CAACC,IAAV,CAAN,GAAwBD,QAAQ,CAACb,KAAjC;AACAY,QAAAA,MAAM,CAAC,KAAD,CAAN,GAAgBC,QAAQ,CAACd,SAAzB;AACH;AACJ,KALD;AAOAU,IAAAA,WAAW,CAACM,IAAZ,CAAiBH,MAAjB;AAEH,GAbD;AAcA,SAAOH,WAAP;AACH,CAnBM;MAAMN,kB","sourcesContent":["import moment from 'moment';\r\nimport { C3Model } from './DataModel';\r\n\r\n\r\n\r\n// export const DateTimeNow = \r\n\r\nexport const GetDateTime = (OffsetDay) => {\r\n\r\n    let DateTimeArray = []\r\n    let separator = '-'\r\n\r\n    let today = new Date()\r\n    let tomorrow = new Date(today)\r\n    tomorrow.setDate(tomorrow.getDate() + OffsetDay)\r\n\r\n    let date1 = today.getDate();\r\n    let month1 = today.getMonth() + 1;\r\n    let year1 = today.getFullYear();\r\n\r\n    let date2 = tomorrow.getDate();\r\n    let month2 = tomorrow.getMonth() + 1;\r\n    let year2 = tomorrow.getFullYear();\r\n\r\n\r\n    let Start_time = `${year1}${separator}${month1 < 10 ? `0${month1}` : `${month1}`}${separator}${date1} 00:00:00`\r\n    let End_time = `${year2}${separator}${month2 < 10 ? `0${month2}` : `${month2}`}${separator}${date2} 00:00:00`\r\n\r\n    DateTimeArray[0] = moment(Start_time).toISOString(false).split('.')[0] + \"Z\"\r\n    DateTimeArray[1] = moment(End_time).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n    return DateTimeArray\r\n}\r\n\r\nexport const DataSortTime = (response) => {\r\n    let DataReturn\r\n    if (response.success === true) {\r\n        const data = response.data\r\n\r\n         DataReturn = data.map(obj => {\r\n            let cobj = []\r\n            let date_new = moment(obj.fields.DateCreated);\r\n            let dateComponent = date_new.utc(true).format('HH:mm:ss')\r\n            let ar0 = dateComponent.split(':')\r\n            let ar1 = ar0[0] + ':' + ar0[1]\r\n\r\n            cobj = {\r\n                'key': obj.fields.Parameter,\r\n                'time': ar1,\r\n                'Parameter': obj.fields.Parameter,\r\n                'Value': obj.fields.Value,\r\n            }\r\n            return cobj\r\n        })\r\n    }\r\n    else {\r\n        console.log(response)\r\n    }\r\n    return DataReturn\r\n}\r\n\r\nexport const LogDataMappingTime = (Datamodel, RawData) => {\r\n    const name = Object.keys(Datamodel)\r\n    let ReturnValue = Datamodel\r\n\r\n    name.forEach(element => {\r\n        let Buffer = {}\r\n        Buffer.Parameter = element\r\n\r\n        RawData.forEach(element2 => {\r\n            if (element2.Parameter === element) {\r\n                Buffer[element2.time] = element2.Value\r\n                Buffer['key'] = element2.Parameter\r\n            }\r\n        })\r\n\r\n        ReturnValue.push(Buffer)\r\n\r\n    })\r\n    return ReturnValue\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}