{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1DataLog.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Divider, Row, DatePicker, Card, Table, Select } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { logdata_request, RealtimeData_Request } from '../../api';\nimport { C3Model, G2Model } from '../../DataRequest/DataModel';\nimport { ConvertMonentToDateTime, DataSortTime } from '../../DataRequest/LogDataRequestWrap';\nimport { DataSortRT } from '../../DataRequest/RealTimeRequestWrap';\nimport RealTimeGraphWrapper from '../Realtime/RealTimeGraphWrapper';\nimport RealTimeTableWrapper from '../Realtime/RealTimeTableWrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet C3DataModel = C3Model;\nlet G2DataModel = G2Model;\nlet BlankPage,\n    data_filter = [];\nlet C3DTRange = [],\n    G2DTRange = [];\nlet LogValue = {\n  \"C3Table\": [],\n  \"G2Table\": [],\n  \"C3Graph\": [],\n  \"G2Graph\": [],\n  \"C3Selected\": [],\n  \"G2Selected\": []\n};\nlet DateTimeRange;\nconst {\n  RangePicker\n} = DatePicker;\nconst {\n  Option\n} = Select;\nlet OptionC3 = Object.keys(C3Model);\n_c = OptionC3;\nlet OptionG2 = Object.keys(G2Model);\n_c2 = OptionG2;\nconst OptionSelectorC3 = [];\nconst OptionSelectorG2 = [];\nLogValue['C3Selected'] = [OptionC3[0], OptionC3[1]];\nLogValue['G2Selected'] = [OptionG2[0], OptionG2[1]];\nOptionC3.forEach(element => {\n  OptionSelectorC3.push( /*#__PURE__*/_jsxDEV(Option, {\n    children: element\n  }, element, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 27\n  }, this));\n});\nOptionG2.forEach(element => {\n  OptionSelectorG2.push( /*#__PURE__*/_jsxDEV(Option, {\n    children: element\n  }, element, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 27\n  }, this));\n});\n\nconst VisualizeLogColumb = DataOption => {\n  let data_filter = DataOption.map(obj => {\n    let cobj = [];\n    cobj = {\n      text: obj,\n      value: obj\n    };\n    return cobj;\n  });\n\n  const parseDMYhm = s => {\n    var b = s.split(/\\D/);\n    return new Date(b[2], b[1] - 1, b[2], b[3], b[4]);\n  };\n\n  const columns = [{\n    title: 'Parameter',\n    dataIndex: 'Parameter',\n    filters: data_filter,\n    filterMode: 'tree',\n    filterSearch: true,\n    onFilter: (value, record) => record.Parameter.includes(value),\n    width: '30%'\n  }, {\n    title: 'Value',\n    dataIndex: 'Value',\n    sorter: (a, b) => a.Value - b.Value\n  }, {\n    title: 'time',\n    dataIndex: 'time',\n    sorter: (a, b) => parseDMYhm(a.time) - parseDMYhm(b.time)\n  }];\n  return columns;\n};\n\n_c3 = VisualizeLogColumb;\nconst columnsC3 = VisualizeLogColumb(OptionC3);\nconst columnsG2 = VisualizeLogColumb(OptionG2);\n\nconst Line1DataLog = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n    console.log('ok');\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    let data = DataSortTime(response);\n    console.log(data);\n    LogValue[BufferName] = data;\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const C3LogRequest = DT => {\n    C3DTRange = ConvertMonentToDateTime(DT);\n    UpdateTableData(LogValue['C3Selected'], C3DTRange[0], C3DTRange[1], 'Polymerlink', 'C3', '1', \"C3Table\", C3Model);\n  };\n\n  const G2LogRequest = DT => {\n    G2DTRange = ConvertMonentToDateTime(DT);\n    UpdateTableData(LogValue['G2Selected'], G2DTRange[0], G2DTRange[1], 'Polymerlink', 'G2', BlankPage, \"G2Table\", G2Model);\n  };\n\n  const ChangeC3Select = value => {\n    LogValue['C3Selected'] = value;\n  };\n\n  const ChangeG2Select = value => {\n    LogValue['G2Selected'] = value;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(RangePicker, {\n      showTime: true,\n      onOk: C3LogRequest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      mode: \"multiple\",\n      size: \"middle\",\n      placeholder: \"Please select\",\n      defaultValue: [OptionC3[0], OptionC3[1]],\n      style: {\n        width: '100%'\n      },\n      onChange: ChangeC3Select,\n      children: OptionSelectorC3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"RealTime\",\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        columns: columnsC3,\n        dataSource: LogValue['C3Table'],\n        size: \"small\",\n        scroll: {\n          y: 500\n        },\n        pagination: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RangePicker, {\n      showTime: true,\n      onOk: G2LogRequest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      mode: \"multiple\",\n      size: \"middle\",\n      placeholder: \"Please select\",\n      defaultValue: [OptionG2[0], OptionG2[1]],\n      style: {\n        width: '100%'\n      },\n      onChange: ChangeG2Select,\n      children: OptionSelectorG2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"RealTime\",\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        columns: columnsG2,\n        dataSource: LogValue['G2Table'],\n        size: \"small\",\n        scroll: {\n          y: 500\n        },\n        pagination: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1DataLog, \"TOtJj3Zjk9A8N3grQNDDe2GZezA=\");\n\n_c4 = Line1DataLog;\nexport default Line1DataLog;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"OptionC3\");\n$RefreshReg$(_c2, \"OptionG2\");\n$RefreshReg$(_c3, \"VisualizeLogColumb\");\n$RefreshReg$(_c4, \"Line1DataLog\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1DataLog.jsx"],"names":["Button","Col","Divider","Row","DatePicker","Card","Table","Select","React","useState","useEffect","logdata_request","RealtimeData_Request","C3Model","G2Model","ConvertMonentToDateTime","DataSortTime","DataSortRT","RealTimeGraphWrapper","RealTimeTableWrapper","C3DataModel","G2DataModel","BlankPage","data_filter","C3DTRange","G2DTRange","LogValue","DateTimeRange","RangePicker","Option","OptionC3","Object","keys","OptionG2","OptionSelectorC3","OptionSelectorG2","forEach","element","push","VisualizeLogColumb","DataOption","map","obj","cobj","text","value","parseDMYhm","s","b","split","Date","columns","title","dataIndex","filters","filterMode","filterSearch","onFilter","record","Parameter","includes","width","sorter","a","Value","time","columnsC3","columnsG2","Line1DataLog","state","setState","count","UpdateTableData","StartTime","EndTime","Site","Line","Page","BufferName","Model","console","log","response","data","C3LogRequest","DT","G2LogRequest","ChangeC3Select","ChangeG2Select","borderRadius","y"],"mappings":"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","sourcesContent":["import { Button, Col, Divider, Row, DatePicker, Card, Table, Select } from 'antd'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { logdata_request, RealtimeData_Request } from '../../api'\r\nimport { C3Model, G2Model } from '../../DataRequest/DataModel'\r\nimport { ConvertMonentToDateTime, DataSortTime } from '../../DataRequest/LogDataRequestWrap'\r\nimport { DataSortRT } from '../../DataRequest/RealTimeRequestWrap'\r\nimport RealTimeGraphWrapper from '../Realtime/RealTimeGraphWrapper'\r\nimport RealTimeTableWrapper from '../Realtime/RealTimeTableWrapper'\r\n\r\n\r\nlet C3DataModel = C3Model\r\nlet G2DataModel = G2Model\r\nlet BlankPage, data_filter = []\r\nlet C3DTRange = [], G2DTRange = []\r\n\r\nlet LogValue = {\r\n    \"C3Table\": [],\r\n    \"G2Table\": [],\r\n    \"C3Graph\": [],\r\n    \"G2Graph\": [],\r\n    \"C3Selected\": [],\r\n    \"G2Selected\": [],\r\n}\r\nlet DateTimeRange\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\n\r\nlet OptionC3 = Object.keys(C3Model)\r\nlet OptionG2 = Object.keys(G2Model)\r\n\r\nconst OptionSelectorC3 = [];\r\nconst OptionSelectorG2 = [];\r\n\r\n\r\n\r\nLogValue['C3Selected'] = [OptionC3[0], OptionC3[1]];\r\nLogValue['G2Selected'] = [OptionG2[0], OptionG2[1]];\r\n\r\nOptionC3.forEach(element => {\r\n    OptionSelectorC3.push(<Option key={element}>{element}</Option>)\r\n});\r\nOptionG2.forEach(element => {\r\n    OptionSelectorG2.push(<Option key={element}>{element}</Option>)\r\n});\r\n\r\nconst VisualizeLogColumb = (DataOption) => {\r\n\r\n    let data_filter = DataOption.map(obj => {\r\n        let cobj = []\r\n\r\n        cobj = {\r\n            text: obj,\r\n            value: obj,\r\n        }\r\n        return cobj\r\n    })\r\n\r\n    const parseDMYhm = (s) => {\r\n        var b = s.split(/\\D/);\r\n        return new Date(b[2], b[1] - 1, b[2], b[3], b[4]);\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Parameter',\r\n            dataIndex: 'Parameter',\r\n            filters: data_filter,\r\n            filterMode: 'tree',\r\n            filterSearch: true,\r\n            onFilter: (value, record) => record.Parameter.includes(value),\r\n            width: '30%',\r\n        },\r\n        {\r\n            title: 'Value',\r\n            dataIndex: 'Value',\r\n            sorter: (a, b) => a.Value - b.Value,\r\n        },\r\n        {\r\n            title: 'time',\r\n            dataIndex: 'time',\r\n            sorter: (a, b) => parseDMYhm(a.time) - parseDMYhm(b.time),\r\n        },\r\n    ];\r\n\r\n    return columns\r\n}\r\n\r\n\r\nconst columnsC3 = VisualizeLogColumb(OptionC3)\r\nconst columnsG2 = VisualizeLogColumb(OptionG2)\r\n\r\n\r\n\r\n\r\nconst Line1DataLog = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n        console.log('ok');\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        let data = DataSortTime(response)\r\n\r\n        console.log(data);\r\n\r\n        LogValue[BufferName] = data\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const C3LogRequest = (DT) => {\r\n        C3DTRange = ConvertMonentToDateTime(DT)\r\n        UpdateTableData(LogValue['C3Selected'], C3DTRange[0], C3DTRange[1], 'Polymerlink', 'C3', '1', \"C3Table\", C3Model)\r\n    }\r\n\r\n    const G2LogRequest = (DT) => {\r\n        G2DTRange = ConvertMonentToDateTime(DT)\r\n        UpdateTableData(LogValue['G2Selected'], G2DTRange[0], G2DTRange[1], 'Polymerlink', 'G2', BlankPage, \"G2Table\", G2Model)\r\n    }\r\n\r\n    const ChangeC3Select = (value) => {\r\n        LogValue['C3Selected'] = value\r\n    }\r\n\r\n    const ChangeG2Select = (value) => {\r\n        LogValue['G2Selected'] = value\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* <Button onClick={C3LogRequest}> test </Button> */}\r\n            <RangePicker showTime onOk={C3LogRequest} />\r\n            <Select\r\n                mode=\"multiple\"\r\n                size=\"middle\"\r\n                placeholder=\"Please select\"\r\n                defaultValue={[OptionC3[0], OptionC3[1]]}\r\n                style={{ width: '100%' }}\r\n                onChange={ChangeC3Select}\r\n            >\r\n                {OptionSelectorC3}\r\n            </Select>\r\n\r\n            <Card title='RealTime' bordered={true}\r\n                style={{ width: '100%', borderRadius: 15, }} hoverable={true}>\r\n                <Table bordered columns={columnsC3} dataSource={LogValue['C3Table']} size=\"small\" scroll={{ y: 500 }} pagination={false} />\r\n            </Card>\r\n\r\n\r\n            <RangePicker showTime onOk={G2LogRequest} />\r\n            <Select\r\n                mode=\"multiple\"\r\n                size=\"middle\"\r\n                placeholder=\"Please select\"\r\n                defaultValue={[OptionG2[0], OptionG2[1]]}\r\n                style={{ width: '100%' }}\r\n                onChange={ChangeG2Select}\r\n\r\n            >\r\n                {OptionSelectorG2}\r\n            </Select>\r\n\r\n            <Card title='RealTime' bordered={true}\r\n                style={{ width: '100%', borderRadius: 15, }} hoverable={true}>\r\n                <Table bordered columns={columnsG2} dataSource={LogValue['G2Table']} size=\"small\" scroll={{ y: 500 }} pagination={false} />\r\n            </Card>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Line1DataLog\r\n"]},"metadata":{},"sourceType":"module"}