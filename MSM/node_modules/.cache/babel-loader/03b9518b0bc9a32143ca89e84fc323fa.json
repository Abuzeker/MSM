{"ast":null,"code":"import React from 'react';\nimport { RealtimeData_Request } from '../api';\nimport moment from 'moment';\nlet responseData = []; // export const DataRequest = async (label, site, page, line) => {\n//     const response = await RealtimeData_Request(label, site, page, line)\n//     if (response.success !== false) {\n//         const data = response.Data\n//         let DataReturn = data.map(obj => {\n//             let cobj = []\n//             let ar0 = moment(obj.fields.LastChange).utc(true).format('YYYY-MM-DD HH:mm:ss')\n//             cobj = {\n//                 'time': ar0,\n//                 'Label': obj.fields.Label,\n//                 'Value': obj.fields.Value,\n//                 'Line': obj.fields.Line,\n//                 'key': obj.fields.Label,\n//                 'Page': obj.fields.Page,\n//             }\n//             return cobj\n//         })\n//         responseData[0] = DataReturn\n//         return response.data\n//     }\n//     else {\n//         console.log('Data Request Error');\n//     }\n// }\n// export const RealTimeRequestWrap = (props) => {\n//     return responseData[0]\n// }\n\nexport const DataSortRT = response => {\n  if (response.success !== false) {\n    const data = response.Data;\n    let DataReturn = data.map(obj => {\n      let cobj = [];\n      let ar0 = moment(obj.fields.LastChange).utc(true).format('MM/DD HH:mm:ss').split(' ');\n      cobj = {\n        'time': ar0[1] + ' (' + ar0[0] + ')',\n        'Label': obj.fields.DisplayLabel,\n        'Value': obj.fields.Value,\n        'SV': obj.fields.SetValue,\n        'Line': obj.fields.Line,\n        'key': obj.fields.Label,\n        'Page': obj.fields.Page,\n        'label': obj.fields.Label\n      };\n      return cobj;\n    });\n    return DataReturn;\n  } else {\n    console.log('Data Request Error');\n  }\n};\n_c = DataSortRT;\nexport const DataMapping = (Datamodel, RawData) => {\n  const name = Object.keys(Datamodel);\n  name.forEach(element => {\n    let DataFound = RawData.find(_ref => {\n      let {\n        Label\n      } = _ref;\n      return Label === element;\n    });\n\n    try {\n      //    console.log(DataFound.Label);\n      //    console.log(DataFound.Value);\n      Datamodel[element].PV = DataFound.Value;\n      Datamodel[element].SV = DataFound.SV;\n    } catch {\n      console.log('None');\n    }\n  }); //console.log(Datamodel);\n\n  return Datamodel;\n};\n_c2 = DataMapping;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DataSortRT\");\n$RefreshReg$(_c2, \"DataMapping\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/DataRequest/RealTimeRequestWrap.js"],"names":["React","RealtimeData_Request","moment","responseData","DataSortRT","response","success","data","Data","DataReturn","map","obj","cobj","ar0","fields","LastChange","utc","format","split","DisplayLabel","Value","SetValue","Line","Label","Page","console","log","DataMapping","Datamodel","RawData","name","Object","keys","forEach","element","DataFound","find","PV","SV"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,IAAIC,YAAY,GAAG,EAAnB,C,CAGA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAIC,QAAD,IAAc;AAEpC,MAAIA,QAAQ,CAACC,OAAT,KAAqB,KAAzB,EAAgC;AAC5B,UAAMC,IAAI,GAAGF,QAAQ,CAACG,IAAtB;AAEA,QAAIC,UAAU,GAAGF,IAAI,CAACG,GAAL,CAASC,GAAG,IAAI;AAC7B,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIC,GAAG,GAAGX,MAAM,CAACS,GAAG,CAACG,MAAJ,CAAWC,UAAZ,CAAN,CAA8BC,GAA9B,CAAkC,IAAlC,EAAwCC,MAAxC,CAA+C,gBAA/C,EAAiEC,KAAjE,CAAuE,GAAvE,CAAV;AAEAN,MAAAA,IAAI,GAAG;AACH,gBAAQC,GAAG,CAAC,CAAD,CAAH,GAAS,IAAT,GAAgBA,GAAG,CAAC,CAAD,CAAnB,GAAyB,GAD9B;AAEH,iBAASF,GAAG,CAACG,MAAJ,CAAWK,YAFjB;AAGH,iBAASR,GAAG,CAACG,MAAJ,CAAWM,KAHjB;AAIH,cAAMT,GAAG,CAACG,MAAJ,CAAWO,QAJd;AAKH,gBAAQV,GAAG,CAACG,MAAJ,CAAWQ,IALhB;AAMH,eAAOX,GAAG,CAACG,MAAJ,CAAWS,KANf;AAOH,gBAAQZ,GAAG,CAACG,MAAJ,CAAWU,IAPhB;AAQH,iBAASb,GAAG,CAACG,MAAJ,CAAWS;AARjB,OAAP;AAUA,aAAOX,IAAP;AACH,KAfgB,CAAjB;AAgBA,WAAOH,UAAP;AACH,GApBD,MAqBK;AACDgB,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;AACJ,CA1BM;KAAMtB,U;AA6Bb,OAAO,MAAMuB,WAAW,GAAG,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AAE/C,QAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAAb;AAEAE,EAAAA,IAAI,CAACG,OAAL,CAAaC,OAAO,IAAI;AACrB,QAAIC,SAAS,GAAGN,OAAO,CAACO,IAAR,CAAa;AAAA,UAAC;AAAEb,QAAAA;AAAF,OAAD;AAAA,aAAeA,KAAK,KAAKW,OAAzB;AAAA,KAAb,CAAhB;;AACA,QAAG;AACF;AACA;AACGN,MAAAA,SAAS,CAACM,OAAD,CAAT,CAAmBG,EAAnB,GAAwBF,SAAS,CAACf,KAAlC;AACAQ,MAAAA,SAAS,CAACM,OAAD,CAAT,CAAmBI,EAAnB,GAAwBH,SAAS,CAACG,EAAlC;AACH,KALD,CAMA,MAAK;AACDb,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;AAEH,GAZD,EAJ+C,CAkB5C;;AACA,SAAOE,SAAP;AACN,CApBM;MAAMD,W","sourcesContent":["import React from 'react'\r\nimport { RealtimeData_Request } from '../api'\r\nimport moment from 'moment';\r\n\r\nlet responseData = []\r\n\r\n\r\n// export const DataRequest = async (label, site, page, line) => {\r\n\r\n//     const response = await RealtimeData_Request(label, site, page, line)\r\n\r\n//     if (response.success !== false) {\r\n//         const data = response.Data\r\n\r\n//         let DataReturn = data.map(obj => {\r\n//             let cobj = []\r\n//             let ar0 = moment(obj.fields.LastChange).utc(true).format('YYYY-MM-DD HH:mm:ss')\r\n\r\n//             cobj = {\r\n//                 'time': ar0,\r\n//                 'Label': obj.fields.Label,\r\n//                 'Value': obj.fields.Value,\r\n//                 'Line': obj.fields.Line,\r\n//                 'key': obj.fields.Label,\r\n//                 'Page': obj.fields.Page,\r\n//             }\r\n//             return cobj\r\n//         })\r\n//         responseData[0] = DataReturn\r\n//         return response.data\r\n//     }\r\n//     else {\r\n//         console.log('Data Request Error');\r\n//     }\r\n// }\r\n\r\n// export const RealTimeRequestWrap = (props) => {\r\n\r\n//     return responseData[0]\r\n// }\r\n\r\nexport const DataSortRT = (response) => {\r\n\r\n    if (response.success !== false) {\r\n        const data = response.Data\r\n\r\n        let DataReturn = data.map(obj => {\r\n            let cobj = []\r\n            let ar0 = moment(obj.fields.LastChange).utc(true).format('MM/DD HH:mm:ss').split(' ')\r\n\r\n            cobj = {\r\n                'time': ar0[1] + ' (' + ar0[0] + ')',\r\n                'Label': obj.fields.DisplayLabel,\r\n                'Value': obj.fields.Value,\r\n                'SV': obj.fields.SetValue,\r\n                'Line': obj.fields.Line,\r\n                'key': obj.fields.Label,\r\n                'Page': obj.fields.Page,\r\n                'label': obj.fields.Label,\r\n            }\r\n            return cobj\r\n        })\r\n        return DataReturn\r\n    }\r\n    else {\r\n        console.log('Data Request Error');\r\n    }\r\n}\r\n\r\n\r\nexport const DataMapping = (Datamodel, RawData) => {\r\n\r\n    const name = Object.keys(Datamodel)\r\n\r\n    name.forEach(element => {\r\n       let DataFound = RawData.find(({ Label }) => Label === element)\r\n       try{\r\n        //    console.log(DataFound.Label);\r\n        //    console.log(DataFound.Value);\r\n           Datamodel[element].PV = DataFound.Value\r\n           Datamodel[element].SV = DataFound.SV\r\n       }\r\n       catch{\r\n           console.log('None');\r\n       }\r\n         \r\n    });\r\n\r\n       //console.log(Datamodel);\r\n       return Datamodel\r\n}\r\n"]},"metadata":{},"sourceType":"module"}