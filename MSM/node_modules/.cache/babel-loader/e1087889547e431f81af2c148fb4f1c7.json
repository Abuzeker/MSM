{"ast":null,"code":"import moment from 'moment';\nexport const TableColumbTimeAsRow = () => {\n  let Columb = [];\n  let TimeRow = [];\n\n  for (let i = 0; i < 24; i++) {\n    let n;\n    i < 10 ? n = `0${i}` : n = i;\n    TimeRow.push(`${n}:00`);\n  }\n\n  Columb.push({\n    title: 'Parameter',\n    width: 100,\n    dataIndex: 'Parameter',\n    key: 'Parameter',\n    fixed: 'left',\n    align: 'center'\n  });\n  TimeRow.forEach(element => {\n    Columb.push({\n      title: element,\n      width: 70,\n      dataIndex: element,\n      key: element,\n      align: 'center'\n    });\n  });\n  return Columb;\n};\n_c = TableColumbTimeAsRow;\nexport const TableColumbLabelAsRow = Datamodel => {\n  let Columb = [];\n  Columb.push({\n    title: 'Time',\n    width: 60,\n    dataIndex: 'Time',\n    key: 'Time',\n    fixed: 'left',\n    align: 'center'\n  });\n  const name = Object.keys(Datamodel);\n  name.forEach(element => {\n    Columb.push({\n      title: element,\n      width: 70,\n      dataIndex: element,\n      key: element,\n      align: 'center'\n    });\n  });\n  console.log(Columb);\n  return Columb;\n};\n_c2 = TableColumbLabelAsRow;\nexport const GetDateTime = OffsetDay => {\n  let DateTimeArray = [];\n  let separator = '-';\n  let today = new Date();\n  let tomorrow = new Date(today);\n  tomorrow.setDate(tomorrow.getDate() + OffsetDay);\n  let date1 = today.getDate();\n  let month1 = today.getMonth() + 1;\n  let year1 = today.getFullYear();\n  let date2 = tomorrow.getDate();\n  let month2 = tomorrow.getMonth() + 1;\n  let year2 = tomorrow.getFullYear();\n  let Start_time = `${year1}${separator}${month1 < 10 ? `0${month1}` : `${month1}`}${separator}${date1} 00:00:00`;\n  let End_time = `${year2}${separator}${month2 < 10 ? `0${month2}` : `${month2}`}${separator}${date2} 00:00:00`;\n  DateTimeArray[0] = moment(Start_time).toISOString(false).split('.')[0] + \"Z\";\n  DateTimeArray[1] = moment(End_time).toISOString(false).split('.')[0] + \"Z\";\n  return DateTimeArray;\n};\n_c3 = GetDateTime;\nexport const SetDateRange = datetime => {\n  let DateTime = [];\n  let ReturnDT = [];\n  DateTime[0] = datetime;\n  DateTime[1] = moment(datetime, \"DD-MM-YYYY\").add(1, 'days');\n  ReturnDT[0] = DateTime[0].toISOString(false).split('T')[0] + \"T00:00:00Z\";\n  ReturnDT[1] = DateTime[1].toISOString(false).split('T')[0] + \"T00:00:00Z\"; //console.log(datetime[0].toISOString(true), datetime[1].toISOString(true));\n\n  return ReturnDT;\n};\n_c4 = SetDateRange;\nexport const ConvertMonentToDateTime = momentDateTime => {\n  let DateTimeReturn = [];\n  DateTimeReturn[0] = momentDateTime[0].toISOString(false).split('.')[0] + \"Z\";\n  DateTimeReturn[1] = momentDateTime[1].toISOString(false).split('.')[0] + \"Z\";\n  return DateTimeReturn;\n};\n_c5 = ConvertMonentToDateTime;\nexport const DataSortTime = response => {\n  let DataReturn;\n\n  if (response.success === true) {\n    const data = response.data;\n    DataReturn = data.map(obj => {\n      let cobj = [];\n      let date_new = moment(obj.fields.DateCreated);\n      let DateComponent = date_new.utc(true).format('dd/mm');\n      let TimeComponent = date_new.utc(true).format('HH:mm:ss');\n      let ar0 = TimeComponent.split(':');\n      let ar1 = ar0[0] + ':' + ar0[1];\n      cobj = {\n        'key': obj.fields.Parameter,\n        'time': ar1,\n        'date': DateComponent,\n        'Parameter': obj.fields.Parameter,\n        'Value': obj.fields.Value\n      };\n      return cobj;\n    });\n  } else {\n    console.log(response);\n  }\n\n  return DataReturn;\n};\n_c6 = DataSortTime;\nexport const ReportSort = response => {\n  let DataReturn;\n\n  if (response.success === true) {\n    const data = response.data;\n    DataReturn = data.map(obj => {\n      let cobj = [];\n      let DateTime_Start = moment(obj.fields.DateTime_Start).utc(true).format('dd-mm-yy HH:mm:ss');\n      let DateTime_End = moment(obj.fields.DateTime_End).utc(true).format('dd-mm-yy HH:mm:ss'); // let ar0 = TimeComponent.split(':')\n      // let ar1 = ar0[0] + ':' + ar0[1]\n\n      cobj = {\n        'key': obj.fields.Info1,\n        'Start Time': DateTime_Start,\n        'End Time': DateTime_End,\n        'Job No': obj.fields.Info1,\n        'Grade': obj.fields.Info2,\n        'Color': obj.fields.Info2\n      };\n      return cobj;\n    });\n    console.log(DataReturn);\n  } else {\n    console.log(response);\n  }\n\n  return DataReturn;\n};\n_c7 = ReportSort;\nexport const LogDataMappingTime = (Datamodel, RawData) => {\n  const name = Object.keys(Datamodel);\n  let ReturnValue = [];\n  let bufferModel = {};\n  bufferModel.Parameter = 'None';\n\n  for (let i = 0; i < 24; i++) {\n    let n;\n    i < 10 ? n = `0${i}` : n = i;\n    bufferModel[`${n}:00`] = 'None';\n  }\n\n  name.forEach(element => {\n    let Buffer = {};\n    Object.assign(Buffer, bufferModel);\n    Buffer.Parameter = element;\n    RawData.forEach(element2 => {\n      if (element2.Parameter === element) {\n        Buffer[element2.time] = element2.Value;\n        Buffer['key'] = element2.Parameter;\n      }\n    });\n    ReturnValue.push(Buffer);\n  });\n  return ReturnValue;\n};\n_c8 = LogDataMappingTime;\nexport const LogDataMappingName = (Datamodel, RawData) => {\n  const name = Object.keys(Datamodel);\n  let prevtime = [],\n      period = \"\",\n      ReturnValue = [];\n\n  const parasearch = item => {\n    if (item.time === period) {\n      return true;\n    }\n\n    return false;\n  };\n\n  RawData.forEach(element => {\n    if (element.time === prevtime) {} else {\n      prevtime = element.time;\n      period = element.time;\n      let data_buf3 = {};\n      name.forEach(element => {\n        data_buf3[element] = 'None';\n      });\n      let data_buf2 = RawData.filter(parasearch);\n      data_buf2.map(obj => {\n        data_buf3['key'] = obj.time;\n        data_buf3['Time'] = obj.time;\n        data_buf3[obj.Parameter] = obj.Value;\n        return data_buf3;\n      });\n      ReturnValue.push(data_buf3);\n    }\n  });\n  return ReturnValue;\n};\n_c9 = LogDataMappingName;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n\n$RefreshReg$(_c, \"TableColumbTimeAsRow\");\n$RefreshReg$(_c2, \"TableColumbLabelAsRow\");\n$RefreshReg$(_c3, \"GetDateTime\");\n$RefreshReg$(_c4, \"SetDateRange\");\n$RefreshReg$(_c5, \"ConvertMonentToDateTime\");\n$RefreshReg$(_c6, \"DataSortTime\");\n$RefreshReg$(_c7, \"ReportSort\");\n$RefreshReg$(_c8, \"LogDataMappingTime\");\n$RefreshReg$(_c9, \"LogDataMappingName\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/DataRequest/LogDataRequestWrap.js"],"names":["moment","TableColumbTimeAsRow","Columb","TimeRow","i","n","push","title","width","dataIndex","key","fixed","align","forEach","element","TableColumbLabelAsRow","Datamodel","name","Object","keys","console","log","GetDateTime","OffsetDay","DateTimeArray","separator","today","Date","tomorrow","setDate","getDate","date1","month1","getMonth","year1","getFullYear","date2","month2","year2","Start_time","End_time","toISOString","split","SetDateRange","datetime","DateTime","ReturnDT","add","ConvertMonentToDateTime","momentDateTime","DateTimeReturn","DataSortTime","response","DataReturn","success","data","map","obj","cobj","date_new","fields","DateCreated","DateComponent","utc","format","TimeComponent","ar0","ar1","Parameter","Value","ReportSort","DateTime_Start","DateTime_End","Info1","Info2","LogDataMappingTime","RawData","ReturnValue","bufferModel","Buffer","assign","element2","time","LogDataMappingName","prevtime","period","parasearch","item","data_buf3","data_buf2","filter"],"mappings":"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","sourcesContent":["import moment from 'moment';\r\n\r\n\r\nexport const TableColumbTimeAsRow = () => {\r\n    let Columb = []\r\n    let TimeRow = []\r\n\r\n    for (let i = 0; i < 24; i++) {\r\n        let n\r\n        i < 10 ? n = `0${i}` : n = i\r\n        TimeRow.push(`${n}:00`)\r\n    }\r\n\r\n    Columb.push(\r\n        {\r\n            title: 'Parameter',\r\n            width: 100,\r\n            dataIndex: 'Parameter',\r\n            key: 'Parameter',\r\n            fixed: 'left',\r\n            align: 'center',\r\n        })\r\n\r\n    TimeRow.forEach(element => {\r\n        Columb.push(\r\n            {\r\n                title: element,\r\n                width: 70,\r\n                dataIndex: element,\r\n                key: element,\r\n                align: 'center',\r\n            }\r\n        )\r\n    });\r\n    return Columb\r\n}\r\n\r\nexport const TableColumbLabelAsRow = (Datamodel) => {\r\n    let Columb = []\r\n\r\n    Columb.push(\r\n        {\r\n            title: 'Time',\r\n            width: 60,\r\n            dataIndex: 'Time',\r\n            key: 'Time',\r\n            fixed: 'left',\r\n            align: 'center',\r\n        })\r\n\r\n    const name = Object.keys(Datamodel)\r\n    name.forEach(element => {\r\n        Columb.push(\r\n            {\r\n                title: element,\r\n                width: 70,\r\n                dataIndex: element,\r\n                key: element,\r\n                align: 'center',\r\n            }\r\n        )\r\n    })\r\n\r\n    console.log(Columb);\r\n    return Columb\r\n}\r\n\r\nexport const GetDateTime = (OffsetDay) => {\r\n\r\n    let DateTimeArray = []\r\n    let separator = '-'\r\n\r\n    let today = new Date()\r\n    let tomorrow = new Date(today)\r\n    tomorrow.setDate(tomorrow.getDate() + OffsetDay)\r\n\r\n    let date1 = today.getDate();\r\n    let month1 = today.getMonth() + 1;\r\n    let year1 = today.getFullYear();\r\n\r\n    let date2 = tomorrow.getDate();\r\n    let month2 = tomorrow.getMonth() + 1;\r\n    let year2 = tomorrow.getFullYear();\r\n\r\n\r\n    let Start_time = `${year1}${separator}${month1 < 10 ? `0${month1}` : `${month1}`}${separator}${date1} 00:00:00`\r\n    let End_time = `${year2}${separator}${month2 < 10 ? `0${month2}` : `${month2}`}${separator}${date2} 00:00:00`\r\n\r\n    DateTimeArray[0] = moment(Start_time).toISOString(false).split('.')[0] + \"Z\"\r\n    DateTimeArray[1] = moment(End_time).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n    return DateTimeArray\r\n}\r\n\r\nexport const SetDateRange = (datetime) => {\r\n    let DateTime = []\r\n    let ReturnDT = []\r\n    DateTime[0] = datetime\r\n    DateTime[1] = moment(datetime, \"DD-MM-YYYY\").add(1, 'days');\r\n\r\n    ReturnDT[0] = DateTime[0].toISOString(false).split('T')[0] + \"T00:00:00Z\"\r\n    ReturnDT[1] = DateTime[1].toISOString(false).split('T')[0] + \"T00:00:00Z\"\r\n    //console.log(datetime[0].toISOString(true), datetime[1].toISOString(true));\r\n    return ReturnDT\r\n}\r\n\r\nexport const ConvertMonentToDateTime = (momentDateTime) =>{\r\n    let DateTimeReturn = []\r\n\r\n    DateTimeReturn[0] = momentDateTime[0].toISOString(false).split('.')[0] + \"Z\"\r\n    DateTimeReturn[1] = momentDateTime[1].toISOString(false).split('.')[0] + \"Z\"\r\n\r\n    return DateTimeReturn\r\n}\r\n\r\nexport const DataSortTime = (response) => {\r\n    let DataReturn\r\n    if (response.success === true) {\r\n        const data = response.data\r\n\r\n        DataReturn = data.map(obj => {\r\n            let cobj = []\r\n            let date_new = moment(obj.fields.DateCreated);\r\n            let DateComponent = date_new.utc(true).format('dd/mm')\r\n            let TimeComponent = date_new.utc(true).format('HH:mm:ss')\r\n            let ar0 = TimeComponent.split(':')\r\n            let ar1 = ar0[0] + ':' + ar0[1]\r\n\r\n            cobj = {\r\n                'key': obj.fields.Parameter,\r\n                'time': ar1,\r\n                'date': DateComponent,\r\n                'Parameter': obj.fields.Parameter,\r\n                'Value': obj.fields.Value,\r\n            }\r\n            return cobj\r\n        })\r\n    }\r\n    else {\r\n        console.log(response)\r\n    }\r\n    return DataReturn\r\n}\r\n\r\nexport const ReportSort = (response) => {\r\n    let DataReturn\r\n    if (response.success === true) {\r\n        const data = response.data\r\n\r\n        DataReturn = data.map(obj => {\r\n            let cobj = []\r\n            let DateTime_Start = (moment(obj.fields.DateTime_Start)).utc(true).format('dd-mm-yy HH:mm:ss')\r\n            let DateTime_End = (moment(obj.fields.DateTime_End)).utc(true).format('dd-mm-yy HH:mm:ss')\r\n            // let ar0 = TimeComponent.split(':')\r\n            // let ar1 = ar0[0] + ':' + ar0[1]\r\n\r\n            cobj = {\r\n                'key': obj.fields.Info1,\r\n                'Start Time': DateTime_Start,\r\n                'End Time': DateTime_End,\r\n                'Job No': obj.fields.Info1,\r\n                'Grade': obj.fields.Info2,\r\n                'Color': obj.fields.Info2,\r\n            }\r\n            return cobj\r\n        })\r\n        console.log(DataReturn);\r\n    }\r\n    else {\r\n        console.log(response)\r\n    }\r\n    return DataReturn\r\n}\r\n\r\nexport const LogDataMappingTime = (Datamodel, RawData) => {\r\n    const name = Object.keys(Datamodel)\r\n    let ReturnValue = []\r\n    let bufferModel = {}\r\n    bufferModel.Parameter = 'None'\r\n\r\n    for (let i = 0; i < 24; i++) {\r\n        let n\r\n        i < 10 ? n = `0${i}` : n = i\r\n        bufferModel[`${n}:00`] = 'None'\r\n    }\r\n\r\n    name.forEach(element => {\r\n        let Buffer = {}\r\n        Object.assign(Buffer, bufferModel)\r\n        Buffer.Parameter = element\r\n\r\n        RawData.forEach(element2 => {\r\n            if (element2.Parameter === element) {\r\n                Buffer[element2.time] = element2.Value\r\n                Buffer['key'] = element2.Parameter\r\n            }\r\n        })\r\n        ReturnValue.push(Buffer)\r\n    })\r\n    return ReturnValue\r\n}\r\n\r\n\r\nexport const LogDataMappingName = (Datamodel, RawData) => {\r\n    const name = Object.keys(Datamodel)\r\n\r\n\r\n    let prevtime = [], period = \"\", ReturnValue = []\r\n\r\n    const parasearch = (item) => {\r\n        if (item.time === period) { return true; }\r\n        return false\r\n    }\r\n\r\n    RawData.forEach(element => {\r\n        if (element.time === prevtime) { }\r\n\r\n        else {\r\n            prevtime = element.time\r\n            period = element.time\r\n\r\n            let data_buf3 = {}\r\n\r\n            name.forEach(element => {\r\n                data_buf3[element] = 'None'\r\n            });\r\n\r\n            let data_buf2 = RawData.filter(parasearch)\r\n\r\n            data_buf2.map(obj => {\r\n                data_buf3['key'] = obj.time\r\n                data_buf3['Time'] = obj.time\r\n                data_buf3[obj.Parameter] = obj.Value\r\n                return data_buf3\r\n            })\r\n            ReturnValue.push(data_buf3)\r\n        }\r\n    })\r\n    return ReturnValue\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}