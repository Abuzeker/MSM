{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Realtime\\\\RealTimeGraphWrapper.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Card, Select } from 'antd';\nimport { Line } from '@antv/g2plot';\nimport { GraphDataFind } from '../../DataRequest/RealTimeRequestWrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Option\n} = Select; // let line\n\nconst RealTimeGraphWrapper = props => {\n  _s();\n\n  const [OptionSelected, setOptionSelected] = useState([]);\n  const [Graph, setGraph] = useState([]);\n  const [line, setline] = useState();\n  const [state, setstate] = useState({\n    re: 0\n  });\n  const LabelOption = [];\n  const LabelList = Object.keys(props.DataModel);\n  LabelList.forEach(element => {\n    LabelOption.push( /*#__PURE__*/_jsxDEV(Option, {\n      children: element\n    }, element, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 26\n    }, this));\n  });\n\n  const handleChange = value => {\n    setOptionSelected(value);\n  };\n\n  const HistoryClear = () => {\n    line.update();\n    setGraph([]);\n  };\n\n  const renderline = () => {\n    try {\n      line.render();\n      setstate(_ref => {\n        let {\n          re\n        } = _ref;\n        return {\n          re: re + 1\n        };\n      });\n    } catch {}\n  };\n\n  const UpdateData = () => {\n    state.re === 0 ? renderline() : console.log('Already Render');\n    let GraphBuffer = GraphDataFind(OptionSelected, props.RawDataReceive);\n\n    if (GraphBuffer.length === 0) {} else {\n      GraphBuffer.forEach(element => {\n        Graph.push(element);\n      });\n\n      try {\n        line.changeData(Graph);\n      } catch {}\n    }\n  };\n\n  useEffect(() => {\n    console.log('Reffect');\n    setline(new Line(props.Divname, {\n      data: Graph,\n      xField: 'time',\n      yField: 'Value',\n      seriesField: 'Label'\n    }));\n\n    try {\n      line.render();\n    } catch {}\n\n    return () => {\n      console.log('un');\n\n      try {\n        line.destroy();\n      } catch {}\n    };\n  }, []);\n  console.log(props.GarphTitle);\n  UpdateData();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        mode: \"multiple\",\n        placeholder: \"Please select\",\n        onChange: handleChange,\n        style: {\n          width: '100%'\n        },\n        children: LabelOption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: HistoryClear,\n        children: \" Clear \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: props.GarphTitle,\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15,\n        backgroundColor: '#f0f9fa'\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: props.Divname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n\n_s(RealTimeGraphWrapper, \"js95eYIsnbE0HpFYwd9/1eiQLgc=\");\n\n_c = RealTimeGraphWrapper;\nexport default RealTimeGraphWrapper;\n\nvar _c;\n\n$RefreshReg$(_c, \"RealTimeGraphWrapper\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Realtime/RealTimeGraphWrapper.jsx"],"names":["React","useState","useEffect","Button","Card","Select","Line","GraphDataFind","Option","RealTimeGraphWrapper","props","OptionSelected","setOptionSelected","Graph","setGraph","line","setline","state","setstate","re","LabelOption","LabelList","Object","keys","DataModel","forEach","element","push","handleChange","value","HistoryClear","update","renderline","render","UpdateData","console","log","GraphBuffer","RawDataReceive","length","changeData","Divname","data","xField","yField","seriesField","destroy","GarphTitle","width","borderRadius","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Button, Card, Select } from 'antd';\r\nimport { Line } from '@antv/g2plot';\r\nimport { GraphDataFind } from '../../DataRequest/RealTimeRequestWrap';\r\n\r\nconst { Option } = Select;\r\n\r\n// let line\r\n\r\nconst RealTimeGraphWrapper = (props) => {\r\n\r\n    const [OptionSelected, setOptionSelected] = useState([])\r\n    const [Graph, setGraph] = useState([])\r\n    const [line, setline] = useState()\r\n    const [state, setstate] = useState({re:0})\r\n\r\n    const LabelOption = []\r\n    const LabelList = Object.keys(props.DataModel)\r\n\r\n    LabelList.forEach(element => {\r\n        LabelOption.push(<Option key={element}>{element}</Option>);\r\n    });\r\n\r\n    const handleChange = (value) => {\r\n        setOptionSelected(value)\r\n    }\r\n\r\n    const HistoryClear = () => {\r\n        line.update()\r\n        setGraph([])\r\n    }\r\n\r\n    const renderline = () =>{\r\n        try { \r\n            line.render()\r\n            setstate(({ re }) => ({ re: re + 1 }));\r\n         }\r\n        catch { }\r\n    }\r\n\r\n    const UpdateData = () => {\r\n\r\n        state.re === 0 ? renderline() : console.log('Already Render');\r\n\r\n        let GraphBuffer = GraphDataFind(OptionSelected, props.RawDataReceive)\r\n        if (GraphBuffer.length === 0) {\r\n        }\r\n\r\n        else {\r\n            GraphBuffer.forEach(element => {\r\n                Graph.push(element)\r\n            });\r\n            try {\r\n                line.changeData(Graph)\r\n            }\r\n            catch { }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('Reffect');\r\n\r\n        setline(new Line(props.Divname, {\r\n            data: Graph,\r\n            xField: 'time',\r\n            yField: 'Value',\r\n            seriesField: 'Label',\r\n        }))\r\n\r\n        try { line.render() }\r\n        catch { }\r\n\r\n        return () => {\r\n            console.log('un');\r\n            try {\r\n                line.destroy();\r\n            }\r\n            catch { }\r\n\r\n        }\r\n    }, [])\r\n\r\n    console.log(props.GarphTitle);\r\n    UpdateData()\r\n\r\n    return (\r\n        <div >\r\n            <div>\r\n                <Select\r\n                    mode=\"multiple\"\r\n                    placeholder=\"Please select\"\r\n                    onChange={handleChange}\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    {LabelOption}\r\n                </Select>\r\n\r\n                <Button onClick={HistoryClear}> Clear </Button>\r\n\r\n            </div>\r\n\r\n            <Card title={props.GarphTitle} bordered={true} style={{ width: '100%', borderRadius: 15, backgroundColor: '#f0f9fa' }} hoverable={true}>\r\n                <div id={props.Divname}></div>\r\n            </Card>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RealTimeGraphWrapper\r\n"]},"metadata":{},"sourceType":"module"}