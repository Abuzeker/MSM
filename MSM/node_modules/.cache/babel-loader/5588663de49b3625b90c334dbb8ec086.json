{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\DataRequest\\\\LogDataRequestWrap.js\";\nimport { Button } from 'antd';\nimport moment from 'moment';\nimport XlsxPopulate from 'xlsx-populate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TableColumbTimeAsRow = () => {\n  let Columb = [];\n  let TimeRow = [];\n\n  for (let i = 0; i < 24; i++) {\n    let n;\n    i < 10 ? n = `0${i}` : n = i;\n    TimeRow.push(`${n}:00`);\n  }\n\n  Columb.push({\n    title: 'Parameter',\n    width: 100,\n    dataIndex: 'Parameter',\n    key: 'Parameter',\n    fixed: 'left',\n    align: 'center'\n  });\n  TimeRow.forEach(element => {\n    Columb.push({\n      title: element,\n      width: 70,\n      dataIndex: element,\n      key: element,\n      align: 'center'\n    });\n  });\n  return Columb;\n};\n_c = TableColumbTimeAsRow;\nexport const TableColumbLabelAsRowG2 = (Datamodel, InputBagCallBack) => {\n  let Columb = [];\n  Columb.push({\n    title: 'Time',\n    width: 60,\n    dataIndex: 'Time',\n    key: 'Time',\n    fixed: 'left',\n    align: 'center'\n  });\n  const name = Object.keys(Datamodel);\n  name.forEach(element => {\n    Columb.push({\n      title: element,\n      width: 70,\n      dataIndex: element,\n      key: element,\n      align: 'center'\n    });\n  });\n  Columb.push({\n    title: 'View',\n    width: 60,\n    dataIndex: 'View',\n    key: 'View',\n    align: 'center',\n    render: (text, record, index) => /*#__PURE__*/_jsxDEV(Button, {\n      onClick: e => {\n        InputBagCallBack(record);\n      },\n      children: \" Click \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 46\n    }, this)\n  }); //console.log(Columb);\n\n  return Columb;\n};\n_c2 = TableColumbLabelAsRowG2;\nexport const TableColumbLabelAsRow = Datamodel => {\n  let Columb = [];\n  Columb.push({\n    title: 'Time',\n    width: 60,\n    dataIndex: 'Time',\n    key: 'Time',\n    fixed: 'left',\n    align: 'center'\n  });\n  const name = Object.keys(Datamodel);\n  name.forEach(element => {\n    Columb.push({\n      title: element,\n      width: 70,\n      dataIndex: element,\n      key: element,\n      align: 'center'\n    });\n  }); //console.log(Columb);\n\n  return Columb;\n};\n_c3 = TableColumbLabelAsRow;\nexport const TableColumbJob = (Datamodel, Viewhandler, DeleteHandler, line, page, button1name, button2name) => {\n  let Columb = [];\n  const name = Object.keys(Datamodel);\n  name.forEach(element => {\n    Columb.push({\n      title: element,\n      width: 70,\n      dataIndex: element,\n      key: element,\n      align: 'center'\n    });\n  });\n  Columb.push({\n    title: `${button1name}`,\n    width: 60,\n    dataIndex: 'View',\n    key: 'View',\n    align: 'center',\n    render: (text, record, index) => /*#__PURE__*/_jsxDEV(Button, {\n      onClick: e => {\n        Viewhandler(record);\n      },\n      children: \" Click \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 46\n    }, this)\n  });\n  Columb.push({\n    title: `${button2name}`,\n    width: 60,\n    dataIndex: 'Delete',\n    key: 'Delete',\n    align: 'center',\n    render: (text, record, index) => /*#__PURE__*/_jsxDEV(Button, {\n      onClick: e => {\n        DeleteHandler(record, line, page);\n      },\n      children: [\" \", button2name, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 46\n    }, this)\n  }); //console.log(Columb);\n\n  return Columb;\n};\n_c4 = TableColumbJob;\nexport const TableColumbJobHome = (Datamodel, line, page, button1name, button2name) => {\n  let Columb = [];\n  Columb.push({\n    title: 'Line',\n    width: 70,\n    dataIndex: 'Line',\n    key: 'Line',\n    align: 'center'\n  });\n  const name = Object.keys(Datamodel);\n  name.forEach(element => {\n    Columb.push({\n      title: element,\n      width: 70,\n      dataIndex: element,\n      key: element,\n      align: 'center'\n    });\n  }); //console.log(Columb);\n\n  return Columb;\n}; //offset initial date from today and offset ending date by today\n\n_c5 = TableColumbJobHome;\nexport const GetDateTime = (OffsetInitialDay, OffsetDayEnd) => {\n  let DateTimeArray = [];\n  let separator = '-';\n  let today = new Date();\n  let tomorrow = new Date(today);\n  tomorrow.setDate(tomorrow.getDate() + OffsetDayEnd);\n  today.setDate(today.getDate() - OffsetInitialDay);\n  let date1 = today.getDate();\n  let month1 = today.getMonth() + 1;\n  let year1 = today.getFullYear();\n  let date2 = tomorrow.getDate();\n  let month2 = tomorrow.getMonth() + 1;\n  let year2 = tomorrow.getFullYear();\n  let Start_time = `${year1}${separator}${month1 < 10 ? `0${month1}` : `${month1}`}${separator}${date1} 00:00:00`;\n  let End_time = `${year2}${separator}${month2 < 10 ? `0${month2}` : `${month2}`}${separator}${date2} 00:00:00`;\n  DateTimeArray[0] = moment(Start_time).toISOString(false).split('.')[0] + \"Z\";\n  DateTimeArray[1] = moment(End_time).toISOString(false).split('.')[0] + \"Z\";\n  return DateTimeArray;\n};\n_c6 = GetDateTime;\nexport const SetDateRange = datetime => {\n  let DateTime = [];\n  let ReturnDT = []; //convert datepicker value to Z format\n\n  DateTime[0] = moment(datetime, \"DD-MM-YYYY\").subtract(1, 'days');\n  DateTime[1] = datetime; //moment(datetime, \"DD-MM-YYYY\").add(1, 'days');\n\n  ReturnDT[0] = DateTime[0].toISOString(false).split('T')[0] + \"T16:00:00Z\";\n  ReturnDT[1] = DateTime[1].toISOString(false).split('T')[0] + \"T15:00:00Z\"; //console.log(ReturnDT)\n\n  return ReturnDT;\n}; //convert datetimepicker value to Z format\n\n_c7 = SetDateRange;\nexport const ConvertMonentToDateTime = momentDateTime => {\n  let DateTimeReturn = [];\n\n  try {\n    DateTimeReturn[0] = momentDateTime[0].toISOString(false).split('.')[0] + \"Z\";\n    DateTimeReturn[1] = momentDateTime[1].toISOString(false).split('.')[0] + \"Z\";\n  } catch {}\n\n  return DateTimeReturn;\n};\n_c8 = ConvertMonentToDateTime;\nexport const DataSortTime = response => {\n  let DataReturn;\n\n  if (response.success === true) {\n    const data = response.data;\n    DataReturn = data.map(obj => {\n      let cobj = [];\n      let date_new = moment(obj.fields.DateCreated);\n      let DateComponent = date_new.utc(true).format('DD-MM-YYYY HH:mm:ss');\n      let TimeComponent = date_new.utc(true).format('HH:mm:ss');\n      let ar0 = TimeComponent.split(':');\n      let ar1 = ar0[0] + ':' + ar0[1]; // let SV = obj.fields.\n\n      cobj = {\n        'key': `${obj.fields.Parameter}  ${DateComponent}`,\n        'time': ar1,\n        'date': DateComponent,\n        'Parameter': parseFloat(obj.fields.Parameter),\n        'Value': obj.fields.Value\n      };\n      return cobj;\n    }); //console.log(DataReturn);\n  } else {\n    console.log(response);\n  }\n\n  return DataReturn;\n};\n_c9 = DataSortTime;\nexport const ReportSort = response => {\n  let DataReturn;\n\n  if (response.success === true) {\n    const data = response.data;\n    DataReturn = data.map(obj => {\n      let cobj = [];\n      let DateTime_Start = moment(obj.fields.DateTime_Start).utc(true).format('DD-MM-YYYY HH:mm:ss');\n      let DateTime_End = moment(obj.fields.DateTime_End).utc(true).format('DD-MM-YYYY HH:mm:ss'); // let ar0 = TimeComponent.split(':')\n      // let ar1 = ar0[0] + ':' + ar0[1]\n\n      cobj = {\n        'key': obj.fields.Info1,\n        'Line': obj.fields.Line,\n        'Start Time': DateTime_Start,\n        'End Time': DateTime_End,\n        'Job No': obj.fields.Info1,\n        'Grade': obj.fields.Info2,\n        'Color': obj.fields.Info3\n      };\n      return cobj;\n    }); //console.log(DataReturn);\n  } else {\n    console.log(response);\n  }\n\n  return DataReturn;\n};\n_c10 = ReportSort;\nexport const LogDataMappingTime = (Datamodel, RawData) => {\n  const name = Object.keys(Datamodel);\n  let ReturnValue = [];\n  let bufferModel = {};\n  bufferModel.Parameter = 0;\n\n  for (let i = 0; i < 24; i++) {\n    let n;\n    i < 10 ? n = `0${i}` : n = i;\n    bufferModel[`${n}:00`] = 0;\n  }\n\n  name.forEach(element => {\n    let Buffer = {};\n    Object.assign(Buffer, bufferModel);\n    Buffer.Parameter = element;\n    RawData.forEach(element2 => {\n      if (element2.Parameter === element) {\n        Buffer[element2.time] = element2.Value;\n        Buffer['key'] = element2.Parameter;\n      }\n    });\n    ReturnValue.push(Buffer);\n  });\n  return ReturnValue;\n};\n_c11 = LogDataMappingTime;\nexport const LogDataMappingName = (Datamodel, RawData) => {\n  const name = Object.keys(Datamodel);\n  let prevtime = [],\n      period = \"\",\n      ReturnValue = [];\n\n  const parasearch = item => {\n    if (item.date === period) {\n      return true;\n    }\n\n    return false;\n  };\n\n  RawData.forEach(element => {\n    if (element.date === prevtime) {} else {\n      prevtime = element.date;\n      period = element.date;\n      let data_buf3 = {};\n      name.forEach(element => {\n        data_buf3[element] = 0;\n      });\n      let data_buf2 = RawData.filter(parasearch);\n      data_buf2.map(obj => {\n        data_buf3['key'] = obj.date;\n        data_buf3['Time'] = obj.date;\n        data_buf3[obj.Parameter] = obj.Value;\n        return data_buf3;\n      });\n      ReturnValue.push(data_buf3);\n    }\n  });\n  return ReturnValue;\n};\n_c12 = LogDataMappingName;\nexport const SortToArrayExcel = (DataJson, DataModel) => {\n  console.log(DataJson); // let bufferArray = []\n\n  let bufferArray2 = [];\n  const para = Object.keys(DataJson[1]);\n  const name = Object.keys(DataModel);\n  let ReturnPara = {\n    Array: [],\n    height: 1,\n    width: 1\n  }; // console.log(para);\n  // console.log(name);\n  // bufferArray.push(DataJson[1]['Time'])\n\n  DataJson.forEach(element => {\n    let bufferArray = [];\n    bufferArray.push(element['Time']);\n    name.forEach(element1 => {\n      para.forEach(element2 => {\n        // console.log('new');\n        // console.log(element1);\n        // console.log(element2);\n        let number;\n\n        if (element2 === element1) {\n          try {\n            //console.log(element2);\n            number = parseFloat(element[element2]);\n          } catch {\n            console.log('error');\n            number = parseFloat(0);\n          } //console.log(LogValue['LogC3'][1][element2])\n\n\n          bufferArray.push(number);\n        }\n      });\n    });\n    bufferArray2.push(bufferArray);\n  });\n  ReturnPara.Array = bufferArray2;\n  ReturnPara.height = bufferArray2.length;\n  ReturnPara.width = bufferArray2[0].length;\n  return ReturnPara;\n};\n_c13 = SortToArrayExcel;\nexport const ExportExcelWorkBook = (DataJson, DataModel, startCol, startRow, endCol, endRow, FileName) => {\n  fetch(FileName).then(res => res.arrayBuffer()).then(buffer => {\n    XlsxPopulate.fromDataAsync(buffer).then(workbook => {\n      // r = workbook.sheet(0).cell(\"A8\").value(\"foo\");\n      let setting = SortToArrayExcel(DataJson, DataModel);\n      const r = workbook.sheet(0).range(`${startCol}${startRow}:${endCol}${endRow + setting.height}`);\n      r.value(setting.Array);\n      workbook.outputAsync().then(function (blob) {\n        if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n          window.navigator.msSaveOrOpenBlob(blob, \"out.xlsx\");\n        } else {\n          var url = window.URL.createObjectURL(blob);\n          var a = document.createElement(\"a\");\n          document.body.appendChild(a);\n          a.href = url;\n          a.download = FileName;\n          a.click();\n          window.URL.revokeObjectURL(url);\n          document.body.removeChild(a);\n        }\n      });\n    }).catch(err => console.error(err));\n  });\n};\n_c14 = ExportExcelWorkBook;\nexport const FilterOutEndedJob = JobList => {\n  let FilterJob = [];\n  const Current = new Date();\n  const NowTime = new Date(moment(Current).format('DD-MM-yyyy HH:mm:ss')); //when wan to change datetime from (new dete()) to the usual view\n\n  JobList.forEach(element => {\n    try {\n      let DateBuf = new Date(element['End Time']);\n\n      if (DateBuf > NowTime) {\n        FilterJob.push(element);\n      }\n    } catch {}\n  });\n  return FilterJob;\n};\n_c15 = FilterOutEndedJob;\nexport const VisualizeLogColumb = DataOption => {\n  let data_filter = DataOption.map(obj => {\n    let cobj = [];\n    cobj = {\n      text: obj,\n      value: obj\n    };\n    return cobj;\n  });\n\n  const parseDMYhm = s => {\n    var b = s.split(/\\D/);\n    return new Date(b[2], b[1] - 1, b[2], b[3], b[4]);\n  };\n\n  const columns = [{\n    title: 'Parameter',\n    dataIndex: 'Parameter',\n    filters: data_filter,\n    filterMode: 'tree',\n    filterSearch: true,\n    onFilter: (value, record) => record.Parameter.includes(value),\n    width: '30%'\n  }, {\n    title: 'Value',\n    dataIndex: 'Value',\n    sorter: (a, b) => a.Value - b.Value\n  }, {\n    title: 'time',\n    dataIndex: 'time',\n    sorter: (a, b) => parseDMYhm(a.time) - parseDMYhm(b.time)\n  }];\n  return columns;\n};\n_c16 = VisualizeLogColumb;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16;\n\n$RefreshReg$(_c, \"TableColumbTimeAsRow\");\n$RefreshReg$(_c2, \"TableColumbLabelAsRowG2\");\n$RefreshReg$(_c3, \"TableColumbLabelAsRow\");\n$RefreshReg$(_c4, \"TableColumbJob\");\n$RefreshReg$(_c5, \"TableColumbJobHome\");\n$RefreshReg$(_c6, \"GetDateTime\");\n$RefreshReg$(_c7, \"SetDateRange\");\n$RefreshReg$(_c8, \"ConvertMonentToDateTime\");\n$RefreshReg$(_c9, \"DataSortTime\");\n$RefreshReg$(_c10, \"ReportSort\");\n$RefreshReg$(_c11, \"LogDataMappingTime\");\n$RefreshReg$(_c12, \"LogDataMappingName\");\n$RefreshReg$(_c13, \"SortToArrayExcel\");\n$RefreshReg$(_c14, \"ExportExcelWorkBook\");\n$RefreshReg$(_c15, \"FilterOutEndedJob\");\n$RefreshReg$(_c16, \"VisualizeLogColumb\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/DataRequest/LogDataRequestWrap.js"],"names":["Button","moment","XlsxPopulate","TableColumbTimeAsRow","Columb","TimeRow","i","n","push","title","width","dataIndex","key","fixed","align","forEach","element","TableColumbLabelAsRowG2","Datamodel","InputBagCallBack","name","Object","keys","render","text","record","index","e","TableColumbLabelAsRow","TableColumbJob","Viewhandler","DeleteHandler","line","page","button1name","button2name","TableColumbJobHome","GetDateTime","OffsetInitialDay","OffsetDayEnd","DateTimeArray","separator","today","Date","tomorrow","setDate","getDate","date1","month1","getMonth","year1","getFullYear","date2","month2","year2","Start_time","End_time","toISOString","split","SetDateRange","datetime","DateTime","ReturnDT","subtract","ConvertMonentToDateTime","momentDateTime","DateTimeReturn","DataSortTime","response","DataReturn","success","data","map","obj","cobj","date_new","fields","DateCreated","DateComponent","utc","format","TimeComponent","ar0","ar1","Parameter","parseFloat","Value","console","log","ReportSort","DateTime_Start","DateTime_End","Info1","Line","Info2","Info3","LogDataMappingTime","RawData","ReturnValue","bufferModel","Buffer","assign","element2","time","LogDataMappingName","prevtime","period","parasearch","item","date","data_buf3","data_buf2","filter","SortToArrayExcel","DataJson","DataModel","bufferArray2","para","ReturnPara","Array","height","bufferArray","element1","number","length","ExportExcelWorkBook","startCol","startRow","endCol","endRow","FileName","fetch","then","res","arrayBuffer","buffer","fromDataAsync","workbook","setting","r","sheet","range","value","outputAsync","blob","window","navigator","msSaveOrOpenBlob","url","URL","createObjectURL","a","document","createElement","body","appendChild","href","download","click","revokeObjectURL","removeChild","catch","err","error","FilterOutEndedJob","JobList","FilterJob","Current","NowTime","DateBuf","VisualizeLogColumb","DataOption","data_filter","parseDMYhm","s","b","columns","filters","filterMode","filterSearch","onFilter","includes","sorter"],"mappings":";AAAA,SAASA,MAAT,QAAuB,MAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,YAAP,MAAyB,eAAzB;;AAGA,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AACtC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,QAAIC,CAAJ;AACAD,IAAAA,CAAC,GAAG,EAAJ,GAASC,CAAC,GAAI,IAAGD,CAAE,EAAnB,GAAuBC,CAAC,GAAGD,CAA3B;AACAD,IAAAA,OAAO,CAACG,IAAR,CAAc,GAAED,CAAE,KAAlB;AACH;;AAEDH,EAAAA,MAAM,CAACI,IAAP,CACI;AACIC,IAAAA,KAAK,EAAE,WADX;AAEIC,IAAAA,KAAK,EAAE,GAFX;AAGIC,IAAAA,SAAS,EAAE,WAHf;AAIIC,IAAAA,GAAG,EAAE,WAJT;AAKIC,IAAAA,KAAK,EAAE,MALX;AAMIC,IAAAA,KAAK,EAAE;AANX,GADJ;AAUAT,EAAAA,OAAO,CAACU,OAAR,CAAgBC,OAAO,IAAI;AACvBZ,IAAAA,MAAM,CAACI,IAAP,CACI;AACIC,MAAAA,KAAK,EAAEO,OADX;AAEIN,MAAAA,KAAK,EAAE,EAFX;AAGIC,MAAAA,SAAS,EAAEK,OAHf;AAIIJ,MAAAA,GAAG,EAAEI,OAJT;AAKIF,MAAAA,KAAK,EAAE;AALX,KADJ;AASH,GAVD;AAWA,SAAOV,MAAP;AACH,CAhCM;KAAMD,oB;AAkCb,OAAO,MAAMc,uBAAuB,GAAG,CAACC,SAAD,EAAYC,gBAAZ,KAAiC;AACpE,MAAIf,MAAM,GAAG,EAAb;AAEAA,EAAAA,MAAM,CAACI,IAAP,CACI;AACIC,IAAAA,KAAK,EAAE,MADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,MAHf;AAIIC,IAAAA,GAAG,EAAE,MAJT;AAKIC,IAAAA,KAAK,EAAE,MALX;AAMIC,IAAAA,KAAK,EAAE;AANX,GADJ;AAUA,QAAMM,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAAb;AACAE,EAAAA,IAAI,CAACL,OAAL,CAAaC,OAAO,IAAI;AACpBZ,IAAAA,MAAM,CAACI,IAAP,CACI;AACIC,MAAAA,KAAK,EAAEO,OADX;AAEIN,MAAAA,KAAK,EAAE,EAFX;AAGIC,MAAAA,SAAS,EAAEK,OAHf;AAIIJ,MAAAA,GAAG,EAAEI,OAJT;AAKIF,MAAAA,KAAK,EAAE;AALX,KADJ;AASH,GAVD;AAYAV,EAAAA,MAAM,CAACI,IAAP,CACI;AACIC,IAAAA,KAAK,EAAE,MADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,MAHf;AAIIC,IAAAA,GAAG,EAAE,MAJT;AAKIE,IAAAA,KAAK,EAAE,QALX;AAMIS,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf,kBAAyB,QAAC,MAAD;AAAQ,MAAA,OAAO,EAC3CC,CAAD,IAAO;AAAER,QAAAA,gBAAgB,CAACM,MAAD,CAAhB;AAA0B,OADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANrC,GADJ,EA1BoE,CAsCpE;;AACA,SAAOrB,MAAP;AACH,CAxCM;MAAMa,uB;AA0Cb,OAAO,MAAMW,qBAAqB,GAAIV,SAAD,IAAe;AAChD,MAAId,MAAM,GAAG,EAAb;AAEAA,EAAAA,MAAM,CAACI,IAAP,CACI;AACIC,IAAAA,KAAK,EAAE,MADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,MAHf;AAIIC,IAAAA,GAAG,EAAE,MAJT;AAKIC,IAAAA,KAAK,EAAE,MALX;AAMIC,IAAAA,KAAK,EAAE;AANX,GADJ;AAUA,QAAMM,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAAb;AACAE,EAAAA,IAAI,CAACL,OAAL,CAAaC,OAAO,IAAI;AACpBZ,IAAAA,MAAM,CAACI,IAAP,CACI;AACIC,MAAAA,KAAK,EAAEO,OADX;AAEIN,MAAAA,KAAK,EAAE,EAFX;AAGIC,MAAAA,SAAS,EAAEK,OAHf;AAIIJ,MAAAA,GAAG,EAAEI,OAJT;AAKIF,MAAAA,KAAK,EAAE;AALX,KADJ;AASH,GAVD,EAdgD,CA0BhD;;AACA,SAAOV,MAAP;AACH,CA5BM;MAAMwB,qB;AA8Bb,OAAO,MAAMC,cAAc,GAAG,CAACX,SAAD,EAAYY,WAAZ,EAAyBC,aAAzB,EAAwCC,IAAxC,EAA8CC,IAA9C,EAAoDC,WAApD,EAAiEC,WAAjE,KAAiF;AAC3G,MAAI/B,MAAM,GAAG,EAAb;AAEA,QAAMgB,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAAb;AACAE,EAAAA,IAAI,CAACL,OAAL,CAAaC,OAAO,IAAI;AACpBZ,IAAAA,MAAM,CAACI,IAAP,CACI;AACIC,MAAAA,KAAK,EAAEO,OADX;AAEIN,MAAAA,KAAK,EAAE,EAFX;AAGIC,MAAAA,SAAS,EAAEK,OAHf;AAIIJ,MAAAA,GAAG,EAAEI,OAJT;AAKIF,MAAAA,KAAK,EAAE;AALX,KADJ;AASH,GAVD;AAYAV,EAAAA,MAAM,CAACI,IAAP,CACI;AACIC,IAAAA,KAAK,EAAG,GAAEyB,WAAY,EAD1B;AAEIxB,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,MAHf;AAIIC,IAAAA,GAAG,EAAE,MAJT;AAKIE,IAAAA,KAAK,EAAE,QALX;AAMIS,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf,kBAAyB,QAAC,MAAD;AAAQ,MAAA,OAAO,EAC3CC,CAAD,IAAO;AAAEG,QAAAA,WAAW,CAACL,MAAD,CAAX;AAAqB,OADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANrC,GADJ;AAYArB,EAAAA,MAAM,CAACI,IAAP,CACI;AACIC,IAAAA,KAAK,EAAG,GAAE0B,WAAY,EAD1B;AAEIzB,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,QAHf;AAIIC,IAAAA,GAAG,EAAE,QAJT;AAKIE,IAAAA,KAAK,EAAE,QALX;AAMIS,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOC,MAAP,EAAeC,KAAf,kBAAyB,QAAC,MAAD;AAAQ,MAAA,OAAO,EAC3CC,CAAD,IAAO;AAAEI,QAAAA,aAAa,CAACN,MAAD,EAASO,IAAT,EAAeC,IAAf,CAAb;AAAmC,OADf;AAAA,sBAE5BE,WAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AANrC,GADJ,EA5B2G,CAwC3G;;AACA,SAAO/B,MAAP;AACH,CA1CM;MAAMyB,c;AA4Cb,OAAO,MAAMO,kBAAkB,GAAG,CAAClB,SAAD,EAAac,IAAb,EAAmBC,IAAnB,EAAyBC,WAAzB,EAAsCC,WAAtC,KAAsD;AACpF,MAAI/B,MAAM,GAAG,EAAb;AAEAA,EAAAA,MAAM,CAACI,IAAP,CACI;AACIC,IAAAA,KAAK,EAAE,MADX;AAEIC,IAAAA,KAAK,EAAE,EAFX;AAGIC,IAAAA,SAAS,EAAE,MAHf;AAIIC,IAAAA,GAAG,EAAE,MAJT;AAKIE,IAAAA,KAAK,EAAE;AALX,GADJ;AASA,QAAMM,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAAb;AACAE,EAAAA,IAAI,CAACL,OAAL,CAAaC,OAAO,IAAI;AACpBZ,IAAAA,MAAM,CAACI,IAAP,CACI;AACIC,MAAAA,KAAK,EAAEO,OADX;AAEIN,MAAAA,KAAK,EAAE,EAFX;AAGIC,MAAAA,SAAS,EAAEK,OAHf;AAIIJ,MAAAA,GAAG,EAAEI,OAJT;AAKIF,MAAAA,KAAK,EAAE;AALX,KADJ;AASH,GAVD,EAboF,CAyBpF;;AACA,SAAOV,MAAP;AACH,CA3BM,C,CA6BP;;MA7BagC,kB;AA8Bb,OAAO,MAAMC,WAAW,GAAG,CAACC,gBAAD,EAAmBC,YAAnB,KAAoC;AAE3D,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,SAAS,GAAG,GAAhB;AAEA,MAAIC,KAAK,GAAG,IAAIC,IAAJ,EAAZ;AACA,MAAIC,QAAQ,GAAG,IAAID,IAAJ,CAASD,KAAT,CAAf;AACAE,EAAAA,QAAQ,CAACC,OAAT,CAAiBD,QAAQ,CAACE,OAAT,KAAqBP,YAAtC;AACAG,EAAAA,KAAK,CAACG,OAAN,CAAcH,KAAK,CAACI,OAAN,KAAkBR,gBAAhC;AAEA,MAAIS,KAAK,GAAGL,KAAK,CAACI,OAAN,EAAZ;AACA,MAAIE,MAAM,GAAGN,KAAK,CAACO,QAAN,KAAmB,CAAhC;AACA,MAAIC,KAAK,GAAGR,KAAK,CAACS,WAAN,EAAZ;AAEA,MAAIC,KAAK,GAAGR,QAAQ,CAACE,OAAT,EAAZ;AACA,MAAIO,MAAM,GAAGT,QAAQ,CAACK,QAAT,KAAsB,CAAnC;AACA,MAAIK,KAAK,GAAGV,QAAQ,CAACO,WAAT,EAAZ;AAGA,MAAII,UAAU,GAAI,GAAEL,KAAM,GAAET,SAAU,GAAEO,MAAM,GAAG,EAAT,GAAe,IAAGA,MAAO,EAAzB,GAA8B,GAAEA,MAAO,EAAE,GAAEP,SAAU,GAAEM,KAAM,WAArG;AACA,MAAIS,QAAQ,GAAI,GAAEF,KAAM,GAAEb,SAAU,GAAEY,MAAM,GAAG,EAAT,GAAe,IAAGA,MAAO,EAAzB,GAA8B,GAAEA,MAAO,EAAE,GAAEZ,SAAU,GAAEW,KAAM,WAAnG;AAEAZ,EAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBvC,MAAM,CAACsD,UAAD,CAAN,CAAmBE,WAAnB,CAA+B,KAA/B,EAAsCC,KAAtC,CAA4C,GAA5C,EAAiD,CAAjD,IAAsD,GAAzE;AACAlB,EAAAA,aAAa,CAAC,CAAD,CAAb,GAAmBvC,MAAM,CAACuD,QAAD,CAAN,CAAiBC,WAAjB,CAA6B,KAA7B,EAAoCC,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,IAAoD,GAAvE;AAEA,SAAOlB,aAAP;AACH,CA1BM;MAAMH,W;AA4Bb,OAAO,MAAMsB,YAAY,GAAIC,QAAD,IAAc;AACtC,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,QAAQ,GAAG,EAAf,CAFsC,CAGtC;;AACAD,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc5D,MAAM,CAAC2D,QAAD,EAAW,YAAX,CAAN,CAA+BG,QAA/B,CAAwC,CAAxC,EAA2C,MAA3C,CAAd;AACAF,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcD,QAAd,CALsC,CAKhB;;AAEtBE,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcD,QAAQ,CAAC,CAAD,CAAR,CAAYJ,WAAZ,CAAwB,KAAxB,EAA+BC,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,IAA+C,YAA7D;AACAI,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAcD,QAAQ,CAAC,CAAD,CAAR,CAAYJ,WAAZ,CAAwB,KAAxB,EAA+BC,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,IAA+C,YAA7D,CARsC,CAStC;;AACA,SAAOI,QAAP;AACH,CAXM,C,CAaP;;MAbaH,Y;AAcb,OAAO,MAAMK,uBAAuB,GAAIC,cAAD,IAAoB;AACvD,MAAIC,cAAc,GAAG,EAArB;;AAEA,MAAI;AACAA,IAAAA,cAAc,CAAC,CAAD,CAAd,GAAoBD,cAAc,CAAC,CAAD,CAAd,CAAkBR,WAAlB,CAA8B,KAA9B,EAAqCC,KAArC,CAA2C,GAA3C,EAAgD,CAAhD,IAAqD,GAAzE;AACAQ,IAAAA,cAAc,CAAC,CAAD,CAAd,GAAoBD,cAAc,CAAC,CAAD,CAAd,CAAkBR,WAAlB,CAA8B,KAA9B,EAAqCC,KAArC,CAA2C,GAA3C,EAAgD,CAAhD,IAAqD,GAAzE;AACH,GAHD,CAIA,MAAM,CAAG;;AACT,SAAOQ,cAAP;AACH,CATM;MAAMF,uB;AAWb,OAAO,MAAMG,YAAY,GAAIC,QAAD,IAAc;AACtC,MAAIC,UAAJ;;AACA,MAAID,QAAQ,CAACE,OAAT,KAAqB,IAAzB,EAA+B;AAC3B,UAAMC,IAAI,GAAGH,QAAQ,CAACG,IAAtB;AAEAF,IAAAA,UAAU,GAAGE,IAAI,CAACC,GAAL,CAASC,GAAG,IAAI;AACzB,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIC,QAAQ,GAAG1E,MAAM,CAACwE,GAAG,CAACG,MAAJ,CAAWC,WAAZ,CAArB;AACA,UAAIC,aAAa,GAAGH,QAAQ,CAACI,GAAT,CAAa,IAAb,EAAmBC,MAAnB,CAA0B,qBAA1B,CAApB;AACA,UAAIC,aAAa,GAAGN,QAAQ,CAACI,GAAT,CAAa,IAAb,EAAmBC,MAAnB,CAA0B,UAA1B,CAApB;AACA,UAAIE,GAAG,GAAGD,aAAa,CAACvB,KAAd,CAAoB,GAApB,CAAV;AACA,UAAIyB,GAAG,GAAGD,GAAG,CAAC,CAAD,CAAH,GAAS,GAAT,GAAeA,GAAG,CAAC,CAAD,CAA5B,CANyB,CAOzB;;AAEAR,MAAAA,IAAI,GAAG;AACH,eAAQ,GAAGD,GAAG,CAACG,MAAJ,CAAWQ,SAAU,KAAIN,aAAc,EAD/C;AAEH,gBAAQK,GAFL;AAGH,gBAAQL,aAHL;AAIH,qBAAcO,UAAU,CAACZ,GAAG,CAACG,MAAJ,CAAWQ,SAAZ,CAJrB;AAKH,iBAASX,GAAG,CAACG,MAAJ,CAAWU;AALjB,OAAP;AAOA,aAAOZ,IAAP;AACH,KAjBY,CAAb,CAH2B,CAqB3B;AACH,GAtBD,MAuBK;AACDa,IAAAA,OAAO,CAACC,GAAR,CAAYpB,QAAZ;AACH;;AACD,SAAOC,UAAP;AACH,CA7BM;MAAMF,Y;AAgCb,OAAO,MAAMsB,UAAU,GAAIrB,QAAD,IAAc;AACpC,MAAIC,UAAJ;;AACA,MAAID,QAAQ,CAACE,OAAT,KAAqB,IAAzB,EAA+B;AAC3B,UAAMC,IAAI,GAAGH,QAAQ,CAACG,IAAtB;AAEAF,IAAAA,UAAU,GAAGE,IAAI,CAACC,GAAL,CAASC,GAAG,IAAI;AACzB,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIgB,cAAc,GAAIzF,MAAM,CAACwE,GAAG,CAACG,MAAJ,CAAWc,cAAZ,CAAP,CAAoCX,GAApC,CAAwC,IAAxC,EAA8CC,MAA9C,CAAqD,qBAArD,CAArB;AACA,UAAIW,YAAY,GAAI1F,MAAM,CAACwE,GAAG,CAACG,MAAJ,CAAWe,YAAZ,CAAP,CAAkCZ,GAAlC,CAAsC,IAAtC,EAA4CC,MAA5C,CAAmD,qBAAnD,CAAnB,CAHyB,CAIzB;AACA;;AAEAN,MAAAA,IAAI,GAAG;AACH,eAAOD,GAAG,CAACG,MAAJ,CAAWgB,KADf;AAEH,gBAAQnB,GAAG,CAACG,MAAJ,CAAWiB,IAFhB;AAGH,sBAAcH,cAHX;AAIH,oBAAYC,YAJT;AAKH,kBAAUlB,GAAG,CAACG,MAAJ,CAAWgB,KALlB;AAMH,iBAASnB,GAAG,CAACG,MAAJ,CAAWkB,KANjB;AAOH,iBAASrB,GAAG,CAACG,MAAJ,CAAWmB;AAPjB,OAAP;AASA,aAAOrB,IAAP;AACH,KAjBY,CAAb,CAH2B,CAqB3B;AACH,GAtBD,MAuBK;AACDa,IAAAA,OAAO,CAACC,GAAR,CAAYpB,QAAZ;AACH;;AACD,SAAOC,UAAP;AACH,CA7BM;OAAMoB,U;AA+Bb,OAAO,MAAMO,kBAAkB,GAAG,CAAC9E,SAAD,EAAY+E,OAAZ,KAAwB;AACtD,QAAM7E,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAAb;AACA,MAAIgF,WAAW,GAAG,EAAlB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACAA,EAAAA,WAAW,CAACf,SAAZ,GAAwB,CAAxB;;AAEA,OAAK,IAAI9E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,QAAIC,CAAJ;AACAD,IAAAA,CAAC,GAAG,EAAJ,GAASC,CAAC,GAAI,IAAGD,CAAE,EAAnB,GAAuBC,CAAC,GAAGD,CAA3B;AACA6F,IAAAA,WAAW,CAAE,GAAE5F,CAAE,KAAN,CAAX,GAAyB,CAAzB;AACH;;AAEDa,EAAAA,IAAI,CAACL,OAAL,CAAaC,OAAO,IAAI;AACpB,QAAIoF,MAAM,GAAG,EAAb;AACA/E,IAAAA,MAAM,CAACgF,MAAP,CAAcD,MAAd,EAAsBD,WAAtB;AACAC,IAAAA,MAAM,CAAChB,SAAP,GAAmBpE,OAAnB;AAEAiF,IAAAA,OAAO,CAAClF,OAAR,CAAgBuF,QAAQ,IAAI;AACxB,UAAIA,QAAQ,CAAClB,SAAT,KAAuBpE,OAA3B,EAAoC;AAChCoF,QAAAA,MAAM,CAACE,QAAQ,CAACC,IAAV,CAAN,GAAwBD,QAAQ,CAAChB,KAAjC;AACAc,QAAAA,MAAM,CAAC,KAAD,CAAN,GAAgBE,QAAQ,CAAClB,SAAzB;AACH;AACJ,KALD;AAMAc,IAAAA,WAAW,CAAC1F,IAAZ,CAAiB4F,MAAjB;AACH,GAZD;AAaA,SAAOF,WAAP;AACH,CA1BM;OAAMF,kB;AA6Bb,OAAO,MAAMQ,kBAAkB,GAAG,CAACtF,SAAD,EAAY+E,OAAZ,KAAwB;AACtD,QAAM7E,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,CAAb;AAEA,MAAIuF,QAAQ,GAAG,EAAf;AAAA,MAAmBC,MAAM,GAAG,EAA5B;AAAA,MAAgCR,WAAW,GAAG,EAA9C;;AAEA,QAAMS,UAAU,GAAIC,IAAD,IAAU;AACzB,QAAIA,IAAI,CAACC,IAAL,KAAcH,MAAlB,EAA0B;AAAE,aAAO,IAAP;AAAc;;AAC1C,WAAO,KAAP;AACH,GAHD;;AAKAT,EAAAA,OAAO,CAAClF,OAAR,CAAgBC,OAAO,IAAI;AACvB,QAAIA,OAAO,CAAC6F,IAAR,KAAiBJ,QAArB,EAA+B,CAAG,CAAlC,MAEK;AACDA,MAAAA,QAAQ,GAAGzF,OAAO,CAAC6F,IAAnB;AACAH,MAAAA,MAAM,GAAG1F,OAAO,CAAC6F,IAAjB;AAEA,UAAIC,SAAS,GAAG,EAAhB;AAEA1F,MAAAA,IAAI,CAACL,OAAL,CAAaC,OAAO,IAAI;AACpB8F,QAAAA,SAAS,CAAC9F,OAAD,CAAT,GAAqB,CAArB;AACH,OAFD;AAIA,UAAI+F,SAAS,GAAGd,OAAO,CAACe,MAAR,CAAeL,UAAf,CAAhB;AAEAI,MAAAA,SAAS,CAACvC,GAAV,CAAcC,GAAG,IAAI;AACjBqC,QAAAA,SAAS,CAAC,KAAD,CAAT,GAAmBrC,GAAG,CAACoC,IAAvB;AACAC,QAAAA,SAAS,CAAC,MAAD,CAAT,GAAoBrC,GAAG,CAACoC,IAAxB;AACAC,QAAAA,SAAS,CAACrC,GAAG,CAACW,SAAL,CAAT,GAA2BX,GAAG,CAACa,KAA/B;AACA,eAAOwB,SAAP;AACH,OALD;AAMAZ,MAAAA,WAAW,CAAC1F,IAAZ,CAAiBsG,SAAjB;AACH;AACJ,GAvBD;AAwBA,SAAOZ,WAAP;AACH,CAnCM;OAAMM,kB;AAsCb,OAAO,MAAMS,gBAAgB,GAAG,CAACC,QAAD,EAAWC,SAAX,KAAyB;AACrD5B,EAAAA,OAAO,CAACC,GAAR,CAAY0B,QAAZ,EADqD,CAErD;;AACA,MAAIE,YAAY,GAAG,EAAnB;AACA,QAAMC,IAAI,GAAGhG,MAAM,CAACC,IAAP,CAAY4F,QAAQ,CAAC,CAAD,CAApB,CAAb;AACA,QAAM9F,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAY6F,SAAZ,CAAb;AACA,MAAIG,UAAU,GAAG;AACbC,IAAAA,KAAK,EAAE,EADM;AAEbC,IAAAA,MAAM,EAAE,CAFK;AAGb9G,IAAAA,KAAK,EAAE;AAHM,GAAjB,CANqD,CAWrD;AACA;AACA;;AAEAwG,EAAAA,QAAQ,CAACnG,OAAT,CAAiBC,OAAO,IAAI;AACxB,QAAIyG,WAAW,GAAG,EAAlB;AACAA,IAAAA,WAAW,CAACjH,IAAZ,CAAiBQ,OAAO,CAAC,MAAD,CAAxB;AAEAI,IAAAA,IAAI,CAACL,OAAL,CAAa2G,QAAQ,IAAI;AAErBL,MAAAA,IAAI,CAACtG,OAAL,CAAauF,QAAQ,IAAI;AACrB;AACA;AACA;AAEA,YAAIqB,MAAJ;;AAEA,YAAIrB,QAAQ,KAAKoB,QAAjB,EAA2B;AACvB,cAAI;AACA;AAEAC,YAAAA,MAAM,GAAGtC,UAAU,CAACrE,OAAO,CAACsF,QAAD,CAAR,CAAnB;AACH,WAJD,CAKA,MAAM;AACFf,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAmC,YAAAA,MAAM,GAAGtC,UAAU,CAAC,CAAD,CAAnB;AACH,WATsB,CAWvB;;;AACAoC,UAAAA,WAAW,CAACjH,IAAZ,CAAiBmH,MAAjB;AACH;AACJ,OArBD;AAuBH,KAzBD;AA0BAP,IAAAA,YAAY,CAAC5G,IAAb,CAAkBiH,WAAlB;AACH,GA/BD;AAiCAH,EAAAA,UAAU,CAACC,KAAX,GAAmBH,YAAnB;AACAE,EAAAA,UAAU,CAACE,MAAX,GAAoBJ,YAAY,CAACQ,MAAjC;AACAN,EAAAA,UAAU,CAAC5G,KAAX,GAAmB0G,YAAY,CAAC,CAAD,CAAZ,CAAgBQ,MAAnC;AAEA,SAAON,UAAP;AACH,CArDM;OAAML,gB;AAwDb,OAAO,MAAMY,mBAAmB,GAAG,CAACX,QAAD,EAAWC,SAAX,EAAsBW,QAAtB,EAAgCC,QAAhC,EAA0CC,MAA1C,EAAkDC,MAAlD,EAA0DC,QAA1D,KAAuE;AAEtGC,EAAAA,KAAK,CAACD,QAAD,CAAL,CACKE,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,WAAJ,EADjB,EAEKF,IAFL,CAEUG,MAAM,IAAI;AACZrI,IAAAA,YAAY,CAACsI,aAAb,CAA2BD,MAA3B,EACKH,IADL,CACUK,QAAQ,IAAI;AAEd;AACA,UAAIC,OAAO,GAAGzB,gBAAgB,CAACC,QAAD,EAAWC,SAAX,CAA9B;AAEA,YAAMwB,CAAC,GAAGF,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkBC,KAAlB,CAAyB,GAAEf,QAAS,GAAEC,QAAS,IAAGC,MAAO,GAAEC,MAAM,GAAGS,OAAO,CAAClB,MAAO,EAAnF,CAAV;AAEAmB,MAAAA,CAAC,CAACG,KAAF,CAAQJ,OAAO,CAACnB,KAAhB;AAEAkB,MAAAA,QAAQ,CAACM,WAAT,GACKX,IADL,CACU,UAAUY,IAAV,EAAgB;AAClB,YAAIC,MAAM,CAACC,SAAP,IAAoBD,MAAM,CAACC,SAAP,CAAiBC,gBAAzC,EAA2D;AACvDF,UAAAA,MAAM,CAACC,SAAP,CAAiBC,gBAAjB,CAAkCH,IAAlC,EAAwC,UAAxC;AACH,SAFD,MAIK;AACD,cAAII,GAAG,GAAGH,MAAM,CAACI,GAAP,CAAWC,eAAX,CAA2BN,IAA3B,CAAV;AACA,cAAIO,CAAC,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAR;AACAD,UAAAA,QAAQ,CAACE,IAAT,CAAcC,WAAd,CAA0BJ,CAA1B;AACAA,UAAAA,CAAC,CAACK,IAAF,GAASR,GAAT;AACAG,UAAAA,CAAC,CAACM,QAAF,GAAa3B,QAAb;AACAqB,UAAAA,CAAC,CAACO,KAAF;AACAb,UAAAA,MAAM,CAACI,GAAP,CAAWU,eAAX,CAA2BX,GAA3B;AACAI,UAAAA,QAAQ,CAACE,IAAT,CAAcM,WAAd,CAA0BT,CAA1B;AACH;AACJ,OAhBL;AAiBH,KA3BL,EA4BKU,KA5BL,CA4BWC,GAAG,IAAI3E,OAAO,CAAC4E,KAAR,CAAcD,GAAd,CA5BlB;AA6BH,GAhCL;AAiCH,CAnCM;OAAMrC,mB;AAqCb,OAAO,MAAMuC,iBAAiB,GAAIC,OAAD,IAAa;AAC1C,MAAIC,SAAS,GAAG,EAAhB;AAEA,QAAMC,OAAO,GAAG,IAAI5H,IAAJ,EAAhB;AACA,QAAM6H,OAAO,GAAE,IAAI7H,IAAJ,CAAU1C,MAAM,CAACsK,OAAD,CAAN,CAAgBvF,MAAhB,CAAuB,qBAAvB,CAAV,CAAf,CAJ0C,CAI8B;;AAExEqF,EAAAA,OAAO,CAACtJ,OAAR,CAAgBC,OAAO,IAAI;AACvB,QAAI;AACA,UAAIyJ,OAAO,GAAG,IAAI9H,IAAJ,CAAS3B,OAAO,CAAC,UAAD,CAAhB,CAAd;;AAEA,UAAGyJ,OAAO,GAAGD,OAAb,EAAqB;AACjBF,QAAAA,SAAS,CAAC9J,IAAV,CAAeQ,OAAf;AACH;AACJ,KAND,CAOA,MAAM,CAAG;AACZ,GATD;AAWA,SAAOsJ,SAAP;AACH,CAlBM;OAAMF,iB;AAoBb,OAAO,MAAMM,kBAAkB,GAAIC,UAAD,IAAe;AAEjD,MAAIC,WAAW,GAAGD,UAAU,CAACnG,GAAX,CAAeC,GAAG,IAAI;AACpC,QAAIC,IAAI,GAAG,EAAX;AAEAA,IAAAA,IAAI,GAAG;AACHlD,MAAAA,IAAI,EAAEiD,GADH;AAEHqE,MAAAA,KAAK,EAAErE;AAFJ,KAAP;AAIA,WAAOC,IAAP;AACH,GARiB,CAAlB;;AAUA,QAAMmG,UAAU,GAAIC,CAAD,IAAO;AACtB,QAAIC,CAAC,GAAGD,CAAC,CAACpH,KAAF,CAAQ,IAAR,CAAR;AACA,WAAO,IAAIf,IAAJ,CAASoI,CAAC,CAAC,CAAD,CAAV,EAAeA,CAAC,CAAC,CAAD,CAAD,GAAK,CAApB,EAAuBA,CAAC,CAAC,CAAD,CAAxB,EAA6BA,CAAC,CAAC,CAAD,CAA9B,EAAmCA,CAAC,CAAC,CAAD,CAApC,CAAP;AACD,GAHH;;AAKA,QAAMC,OAAO,GAAG,CACZ;AACEvK,IAAAA,KAAK,EAAE,WADT;AAEEE,IAAAA,SAAS,EAAE,WAFb;AAGEsK,IAAAA,OAAO,EAAEL,WAHX;AAIEM,IAAAA,UAAU,EAAE,MAJd;AAKEC,IAAAA,YAAY,EAAE,IALhB;AAMEC,IAAAA,QAAQ,EAAE,CAACtC,KAAD,EAAQrH,MAAR,KAAmBA,MAAM,CAAC2D,SAAP,CAAiBiG,QAAjB,CAA0BvC,KAA1B,CAN/B;AAOEpI,IAAAA,KAAK,EAAE;AAPT,GADY,EAUZ;AACED,IAAAA,KAAK,EAAE,OADT;AAEEE,IAAAA,SAAS,EAAE,OAFb;AAGE2K,IAAAA,MAAM,EAAE,CAAC/B,CAAD,EAAIwB,CAAJ,KAAUxB,CAAC,CAACjE,KAAF,GAAUyF,CAAC,CAACzF;AAHhC,GAVY,EAeZ;AACI7E,IAAAA,KAAK,EAAE,MADX;AAEIE,IAAAA,SAAS,EAAE,MAFf;AAGI2K,IAAAA,MAAM,EAAE,CAAC/B,CAAD,EAAIwB,CAAJ,KAAUF,UAAU,CAACtB,CAAC,CAAChD,IAAH,CAAV,GAAqBsE,UAAU,CAACE,CAAC,CAACxE,IAAH;AAHrD,GAfY,CAAhB;AAsBE,SAAOyE,OAAP;AACD,CAxCM;OAAMN,kB","sourcesContent":["import { Button } from 'antd';\r\nimport moment from 'moment';\r\nimport XlsxPopulate from 'xlsx-populate'\r\n\r\n\r\nexport const TableColumbTimeAsRow = () => {\r\n    let Columb = []\r\n    let TimeRow = []\r\n\r\n    for (let i = 0; i < 24; i++) {\r\n        let n\r\n        i < 10 ? n = `0${i}` : n = i\r\n        TimeRow.push(`${n}:00`)\r\n    }\r\n\r\n    Columb.push(\r\n        {\r\n            title: 'Parameter',\r\n            width: 100,\r\n            dataIndex: 'Parameter',\r\n            key: 'Parameter',\r\n            fixed: 'left',\r\n            align: 'center',\r\n        })\r\n\r\n    TimeRow.forEach(element => {\r\n        Columb.push(\r\n            {\r\n                title: element,\r\n                width: 70,\r\n                dataIndex: element,\r\n                key: element,\r\n                align: 'center',\r\n            }\r\n        )\r\n    });\r\n    return Columb\r\n}\r\n\r\nexport const TableColumbLabelAsRowG2 = (Datamodel, InputBagCallBack) => {\r\n    let Columb = []\r\n\r\n    Columb.push(\r\n        {\r\n            title: 'Time',\r\n            width: 60,\r\n            dataIndex: 'Time',\r\n            key: 'Time',\r\n            fixed: 'left',\r\n            align: 'center',\r\n        })\r\n\r\n    const name = Object.keys(Datamodel)\r\n    name.forEach(element => {\r\n        Columb.push(\r\n            {\r\n                title: element,\r\n                width: 70,\r\n                dataIndex: element,\r\n                key: element,\r\n                align: 'center',\r\n            }\r\n        )\r\n    })\r\n\r\n    Columb.push(\r\n        {\r\n            title: 'View',\r\n            width: 60,\r\n            dataIndex: 'View',\r\n            key: 'View',\r\n            align: 'center',\r\n            render: (text, record, index) => <Button onClick={\r\n                (e) => { InputBagCallBack(record) }\r\n            } > Click </Button>,\r\n        })\r\n\r\n    //console.log(Columb);\r\n    return Columb\r\n}\r\n\r\nexport const TableColumbLabelAsRow = (Datamodel) => {\r\n    let Columb = []\r\n\r\n    Columb.push(\r\n        {\r\n            title: 'Time',\r\n            width: 60,\r\n            dataIndex: 'Time',\r\n            key: 'Time',\r\n            fixed: 'left',\r\n            align: 'center',\r\n        })\r\n\r\n    const name = Object.keys(Datamodel)\r\n    name.forEach(element => {\r\n        Columb.push(\r\n            {\r\n                title: element,\r\n                width: 70,\r\n                dataIndex: element,\r\n                key: element,\r\n                align: 'center',\r\n            }\r\n        )\r\n    })\r\n\r\n    //console.log(Columb);\r\n    return Columb\r\n}\r\n\r\nexport const TableColumbJob = (Datamodel, Viewhandler, DeleteHandler, line, page, button1name, button2name) => {\r\n    let Columb = []\r\n\r\n    const name = Object.keys(Datamodel)\r\n    name.forEach(element => {\r\n        Columb.push(\r\n            {\r\n                title: element,\r\n                width: 70,\r\n                dataIndex: element,\r\n                key: element,\r\n                align: 'center',\r\n            }\r\n        )\r\n    })\r\n\r\n    Columb.push(\r\n        {\r\n            title: `${button1name}`,\r\n            width: 60,\r\n            dataIndex: 'View',\r\n            key: 'View',\r\n            align: 'center',\r\n            render: (text, record, index) => <Button onClick={\r\n                (e) => { Viewhandler(record) }\r\n            } > Click </Button>,\r\n        })\r\n\r\n    Columb.push(\r\n        {\r\n            title: `${button2name}`,\r\n            width: 60,\r\n            dataIndex: 'Delete',\r\n            key: 'Delete',\r\n            align: 'center',\r\n            render: (text, record, index) => <Button onClick={\r\n                (e) => { DeleteHandler(record, line, page) }\r\n            } > {button2name} </Button>,\r\n        })\r\n\r\n    //console.log(Columb);\r\n    return Columb\r\n}\r\n\r\nexport const TableColumbJobHome = (Datamodel,  line, page, button1name, button2name) => {\r\n    let Columb = []\r\n\r\n    Columb.push(\r\n        {\r\n            title: 'Line',\r\n            width: 70,\r\n            dataIndex: 'Line',\r\n            key: 'Line',\r\n            align: 'center',\r\n        })\r\n\r\n    const name = Object.keys(Datamodel)\r\n    name.forEach(element => {\r\n        Columb.push(\r\n            {\r\n                title: element,\r\n                width: 70,\r\n                dataIndex: element,\r\n                key: element,\r\n                align: 'center',\r\n            }\r\n        )\r\n    })\r\n\r\n    //console.log(Columb);\r\n    return Columb\r\n}\r\n\r\n//offset initial date from today and offset ending date by today\r\nexport const GetDateTime = (OffsetInitialDay, OffsetDayEnd) => {\r\n\r\n    let DateTimeArray = []\r\n    let separator = '-'\r\n\r\n    let today = new Date()\r\n    let tomorrow = new Date(today)\r\n    tomorrow.setDate(tomorrow.getDate() + OffsetDayEnd)\r\n    today.setDate(today.getDate() - OffsetInitialDay)\r\n\r\n    let date1 = today.getDate();\r\n    let month1 = today.getMonth() + 1;\r\n    let year1 = today.getFullYear();\r\n\r\n    let date2 = tomorrow.getDate();\r\n    let month2 = tomorrow.getMonth() + 1;\r\n    let year2 = tomorrow.getFullYear();\r\n\r\n\r\n    let Start_time = `${year1}${separator}${month1 < 10 ? `0${month1}` : `${month1}`}${separator}${date1} 00:00:00`\r\n    let End_time = `${year2}${separator}${month2 < 10 ? `0${month2}` : `${month2}`}${separator}${date2} 00:00:00`\r\n\r\n    DateTimeArray[0] = moment(Start_time).toISOString(false).split('.')[0] + \"Z\"\r\n    DateTimeArray[1] = moment(End_time).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n    return DateTimeArray\r\n}\r\n\r\nexport const SetDateRange = (datetime) => {\r\n    let DateTime = []\r\n    let ReturnDT = []\r\n    //convert datepicker value to Z format\r\n    DateTime[0] = moment(datetime, \"DD-MM-YYYY\").subtract(1, 'days')\r\n    DateTime[1] = datetime//moment(datetime, \"DD-MM-YYYY\").add(1, 'days');\r\n\r\n    ReturnDT[0] = DateTime[0].toISOString(false).split('T')[0] + \"T16:00:00Z\"\r\n    ReturnDT[1] = DateTime[1].toISOString(false).split('T')[0] + \"T15:00:00Z\"\r\n    //console.log(ReturnDT)\r\n    return ReturnDT\r\n}\r\n\r\n//convert datetimepicker value to Z format\r\nexport const ConvertMonentToDateTime = (momentDateTime) => {\r\n    let DateTimeReturn = []\r\n\r\n    try {\r\n        DateTimeReturn[0] = momentDateTime[0].toISOString(false).split('.')[0] + \"Z\"\r\n        DateTimeReturn[1] = momentDateTime[1].toISOString(false).split('.')[0] + \"Z\"\r\n    }\r\n    catch { }\r\n    return DateTimeReturn\r\n}\r\n\r\nexport const DataSortTime = (response) => {\r\n    let DataReturn\r\n    if (response.success === true) {\r\n        const data = response.data\r\n\r\n        DataReturn = data.map(obj => {\r\n            let cobj = []\r\n            let date_new = moment(obj.fields.DateCreated);\r\n            let DateComponent = date_new.utc(true).format('DD-MM-YYYY HH:mm:ss')\r\n            let TimeComponent = date_new.utc(true).format('HH:mm:ss')\r\n            let ar0 = TimeComponent.split(':')\r\n            let ar1 = ar0[0] + ':' + ar0[1]\r\n            // let SV = obj.fields.\r\n\r\n            cobj = {\r\n                'key': `${ obj.fields.Parameter}  ${DateComponent}`,\r\n                'time': ar1,\r\n                'date': DateComponent,\r\n                'Parameter':  parseFloat(obj.fields.Parameter),\r\n                'Value': obj.fields.Value,\r\n            }\r\n            return cobj\r\n        })\r\n        //console.log(DataReturn);\r\n    }\r\n    else {\r\n        console.log(response)\r\n    }\r\n    return DataReturn\r\n}\r\n\r\n\r\nexport const ReportSort = (response) => {\r\n    let DataReturn\r\n    if (response.success === true) {\r\n        const data = response.data\r\n\r\n        DataReturn = data.map(obj => {\r\n            let cobj = []\r\n            let DateTime_Start = (moment(obj.fields.DateTime_Start)).utc(true).format('DD-MM-YYYY HH:mm:ss')\r\n            let DateTime_End = (moment(obj.fields.DateTime_End)).utc(true).format('DD-MM-YYYY HH:mm:ss')\r\n            // let ar0 = TimeComponent.split(':')\r\n            // let ar1 = ar0[0] + ':' + ar0[1]\r\n\r\n            cobj = {\r\n                'key': obj.fields.Info1,\r\n                'Line': obj.fields.Line,\r\n                'Start Time': DateTime_Start,\r\n                'End Time': DateTime_End,\r\n                'Job No': obj.fields.Info1,\r\n                'Grade': obj.fields.Info2,\r\n                'Color': obj.fields.Info3,\r\n            }\r\n            return cobj\r\n        })\r\n        //console.log(DataReturn);\r\n    }\r\n    else {\r\n        console.log(response)\r\n    }\r\n    return DataReturn\r\n}\r\n\r\nexport const LogDataMappingTime = (Datamodel, RawData) => {\r\n    const name = Object.keys(Datamodel)\r\n    let ReturnValue = []\r\n    let bufferModel = {}\r\n    bufferModel.Parameter = 0\r\n\r\n    for (let i = 0; i < 24; i++) {\r\n        let n\r\n        i < 10 ? n = `0${i}` : n = i\r\n        bufferModel[`${n}:00`] = 0\r\n    }\r\n\r\n    name.forEach(element => {\r\n        let Buffer = {}\r\n        Object.assign(Buffer, bufferModel)\r\n        Buffer.Parameter = element\r\n\r\n        RawData.forEach(element2 => {\r\n            if (element2.Parameter === element) {\r\n                Buffer[element2.time] = element2.Value\r\n                Buffer['key'] = element2.Parameter\r\n            }\r\n        })\r\n        ReturnValue.push(Buffer)\r\n    })\r\n    return ReturnValue\r\n}\r\n\r\n\r\nexport const LogDataMappingName = (Datamodel, RawData) => {\r\n    const name = Object.keys(Datamodel)\r\n\r\n    let prevtime = [], period = \"\", ReturnValue = []\r\n\r\n    const parasearch = (item) => {\r\n        if (item.date === period) { return true; }\r\n        return false\r\n    }\r\n\r\n    RawData.forEach(element => {\r\n        if (element.date === prevtime) { }\r\n\r\n        else {\r\n            prevtime = element.date\r\n            period = element.date\r\n\r\n            let data_buf3 = {}\r\n\r\n            name.forEach(element => {\r\n                data_buf3[element] = 0\r\n            });\r\n\r\n            let data_buf2 = RawData.filter(parasearch)\r\n\r\n            data_buf2.map(obj => {\r\n                data_buf3['key'] = obj.date\r\n                data_buf3['Time'] = obj.date\r\n                data_buf3[obj.Parameter] = obj.Value\r\n                return data_buf3\r\n            })\r\n            ReturnValue.push(data_buf3)\r\n        }\r\n    })\r\n    return ReturnValue\r\n}\r\n\r\n\r\nexport const SortToArrayExcel = (DataJson, DataModel) => {\r\n    console.log(DataJson);\r\n    // let bufferArray = []\r\n    let bufferArray2 = []\r\n    const para = Object.keys(DataJson[1])\r\n    const name = Object.keys(DataModel)\r\n    let ReturnPara = {\r\n        Array: [],\r\n        height: 1,\r\n        width: 1\r\n    }\r\n    // console.log(para);\r\n    // console.log(name);\r\n    // bufferArray.push(DataJson[1]['Time'])\r\n\r\n    DataJson.forEach(element => {\r\n        let bufferArray = []\r\n        bufferArray.push(element['Time'])\r\n\r\n        name.forEach(element1 => {\r\n\r\n            para.forEach(element2 => {\r\n                // console.log('new');\r\n                // console.log(element1);\r\n                // console.log(element2);\r\n\r\n                let number\r\n\r\n                if (element2 === element1) {\r\n                    try {\r\n                        //console.log(element2);\r\n\r\n                        number = parseFloat(element[element2])\r\n                    }\r\n                    catch {\r\n                        console.log('error');\r\n                        number = parseFloat(0)\r\n                    }\r\n\r\n                    //console.log(LogValue['LogC3'][1][element2])\r\n                    bufferArray.push(number)\r\n                }\r\n            })\r\n\r\n        })\r\n        bufferArray2.push(bufferArray)\r\n    });\r\n\r\n    ReturnPara.Array = bufferArray2\r\n    ReturnPara.height = bufferArray2.length\r\n    ReturnPara.width = bufferArray2[0].length\r\n\r\n    return ReturnPara\r\n}\r\n\r\n\r\nexport const ExportExcelWorkBook = (DataJson, DataModel, startCol, startRow, endCol, endRow, FileName) => {\r\n\r\n    fetch(FileName)\r\n        .then(res => res.arrayBuffer())\r\n        .then(buffer => {\r\n            XlsxPopulate.fromDataAsync(buffer)\r\n                .then(workbook => {\r\n\r\n                    // r = workbook.sheet(0).cell(\"A8\").value(\"foo\");\r\n                    let setting = SortToArrayExcel(DataJson, DataModel)\r\n\r\n                    const r = workbook.sheet(0).range(`${startCol}${startRow}:${endCol}${endRow + setting.height}`);\r\n\r\n                    r.value(setting.Array);\r\n\r\n                    workbook.outputAsync()\r\n                        .then(function (blob) {\r\n                            if (window.navigator && window.navigator.msSaveOrOpenBlob) {\r\n                                window.navigator.msSaveOrOpenBlob(blob, \"out.xlsx\");\r\n                            }\r\n\r\n                            else {\r\n                                var url = window.URL.createObjectURL(blob);\r\n                                var a = document.createElement(\"a\");\r\n                                document.body.appendChild(a);\r\n                                a.href = url;\r\n                                a.download = FileName;\r\n                                a.click();\r\n                                window.URL.revokeObjectURL(url);\r\n                                document.body.removeChild(a);\r\n                            }\r\n                        });\r\n                })\r\n                .catch(err => console.error(err));\r\n        })\r\n}\r\n\r\nexport const FilterOutEndedJob = (JobList) => {\r\n    let FilterJob = []\r\n\r\n    const Current = new Date()\r\n    const NowTime =new Date( moment(Current).format('DD-MM-yyyy HH:mm:ss')) //when wan to change datetime from (new dete()) to the usual view\r\n\r\n    JobList.forEach(element => {\r\n        try {\r\n            let DateBuf = new Date(element['End Time'])\r\n\r\n            if(DateBuf > NowTime){\r\n                FilterJob.push(element)\r\n            }\r\n        }\r\n        catch { }\r\n    });\r\n\r\n    return FilterJob\r\n}\r\n\r\nexport const VisualizeLogColumb = (DataOption) =>{\r\n    \r\nlet data_filter = DataOption.map(obj => {\r\n    let cobj = []\r\n\r\n    cobj = {\r\n        text: obj,\r\n        value: obj,\r\n    }\r\n    return cobj\r\n})\r\n\r\nconst parseDMYhm = (s) => {\r\n    var b = s.split(/\\D/);\r\n    return new Date(b[2], b[1]-1, b[2], b[3], b[4]);  \r\n  }\r\n\r\nconst columns = [\r\n    {\r\n      title: 'Parameter',\r\n      dataIndex: 'Parameter',\r\n      filters: data_filter,\r\n      filterMode: 'tree',\r\n      filterSearch: true,\r\n      onFilter: (value, record) => record.Parameter.includes(value),\r\n      width: '30%',\r\n    },\r\n    {\r\n      title: 'Value',\r\n      dataIndex: 'Value',\r\n      sorter: (a, b) => a.Value - b.Value,  \r\n    },\r\n    {\r\n        title: 'time',\r\n        dataIndex: 'time',\r\n        sorter: (a, b) => parseDMYhm(a.time) - parseDMYhm(b.time),\r\n      },\r\n  ];\r\n\r\n  return columns\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}