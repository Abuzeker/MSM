{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\MSM-Front\\\\MSM\\\\src\\\\pages\\\\Line\\\\AllLine.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { ReadJob, MSM_RealTime_request, MSM_logdata_request, MSM_EventLog_request } from '../../api';\nimport { DataSortTimeMSM, GetDateTime, LogDataMappingNameMSM, MSM_Realtime_GetDateTime, DateDisplay, EventSortTimeMSM, Find_initial_Time } from '../../DataRequest/LogDataRequestWrap';\nimport { DataSortRT } from '../../DataRequest/RealTimeRequestWrap';\nimport moment from 'moment';\nimport { MSMTable } from '../../DataRequest/DataModel';\nimport { Button, Col, Row, Typography, Statistic, Card, DatePicker, Select } from 'antd';\nimport { DashboardOutlined } from '@ant-design/icons'; // import { Table, TableRow, TableCell } from \"react-table-pdf\";\n// import './home.css'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet DTinitial = GetDateTime(0, 1); // get from yesterday 00:00 to today 00:00\n\nlet DTinitial2 = GetDateTime(7, 1);\nlet ContingRange = MSM_Realtime_GetDateTime(1, 0);\nlet RequestDataOption = ['Line50kg', 'Line1kg', 'Line2kg', 'Line1Ton'];\nlet RequestDateRange = [DTinitial[0], DTinitial[1]];\nlet DailyLogRequestRange = [DTinitial2[0], DTinitial2[1]];\nlet DailyLogSorted = [];\nlet EventLogSorted = [];\nlet TotalCountProduct = [];\nlet DailyRealTime = {\n  'Line50kg': 0,\n  'Line1kg': 0,\n  'Line2kg': 0,\n  'Line1Ton': 0\n};\nlet TotalCount = {\n  'Line50kg': 0,\n  'Line1kg': 0,\n  'Line2kg': 0,\n  'Line1Ton': 0\n};\nlet DailyMorningRealTime = {\n  'Line50kg': 0,\n  'Line1kg': 0,\n  'Line2kg': 0,\n  'Line1Ton': 0\n};\nlet DailyNightRealTime = {\n  'Line50kg': 0,\n  'Line1kg': 0,\n  'Line2kg': 0,\n  'Line1Ton': 0\n};\n\nconst AllLine = () => {\n  _s();\n\n  const {\n    Title\n  } = Typography;\n  const [state, setState] = useState({\n    count: 0\n  });\n  const [sortedInfo, setSortedInfo] = useState({});\n  const [sortedInfo2, setSortedInfo2] = useState({});\n  useEffect(() => {\n    const interval = setInterval(() => {\n      RenderNewData();\n    }, 1000);\n    DailyLogRequest();\n    EvenLogRequest();\n    return () => {\n      clearInterval(interval);\n      console.log('Unmount Effect Line1RT');\n    };\n  }, []);\n\n  const RenderNewData = () => {\n    RealTimeRequest();\n  };\n\n  const DailyLogRequest = async () => {\n    let response = await MSM_logdata_request(RequestDataOption, DailyLogRequestRange[0], DailyLogRequestRange[1]); //  let DailyLogSorted = LogDataMappingTimeMSM(MSMTable,response)   \n\n    DailyLogSorted = LogDataMappingNameMSM(MSMTable, DataSortTimeMSM(response));\n    console.log(DailyLogSorted);\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const EvenLogRequest = async () => {\n    let response = await MSM_EventLog_request(RequestDataOption, DailyLogRequestRange[0], DailyLogRequestRange[1]); //  let DailyLogSorted = LogDataMappingTimeMSM(MSMTable,response)   \n\n    EventLogSorted = EventSortTimeMSM(response);\n    console.log(EventLogSorted);\n    setState(_ref2 => {\n      let {\n        count\n      } = _ref2;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const RealTimeRequest = async () => {\n    let field_name = Object.keys(DailyRealTime);\n    let realtime = await MSM_RealTime_request(RequestDataOption); //console.log(realtime);\n\n    TotalCountProduct = DataSortRT(realtime); //console.log(TotalCountProduct);\n\n    ContingRange = MSM_Realtime_GetDateTime(0, 1);\n    Find_initial_Time() ? ContingRange = MSM_Realtime_GetDateTime(0, 1) : ContingRange = MSM_Realtime_GetDateTime(1, 0);\n    console.log(ContingRange);\n    let responseDaily = await MSM_EventLog_request(RequestDataOption, ContingRange[0], ContingRange[3]);\n    EventLogSorted = EventSortTimeMSM(responseDaily);\n    console.log(EventLogSorted);\n    field_name.forEach(element => {\n      DailyRealTime[`${element}`] = 0;\n      DailyMorningRealTime[`${element}`] = 0;\n      DailyNightRealTime[`${element}`] = 0;\n      EventLogSorted.forEach(element2 => {\n        if (element === element2['Label']) {\n          DailyRealTime[`${element}`]++;\n\n          if (element2['Shift'] === 'Morning') {\n            DailyMorningRealTime[`${element}`]++;\n          } else {\n            DailyNightRealTime[`${element}`]++;\n          }\n        }\n      });\n      TotalCountProduct.forEach(element3 => {\n        if (element === element3['Label']) {\n          TotalCount[`${element}`] = element3.value;\n        }\n      });\n    }); // Find_initial_Time() ? ContingRange = MSM_Realtime_GetDateTime(0, 1) : ContingRange = MSM_Realtime_GetDateTime(1, 0)\n\n    console.log(ContingRange);\n    setState(_ref3 => {\n      let {\n        count\n      } = _ref3;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const handleChangeOverall = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter);\n    setSortedInfo(sorter);\n  };\n\n  const handleChangePertime = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter);\n    setSortedInfo2(sorter);\n  }; // const ChangeDateRange = (value) => {\n  //     // console.log(RequestDateRange);\n  //     RequestDateRange = []\n  //     RequestDateRange = ConvertMonentToDateTime(value)\n  //     // console.log(RequestDateRange);\n  // }\n  // const ChangeOption = (value) => {\n  //     console.log(`selected ${value}`);\n  //     RequestDataOption = []\n  //     RequestDataOption.push(value)\n  //     // console.log(RequestDataOption);\n  // }\n\n\n  const LogColumb = [{\n    title: 'DateTime',\n    width: 50,\n    dataIndex: 'DateTime',\n    key: 'DateTime',\n    align: 'center',\n    sorter: (a, b) => new Date(moment(a.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")) - new Date(moment(b.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")),\n    sortOrder: sortedInfo.columnKey === 'DateTime' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '50 KG',\n    width: 35,\n    dataIndex: 'Line50kg',\n    key: 'Line50kg',\n    align: 'center',\n    sorter: (a, b) => a.Line50kg - b.Line50kg,\n    sortOrder: sortedInfo.columnKey === 'Line50kg' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '1 KG',\n    width: 35,\n    dataIndex: 'Line1kg',\n    key: 'Line1kg',\n    align: 'center',\n    sorter: (a, b) => a.Line1kg - b.Line1kg,\n    sortOrder: sortedInfo.columnKey === 'Line1kg' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '2 KG',\n    width: 35,\n    dataIndex: 'Line2kg',\n    key: 'Line2kg',\n    align: 'center',\n    sorter: (a, b) => a.Line2kg - b.Line2kg,\n    sortOrder: sortedInfo.columnKey === 'Line2kg' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '1 TON',\n    width: 35,\n    dataIndex: 'Line1Ton',\n    key: 'Line1Ton',\n    align: 'center',\n    sorter: (a, b) => a.Line1Ton - b.Line1Ton,\n    sortOrder: sortedInfo.columnKey === 'Line1Ton' ? sortedInfo.order : null,\n    ellipsis: true\n  }];\n  const LogColumbPerTime = [{\n    title: 'DateTime',\n    width: 40,\n    dataIndex: 'DateTime',\n    key: 'DateTime',\n    align: 'center',\n    sorter: (a, b) => new Date(moment(a.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")) - new Date(moment(b.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")),\n    sortOrder: sortedInfo2.columnKey === 'DateTime' ? sortedInfo2.order : null,\n    ellipsis: true\n  }, {\n    title: 'Tag',\n    width: 60,\n    dataIndex: 'Tag',\n    key: 'Tag',\n    align: 'center'\n  }, {\n    title: 'Id Unit',\n    width: 20,\n    dataIndex: 'IdUnit',\n    key: 'IdUnit',\n    align: 'center',\n    sorter: (a, b) => a.IdUnit - b.IdUnit,\n    sortOrder: sortedInfo2.columnKey === 'IdUnit' ? sortedInfo2.order : null,\n    ellipsis: true\n  }, {\n    title: 'Label',\n    width: 20,\n    dataIndex: 'Label',\n    key: 'Label',\n    align: 'center',\n    filters: [{\n      text: 'Line50kg',\n      value: 'Line50kg'\n    }, {\n      text: 'Line1kg',\n      value: 'Line1kg'\n    }, {\n      text: 'Line2kg',\n      value: 'Line2kg'\n    }, {\n      text: 'Line1Ton',\n      value: 'Line1Ton'\n    }],\n    onFilter: (value, record) => record.Label.indexOf(value) === 0\n  }, {\n    title: 'Weight',\n    width: 20,\n    dataIndex: 'Weight',\n    key: 'Weight',\n    align: 'center'\n  }, {\n    title: 'Location',\n    width: 20,\n    dataIndex: 'Location',\n    key: 'Location',\n    align: 'center'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '16px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Daily Production Capacity Counter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: `( ${moment(ContingRange[0]).utc(true).format('DD/MM/YYYY HH:mm:ss')} - ${moment(ContingRange[1]).utc(true).format('DD/MM/YYYY HH:mm:ss')} )`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          gutter: '3',\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            span: 6,\n            xs: 24,\n            xl: 12,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              bordered: true,\n              style: {\n                backgroundColor: 'ButtonHighlight ',\n                border: '3px outset',\n                minHeight: '300px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Title, {\n                children: \"Packaging Line 1 KG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                gutter: '1',\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  span: 8,\n                  xs: 12,\n                  xl: 12,\n                  children: [/*#__PURE__*/_jsxDEV(Row, {\n                    gutter: '1',\n                    children: /*#__PURE__*/_jsxDEV(Col, {\n                      span: 8,\n                      xs: 24,\n                      xl: 24,\n                      children: /*#__PURE__*/_jsxDEV(Statistic, {\n                        title: /*#__PURE__*/_jsxDEV(\"h2\", {\n                          children: \"Morning:\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 341,\n                          columnNumber: 60\n                        }, this),\n                        value: DailyMorningRealTime['Line1kg'],\n                        precision: 0,\n                        valueStyle: {\n                          color: '#3f8600',\n                          fontSize: '100px',\n                          color: '#131212',\n                          fontWeight: 'bold'\n                        },\n                        suffix: /*#__PURE__*/_jsxDEV(\"h1\", {\n                          style: {\n                            fontSize: '40px'\n                          },\n                          children: \"Unit\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 345,\n                          columnNumber: 61\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 340,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 338,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    gutter: '1',\n                    children: /*#__PURE__*/_jsxDEV(Col, {\n                      span: 8,\n                      xs: 24,\n                      xl: 24,\n                      children: /*#__PURE__*/_jsxDEV(Col, {\n                        span: 8,\n                        xs: 24,\n                        xl: 24,\n                        children: /*#__PURE__*/_jsxDEV(Statistic, {\n                          title: /*#__PURE__*/_jsxDEV(\"h2\", {\n                            children: \"Night:\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 357,\n                            columnNumber: 64\n                          }, this),\n                          value: DailyNightRealTime['Line1kg'],\n                          precision: 0,\n                          valueStyle: {\n                            color: '#3f8600',\n                            fontSize: '100px',\n                            color: '#131212',\n                            fontWeight: 'bold'\n                          },\n                          suffix: /*#__PURE__*/_jsxDEV(\"h1\", {\n                            style: {\n                              fontSize: '40px'\n                            },\n                            children: \"Unit\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 361,\n                            columnNumber: 65\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 356,\n                          columnNumber: 53\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 354,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 352,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 350,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  span: 8,\n                  xs: 12,\n                  xl: 12,\n                  children: /*#__PURE__*/_jsxDEV(Statistic, {\n                    title: /*#__PURE__*/_jsxDEV(\"h2\", {\n                      style: {\n                        fontSize: '50px'\n                      },\n                      children: \"Total:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 372,\n                      columnNumber: 52\n                    }, this),\n                    value: DailyRealTime['Line1kg'],\n                    precision: 0,\n                    valueStyle: {\n                      color: '#3f8600',\n                      fontSize: '200px',\n                      color: '#131212',\n                      fontWeight: 'bold'\n                    },\n                    suffix: /*#__PURE__*/_jsxDEV(\"h1\", {\n                      style: {\n                        fontSize: '40px'\n                      },\n                      children: \"Unit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 376,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 371,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            span: 6,\n            xs: 24,\n            xl: 12,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              bordered: true,\n              style: {\n                backgroundColor: 'ButtonHighlight ',\n                border: '3px outset',\n                minHeight: '300px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Title, {\n                children: \"Packaging Line 2 KG\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                gutter: '1',\n                children: [/*#__PURE__*/_jsxDEV(Col, {\n                  span: 8,\n                  xs: 12,\n                  xl: 12,\n                  children: [/*#__PURE__*/_jsxDEV(Row, {\n                    gutter: '1',\n                    children: /*#__PURE__*/_jsxDEV(Col, {\n                      span: 8,\n                      xs: 24,\n                      xl: 24,\n                      children: /*#__PURE__*/_jsxDEV(Statistic, {\n                        title: /*#__PURE__*/_jsxDEV(\"h2\", {\n                          children: \"Morning:\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 396,\n                          columnNumber: 60\n                        }, this),\n                        value: DailyMorningRealTime['Line2kg'],\n                        precision: 0,\n                        valueStyle: {\n                          color: '#3f8600',\n                          fontSize: '100px',\n                          color: '#131212',\n                          fontWeight: 'bold'\n                        },\n                        suffix: /*#__PURE__*/_jsxDEV(\"h1\", {\n                          style: {\n                            fontSize: '40px'\n                          },\n                          children: \"Unit\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 400,\n                          columnNumber: 61\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 395,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 393,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 392,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Row, {\n                    gutter: '1',\n                    children: /*#__PURE__*/_jsxDEV(Col, {\n                      span: 8,\n                      xs: 24,\n                      xl: 24,\n                      children: /*#__PURE__*/_jsxDEV(Col, {\n                        span: 8,\n                        xs: 24,\n                        xl: 24,\n                        children: /*#__PURE__*/_jsxDEV(Statistic, {\n                          title: /*#__PURE__*/_jsxDEV(\"h2\", {\n                            children: \"Night:\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 412,\n                            columnNumber: 64\n                          }, this),\n                          value: DailyNightRealTime['Line2kg'],\n                          precision: 0,\n                          valueStyle: {\n                            color: '#3f8600',\n                            fontSize: '100px',\n                            color: '#131212',\n                            fontWeight: 'bold'\n                          },\n                          suffix: /*#__PURE__*/_jsxDEV(\"h1\", {\n                            style: {\n                              fontSize: '40px'\n                            },\n                            children: \"Unit\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 416,\n                            columnNumber: 65\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 411,\n                          columnNumber: 53\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 409,\n                        columnNumber: 49\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 407,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 405,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(Col, {\n                  span: 8,\n                  xs: 12,\n                  xl: 12,\n                  children: /*#__PURE__*/_jsxDEV(Statistic, {\n                    title: /*#__PURE__*/_jsxDEV(\"h2\", {\n                      style: {\n                        fontSize: '50px'\n                      },\n                      children: \"Total:\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 427,\n                      columnNumber: 52\n                    }, this),\n                    value: DailyRealTime['Line2kg'],\n                    precision: 0,\n                    valueStyle: {\n                      color: '#3f8600',\n                      fontSize: '200px',\n                      color: '#131212',\n                      fontWeight: 'bold'\n                    },\n                    suffix: /*#__PURE__*/_jsxDEV(\"h1\", {\n                      style: {\n                        fontSize: '40px'\n                      },\n                      children: \"Unit\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 431,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 426,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 425,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 323,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AllLine, \"p3yqr+unGhiTCWtf2vvByEhTh3Y=\");\n\n_c = AllLine;\nexport default AllLine;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllLine\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/MSM-Front/MSM/src/pages/Line/AllLine.jsx"],"names":["React","useEffect","useState","ReadJob","MSM_RealTime_request","MSM_logdata_request","MSM_EventLog_request","DataSortTimeMSM","GetDateTime","LogDataMappingNameMSM","MSM_Realtime_GetDateTime","DateDisplay","EventSortTimeMSM","Find_initial_Time","DataSortRT","moment","MSMTable","Button","Col","Row","Typography","Statistic","Card","DatePicker","Select","DashboardOutlined","DTinitial","DTinitial2","ContingRange","RequestDataOption","RequestDateRange","DailyLogRequestRange","DailyLogSorted","EventLogSorted","TotalCountProduct","DailyRealTime","TotalCount","DailyMorningRealTime","DailyNightRealTime","AllLine","Title","state","setState","count","sortedInfo","setSortedInfo","sortedInfo2","setSortedInfo2","interval","setInterval","RenderNewData","DailyLogRequest","EvenLogRequest","clearInterval","console","log","RealTimeRequest","response","field_name","Object","keys","realtime","responseDaily","forEach","element","element2","element3","value","handleChangeOverall","pagination","filters","sorter","handleChangePertime","LogColumb","title","width","dataIndex","key","align","a","b","Date","DateTime","format","sortOrder","columnKey","order","ellipsis","Line50kg","Line1kg","Line2kg","Line1Ton","LogColumbPerTime","IdUnit","text","onFilter","record","Label","indexOf","marginTop","utc","backgroundColor","border","minHeight","color","fontSize","fontWeight"],"mappings":"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","sourcesContent":["\r\nimport React, { useEffect, useState } from 'react'\r\nimport { ReadJob, MSM_RealTime_request, MSM_logdata_request, MSM_EventLog_request } from '../../api'\r\nimport {\r\n    DataSortTimeMSM, GetDateTime,\r\n    LogDataMappingNameMSM, MSM_Realtime_GetDateTime, DateDisplay,\r\n    EventSortTimeMSM, Find_initial_Time\r\n} from '../../DataRequest/LogDataRequestWrap';\r\nimport { DataSortRT } from '../../DataRequest/RealTimeRequestWrap'\r\nimport moment from 'moment';\r\nimport { MSMTable } from '../../DataRequest/DataModel';\r\nimport { Button, Col, Row, Typography, Statistic, Card, DatePicker, Select } from 'antd';\r\nimport { DashboardOutlined } from '@ant-design/icons';\r\n// import { Table, TableRow, TableCell } from \"react-table-pdf\";\r\n// import './home.css'\r\n\r\n\r\nlet DTinitial = GetDateTime(0, 1)  // get from yesterday 00:00 to today 00:00\r\nlet DTinitial2 = GetDateTime(7, 1)\r\nlet ContingRange = MSM_Realtime_GetDateTime(1, 0)\r\n\r\nlet RequestDataOption = ['Line50kg', 'Line1kg', 'Line2kg', 'Line1Ton']\r\nlet RequestDateRange = [DTinitial[0], DTinitial[1]]\r\nlet DailyLogRequestRange = [DTinitial2[0], DTinitial2[1]]\r\nlet DailyLogSorted = []\r\nlet EventLogSorted = []\r\nlet TotalCountProduct = []\r\n\r\nlet DailyRealTime = {\r\n    'Line50kg': 0,\r\n    'Line1kg': 0,\r\n    'Line2kg': 0,\r\n    'Line1Ton': 0\r\n}\r\n\r\nlet TotalCount = {\r\n    'Line50kg': 0,\r\n    'Line1kg': 0,\r\n    'Line2kg': 0,\r\n    'Line1Ton': 0\r\n}\r\n\r\nlet DailyMorningRealTime = {\r\n    'Line50kg': 0,\r\n    'Line1kg': 0,\r\n    'Line2kg': 0,\r\n    'Line1Ton': 0\r\n}\r\n\r\nlet DailyNightRealTime = {\r\n    'Line50kg': 0,\r\n    'Line1kg': 0,\r\n    'Line2kg': 0,\r\n    'Line1Ton': 0\r\n}\r\n\r\nconst AllLine = () => {\r\n\r\n    const { Title } = Typography\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n    const [sortedInfo, setSortedInfo] = useState({});\r\n    const [sortedInfo2, setSortedInfo2] = useState({});\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        const interval = setInterval(() => {\r\n            RenderNewData()\r\n        }, 1000)\r\n\r\n        DailyLogRequest()\r\n        EvenLogRequest()\r\n\r\n\r\n        return () => {\r\n            clearInterval(interval)\r\n            console.log('Unmount Effect Line1RT');\r\n        }\r\n\r\n    }, [])\r\n\r\n    const RenderNewData = () => {\r\n        RealTimeRequest()\r\n    }\r\n\r\n    const DailyLogRequest = async () => {\r\n        let response = await MSM_logdata_request(RequestDataOption, DailyLogRequestRange[0], DailyLogRequestRange[1])\r\n        //  let DailyLogSorted = LogDataMappingTimeMSM(MSMTable,response)   \r\n        DailyLogSorted = LogDataMappingNameMSM(MSMTable, DataSortTimeMSM(response))\r\n        console.log(DailyLogSorted);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const EvenLogRequest = async () => {\r\n        let response = await MSM_EventLog_request(RequestDataOption, DailyLogRequestRange[0], DailyLogRequestRange[1])\r\n        //  let DailyLogSorted = LogDataMappingTimeMSM(MSMTable,response)   \r\n        EventLogSorted = EventSortTimeMSM(response)\r\n        console.log(EventLogSorted);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const RealTimeRequest = async () => {\r\n\r\n        let field_name = Object.keys(DailyRealTime)\r\n\r\n        let realtime = await MSM_RealTime_request(RequestDataOption)\r\n        //console.log(realtime);\r\n        TotalCountProduct = DataSortRT(realtime)\r\n\r\n        //console.log(TotalCountProduct);\r\n\r\n        ContingRange = MSM_Realtime_GetDateTime(0, 1)\r\n\r\n        Find_initial_Time() ? ContingRange = MSM_Realtime_GetDateTime(0, 1) : ContingRange = MSM_Realtime_GetDateTime(1, 0)\r\n\r\n        console.log(ContingRange);\r\n\r\n        let responseDaily = await MSM_EventLog_request(RequestDataOption, ContingRange[0], ContingRange[3])\r\n        EventLogSorted = EventSortTimeMSM(responseDaily)\r\n\r\n        console.log(EventLogSorted);\r\n\r\n\r\n        field_name.forEach(element => {\r\n            DailyRealTime[`${element}`] = 0\r\n            DailyMorningRealTime[`${element}`] = 0\r\n            DailyNightRealTime[`${element}`] = 0\r\n\r\n            EventLogSorted.forEach(element2 => {\r\n\r\n                if (element === element2['Label']) {\r\n                    DailyRealTime[`${element}`]++\r\n\r\n                    if (element2['Shift'] === 'Morning') {\r\n                        DailyMorningRealTime[`${element}`]++\r\n                    }\r\n\r\n                    else {\r\n                        DailyNightRealTime[`${element}`]++\r\n                    }\r\n                }\r\n            });\r\n\r\n            TotalCountProduct.forEach(element3 => {\r\n                if (element === element3['Label']) {\r\n                    TotalCount[`${element}`] = element3.value\r\n                }\r\n            });\r\n        });\r\n\r\n        // Find_initial_Time() ? ContingRange = MSM_Realtime_GetDateTime(0, 1) : ContingRange = MSM_Realtime_GetDateTime(1, 0)\r\n\r\n        console.log(ContingRange);\r\n\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const handleChangeOverall = (pagination, filters, sorter) => {\r\n        console.log('Various parameters', pagination, filters, sorter);\r\n        setSortedInfo(sorter);\r\n    };\r\n\r\n    const handleChangePertime = (pagination, filters, sorter) => {\r\n        console.log('Various parameters', pagination, filters, sorter);\r\n        setSortedInfo2(sorter);\r\n    };\r\n\r\n    // const ChangeDateRange = (value) => {\r\n    //     // console.log(RequestDateRange);\r\n    //     RequestDateRange = []\r\n    //     RequestDateRange = ConvertMonentToDateTime(value)\r\n    //     // console.log(RequestDateRange);\r\n    // }\r\n\r\n    // const ChangeOption = (value) => {\r\n    //     console.log(`selected ${value}`);\r\n    //     RequestDataOption = []\r\n    //     RequestDataOption.push(value)\r\n    //     // console.log(RequestDataOption);\r\n    // }\r\n\r\n    const LogColumb = [\r\n        {\r\n            title: 'DateTime',\r\n            width: 50,\r\n            dataIndex: 'DateTime',\r\n            key: 'DateTime',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) =>\r\n                new Date(moment(a.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")) -\r\n                new Date(moment(b.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")),\r\n\r\n            sortOrder: sortedInfo.columnKey === 'DateTime' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '50 KG',\r\n            width: 35,\r\n            dataIndex: 'Line50kg',\r\n            key: 'Line50kg',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line50kg - b.Line50kg,\r\n            sortOrder: sortedInfo.columnKey === 'Line50kg' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '1 KG',\r\n            width: 35,\r\n            dataIndex: 'Line1kg',\r\n            key: 'Line1kg',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line1kg - b.Line1kg,\r\n            sortOrder: sortedInfo.columnKey === 'Line1kg' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '2 KG',\r\n            width: 35,\r\n            dataIndex: 'Line2kg',\r\n            key: 'Line2kg',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line2kg - b.Line2kg,\r\n            sortOrder: sortedInfo.columnKey === 'Line2kg' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '1 TON',\r\n            width: 35,\r\n            dataIndex: 'Line1Ton',\r\n            key: 'Line1Ton',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line1Ton - b.Line1Ton,\r\n            sortOrder: sortedInfo.columnKey === 'Line1Ton' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n\r\n    ]\r\n\r\n    const LogColumbPerTime = [\r\n        {\r\n            title: 'DateTime',\r\n            width: 40,\r\n            dataIndex: 'DateTime',\r\n            key: 'DateTime',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) =>\r\n                new Date(moment(a.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")) -\r\n                new Date(moment(b.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")),\r\n\r\n            sortOrder: sortedInfo2.columnKey === 'DateTime' ? sortedInfo2.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: 'Tag',\r\n            width: 60,\r\n            dataIndex: 'Tag',\r\n            key: 'Tag',\r\n            align: 'center',\r\n        },\r\n        {\r\n            title: 'Id Unit',\r\n            width: 20,\r\n            dataIndex: 'IdUnit',\r\n            key: 'IdUnit',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.IdUnit - b.IdUnit,\r\n            sortOrder: sortedInfo2.columnKey === 'IdUnit' ? sortedInfo2.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: 'Label',\r\n            width: 20,\r\n            dataIndex: 'Label',\r\n            key: 'Label',\r\n            align: 'center',\r\n\r\n            filters: [\r\n                {\r\n                    text: 'Line50kg',\r\n                    value: 'Line50kg',\r\n                },\r\n                {\r\n                    text: 'Line1kg',\r\n                    value: 'Line1kg',\r\n                },\r\n                {\r\n                    text: 'Line2kg',\r\n                    value: 'Line2kg',\r\n                },\r\n                {\r\n                    text: 'Line1Ton',\r\n                    value: 'Line1Ton',\r\n                },\r\n            ],\r\n            onFilter: (value, record) => record.Label.indexOf(value) === 0,\r\n        },\r\n\r\n        {\r\n            title: 'Weight',\r\n            width: 20,\r\n            dataIndex: 'Weight',\r\n            key: 'Weight',\r\n            align: 'center',\r\n        },\r\n        {\r\n            title: 'Location',\r\n            width: 20,\r\n            dataIndex: 'Location',\r\n            key: 'Location',\r\n            align: 'center',\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div style={{ marginTop: '16px' }}>\r\n                <Card >\r\n                    <h2>Daily Production Capacity Counter</h2>\r\n                    <h2>{`( ${moment(ContingRange[0]).utc(true).format('DD/MM/YYYY HH:mm:ss')} - ${moment(ContingRange[1]).utc(true).format('DD/MM/YYYY HH:mm:ss')} )`}</h2>\r\n\r\n                    <Row gutter={'3'} >\r\n                        <Col span={6} xs={24} xl={12}>\r\n                            <Card bordered={true} style={{ backgroundColor: 'ButtonHighlight ', border: '3px outset', minHeight: '300px' }}  >\r\n                                <Title>Packaging Line 1 KG</Title>\r\n\r\n                                <Row gutter={'1'} >\r\n                                    <Col span={8} xs={12} xl={12}>\r\n                                        <Row gutter={'1'} >\r\n                                            <Col span={8} xs={24} xl={24}>\r\n\r\n                                                <Statistic\r\n                                                    title={<h2>Morning:</h2>}\r\n                                                    value={DailyMorningRealTime['Line1kg']}\r\n                                                    precision={0}\r\n                                                    valueStyle={{ color: '#3f8600', fontSize: '100px', color: '#131212', fontWeight: 'bold' }}\r\n                                                    suffix={<h1 style={{ fontSize: '40px' }}>Unit</h1>}\r\n                                                />\r\n                                            </Col>\r\n\r\n                                        </Row>\r\n                                        <Row gutter={'1'} >\r\n\r\n                                            <Col span={8} xs={24} xl={24}>\r\n\r\n                                                <Col span={8} xs={24} xl={24}>\r\n\r\n                                                    <Statistic\r\n                                                        title={<h2>Night:</h2>}\r\n                                                        value={DailyNightRealTime['Line1kg']}\r\n                                                        precision={0}\r\n                                                        valueStyle={{ color: '#3f8600', fontSize: '100px', color: '#131212', fontWeight: 'bold' }}\r\n                                                        suffix={<h1 style={{ fontSize: '40px' }}>Unit</h1>}\r\n                                                    />\r\n                                                </Col>\r\n\r\n                                            </Col>\r\n                                        </Row>\r\n\r\n                                    </Col>\r\n\r\n                                    <Col span={8} xs={12} xl={12}>\r\n                                        <Statistic\r\n                                            title={<h2 style={{ fontSize: '50px' }}>Total:</h2>}\r\n                                            value={DailyRealTime['Line1kg']}\r\n                                            precision={0}\r\n                                            valueStyle={{ color: '#3f8600', fontSize: '200px', color: '#131212', fontWeight: 'bold' }}\r\n                                            suffix={<h1 style={{ fontSize: '40px' }}>Unit</h1>}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </Card>\r\n                        </Col>\r\n\r\n\r\n                        <Col span={6} xs={24} xl={12}>\r\n                        <Card bordered={true} style={{ backgroundColor: 'ButtonHighlight ', border: '3px outset', minHeight: '300px' }}  >\r\n                                <Title>Packaging Line 2 KG</Title>\r\n\r\n                                <Row gutter={'1'} >\r\n                                    <Col span={8} xs={12} xl={12}>\r\n                                        <Row gutter={'1'} >\r\n                                            <Col span={8} xs={24} xl={24}>\r\n\r\n                                                <Statistic\r\n                                                    title={<h2>Morning:</h2>}\r\n                                                    value={DailyMorningRealTime['Line2kg']}\r\n                                                    precision={0}\r\n                                                    valueStyle={{ color: '#3f8600', fontSize: '100px', color: '#131212', fontWeight: 'bold' }}\r\n                                                    suffix={<h1 style={{ fontSize: '40px' }}>Unit</h1>}\r\n                                                />\r\n                                            </Col>\r\n\r\n                                        </Row>\r\n                                        <Row gutter={'1'} >\r\n\r\n                                            <Col span={8} xs={24} xl={24}>\r\n\r\n                                                <Col span={8} xs={24} xl={24}>\r\n\r\n                                                    <Statistic\r\n                                                        title={<h2>Night:</h2>}\r\n                                                        value={DailyNightRealTime['Line2kg']}\r\n                                                        precision={0}\r\n                                                        valueStyle={{ color: '#3f8600', fontSize: '100px', color: '#131212', fontWeight: 'bold' }}\r\n                                                        suffix={<h1 style={{ fontSize: '40px' }}>Unit</h1>}\r\n                                                        />\r\n                                                </Col>\r\n\r\n                                            </Col>\r\n                                        </Row>\r\n\r\n                                    </Col>\r\n\r\n                                    <Col span={8} xs={12} xl={12}>\r\n                                        <Statistic\r\n                                            title={<h2 style={{fontSize: '50px'}}>Total:</h2>}\r\n                                            value={DailyRealTime['Line2kg']}\r\n                                            precision={0}\r\n                                            valueStyle={{ color: '#3f8600', fontSize: '200px', color: '#131212', fontWeight: 'bold' }}\r\n                                            suffix={<h1 style={{ fontSize: '40px' }}>Unit</h1>}\r\n                                            />\r\n\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </Card>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </Card>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllLine\r\n"]},"metadata":{},"sourceType":"module"}