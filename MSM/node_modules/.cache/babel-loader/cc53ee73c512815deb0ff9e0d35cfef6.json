{"ast":null,"code":"\"use strict\";\n/* eslint camelcase:off */\n\nvar _classCallCheck = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ArgHandler = require(\"./ArgHandler\");\n\nvar _ = require(\"lodash\");\n\nvar xmlq = require(\"./xmlq\");\n\nvar colorIndexes = require(\"./colorIndexes\");\n/**\n * A Rich text fragment.\n */\n\n\nvar RichTextFragment = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance of RichTextFragment.\n   * @constructor\n   * @param {string|Object} value - Text value or XML node\n   * @param {object|undefined|null} [styles] - Multiple styles.\n   * @param {RichText} richText - The rich text instance where this fragment belongs to.\n   */\n  function RichTextFragment(value, styles, richText) {\n    _classCallCheck(this, RichTextFragment);\n\n    this._richText = richText;\n\n    if (value.name === 'r') {\n      this._node = value;\n      this._fontNode = xmlq.findChild(this._node, 'rPr');\n\n      if (!this._fontNode) {\n        this._fontNode = {\n          name: 'rPr',\n          attributes: {},\n          children: []\n        };\n\n        this._node.children.unshift(this._fontNode);\n      }\n\n      this._valueNode = xmlq.findChild(this._node, 't');\n    } else {\n      this._node = {\n        name: 'r',\n        attributes: {},\n        children: [{\n          name: 'rPr',\n          attributes: {},\n          children: []\n        }, {\n          name: 't',\n          attributes: {},\n          children: []\n        }]\n      };\n      this._fontNode = xmlq.findChild(this._node, 'rPr');\n      this._valueNode = xmlq.findChild(this._node, 't');\n      this.value(value);\n\n      if (styles) {\n        this.style(styles);\n      }\n    }\n  }\n  /**\n   * Gets the value of this part of rich text\n   * @return {string} text\n   */\n\n  /**\n  * Sets the value of this part of rich text\n  * @param {string} text - the text to set\n  * @return {RichTextFragment} - RichTextFragment\n  */\n\n\n  _createClass(RichTextFragment, [{\n    key: \"value\",\n    value: function value() {\n      var _this = this;\n\n      return new ArgHandler(\"_RichText.value\").case(function () {\n        return _this._valueNode.children[0];\n      }).case('string', function (value) {\n        value = value.replace(/(?:\\r\\n|\\r|\\n)/g, '\\r\\n');\n        var hasLineSeparator = value.indexOf('\\r\\n') !== -1;\n        _this._valueNode.children[0] = value;\n        if (value.charAt(0) === ' ') xmlq.setAttributes(_this._valueNode, {\n          'xml:space': 'preserve'\n        });\n        if (_this._richText) _this._richText.removeUnsupportedNodes();\n\n        if (hasLineSeparator) {\n          // set wrapText = true if it contains line separator, excel will only display new lines if it sets.\n          if (_this._richText.cell) {\n            _this._richText.cell.style('wrapText', true);\n          }\n\n          xmlq.setAttributes(_this._valueNode, {\n            'xml:space': 'preserve'\n          });\n        }\n\n        return _this;\n      }).handle(arguments);\n    }\n    /**\n     * Convert the rich text to an XML object.\n     * @returns {{}} The XML form.\n     * @ignore\n     */\n\n  }, {\n    key: \"toXml\",\n    value: function toXml() {\n      return this._node;\n    }\n    /**\n     * Gets an individual style.\n     * @param {string} name - The name of the style.\n     * @returns {*} The style.\n     */\n\n    /**\n    * Gets multiple styles.\n    * @param {Array.<string>} names - The names of the style.\n    * @returns {object.<string, *>} Object whose keys are the style names and values are the styles.\n    */\n\n    /**\n    * Sets an individual style.\n    * @param {string} name - The name of the style.\n    * @param {*} value - The value to set.\n    * @returns {RichTextFragment} This RichTextFragment.\n    */\n\n    /**\n    * Sets multiple styles.\n    * @param {object.<string, *>} styles - Object whose keys are the style names and values are the styles to set.\n    * @returns {RichTextFragment} This RichTextFragment.\n    */\n\n  }, {\n    key: \"style\",\n    value: function style() {\n      var _this2 = this;\n\n      return new ArgHandler(\"_RichText.style\").case('string', function (name) {\n        // Get single value\n        var getterName = \"_get_\".concat(name);\n        if (!_this2[getterName]) throw new Error(\"_RichText.style: '\".concat(name, \"' is not a valid style\"));\n        return _this2[getterName]();\n      }).case('array', function (names) {\n        // Get list of values\n        var values = {};\n        names.forEach(function (name) {\n          values[name] = _this2.style(name);\n        });\n        return values;\n      }).case(['string', '*'], function (name, value) {\n        // Set a single value\n        var setterName = \"_set_\".concat(name);\n        if (!_this2[setterName]) throw new Error(\"_RichText.style: '\".concat(name, \"' is not a valid style\"));\n        return _this2[setterName](value);\n      }).case('object', function (nameValues) {\n        // Object of key value pairs to set\n        for (var name in nameValues) {\n          if (!nameValues.hasOwnProperty(name)) continue;\n          var value = nameValues[name];\n\n          _this2.style(name, value);\n        }\n\n        return _this2;\n      }).handle(arguments);\n    }\n  }, {\n    key: \"_getColor\",\n    value: function _getColor(node, name) {\n      var child = xmlq.findChild(node, name);\n      if (!child || !child.attributes) return;\n      var color = {};\n      if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n      if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n      if (_.isEmpty(color)) return;\n      return color;\n    }\n  }, {\n    key: \"_setColor\",\n    value: function _setColor(node, name, color) {\n      if (typeof color === \"string\") color = {\n        rgb: color\n      };else if (typeof color === \"number\") color = {\n        theme: color\n      };\n      xmlq.setChildAttributes(node, name, {\n        rgb: color && color.rgb && color.rgb.toUpperCase(),\n        indexed: null,\n        theme: color && color.theme,\n        tint: color && color.tint\n      });\n      xmlq.removeChildIfEmpty(node, 'color');\n    }\n  }, {\n    key: \"_get_bold\",\n    value: function _get_bold() {\n      return xmlq.hasChild(this._fontNode, 'b');\n    }\n  }, {\n    key: \"_set_bold\",\n    value: function _set_bold(bold) {\n      if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");else xmlq.removeChild(this._fontNode, 'b');\n    }\n  }, {\n    key: \"_get_italic\",\n    value: function _get_italic() {\n      return xmlq.hasChild(this._fontNode, 'i');\n    }\n  }, {\n    key: \"_set_italic\",\n    value: function _set_italic(italic) {\n      if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");else xmlq.removeChild(this._fontNode, 'i');\n    }\n  }, {\n    key: \"_get_underline\",\n    value: function _get_underline() {\n      var uNode = xmlq.findChild(this._fontNode, 'u');\n      return uNode ? uNode.attributes.val || true : false;\n    }\n  }, {\n    key: \"_set_underline\",\n    value: function _set_underline(underline) {\n      if (underline) {\n        var uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n        var val = typeof underline === 'string' ? underline : null;\n        xmlq.setAttributes(uNode, {\n          val: val\n        });\n      } else {\n        xmlq.removeChild(this._fontNode, 'u');\n      }\n    }\n  }, {\n    key: \"_get_strikethrough\",\n    value: function _get_strikethrough() {\n      return xmlq.hasChild(this._fontNode, 'strike');\n    }\n  }, {\n    key: \"_set_strikethrough\",\n    value: function _set_strikethrough(strikethrough) {\n      if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");else xmlq.removeChild(this._fontNode, 'strike');\n    }\n  }, {\n    key: \"_getFontVerticalAlignment\",\n    value: function _getFontVerticalAlignment() {\n      return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n  }, {\n    key: \"_setFontVerticalAlignment\",\n    value: function _setFontVerticalAlignment(alignment) {\n      xmlq.setChildAttributes(this._fontNode, 'vertAlign', {\n        val: alignment\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n  }, {\n    key: \"_get_subscript\",\n    value: function _get_subscript() {\n      return this._getFontVerticalAlignment() === \"subscript\";\n    }\n  }, {\n    key: \"_set_subscript\",\n    value: function _set_subscript(subscript) {\n      this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n  }, {\n    key: \"_get_superscript\",\n    value: function _get_superscript() {\n      return this._getFontVerticalAlignment() === \"superscript\";\n    }\n  }, {\n    key: \"_set_superscript\",\n    value: function _set_superscript(superscript) {\n      this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n  }, {\n    key: \"_get_fontSize\",\n    value: function _get_fontSize() {\n      return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n  }, {\n    key: \"_set_fontSize\",\n    value: function _set_fontSize(size) {\n      xmlq.setChildAttributes(this._fontNode, 'sz', {\n        val: size\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n  }, {\n    key: \"_get_fontFamily\",\n    value: function _get_fontFamily() {\n      return xmlq.getChildAttribute(this._fontNode, 'rFont', \"val\");\n    }\n  }, {\n    key: \"_set_fontFamily\",\n    value: function _set_fontFamily(family) {\n      xmlq.setChildAttributes(this._fontNode, 'rFont', {\n        val: family\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'rFont');\n    }\n  }, {\n    key: \"_get_fontGenericFamily\",\n    value: function _get_fontGenericFamily() {\n      return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n    /**\n     * @param {number} genericFamily - 1: Serif, 2: Sans Serif, 3: Monospace,\n     * @private\n     * @return {undefined}\n     */\n\n  }, {\n    key: \"_set_fontGenericFamily\",\n    value: function _set_fontGenericFamily(genericFamily) {\n      xmlq.setChildAttributes(this._fontNode, 'family', {\n        val: genericFamily\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n  }, {\n    key: \"_get_fontColor\",\n    value: function _get_fontColor() {\n      return this._getColor(this._fontNode, \"color\");\n    }\n  }, {\n    key: \"_set_fontColor\",\n    value: function _set_fontColor(color) {\n      this._setColor(this._fontNode, \"color\", color);\n    }\n  }, {\n    key: \"_get_fontScheme\",\n    value: function _get_fontScheme() {\n      // can be 'minor', 'major', 'none'\n      return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n    /**\n     * @param {string} scheme - 'minor'|'major'|'none'\n     * @private\n     * @return {undefined}\n     */\n\n  }, {\n    key: \"_set_fontScheme\",\n    value: function _set_fontScheme(scheme) {\n      xmlq.setChildAttributes(this._fontNode, 'scheme', {\n        val: scheme\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n  }]);\n\n  return RichTextFragment;\n}(); // IE doesn't support function names so explicitly set it.\n\n\nif (!RichTextFragment.name) RichTextFragment.name = \"RichTextFragment\";\nmodule.exports = RichTextFragment;","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/xlsx-populate/lib/RichTextFragment.js"],"names":["ArgHandler","require","_","xmlq","colorIndexes","RichTextFragment","value","styles","richText","_richText","name","_node","_fontNode","findChild","attributes","children","unshift","_valueNode","style","case","replace","hasLineSeparator","indexOf","charAt","setAttributes","removeUnsupportedNodes","cell","handle","arguments","getterName","Error","names","values","forEach","setterName","nameValues","hasOwnProperty","node","child","color","rgb","theme","indexed","tint","isEmpty","setChildAttributes","toUpperCase","removeChildIfEmpty","hasChild","bold","appendChildIfNotFound","removeChild","italic","uNode","val","underline","strikethrough","getChildAttribute","alignment","_getFontVerticalAlignment","subscript","_setFontVerticalAlignment","superscript","size","family","genericFamily","_getColor","_setColor","scheme","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/* eslint camelcase:off */\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A Rich text fragment.\n */\nclass RichTextFragment {\n    /**\n     * Creates a new instance of RichTextFragment.\n     * @constructor\n     * @param {string|Object} value - Text value or XML node\n     * @param {object|undefined|null} [styles] - Multiple styles.\n     * @param {RichText} richText - The rich text instance where this fragment belongs to.\n     */\n    constructor(value, styles, richText) {\n        this._richText = richText;\n        if (value.name === 'r') {\n            this._node = value;\n            this._fontNode = xmlq.findChild(this._node, 'rPr');\n            if (!this._fontNode) {\n                this._fontNode = { name: 'rPr', attributes: {}, children: [] };\n                this._node.children.unshift(this._fontNode);\n            }\n            this._valueNode = xmlq.findChild(this._node, 't');\n        } else {\n            this._node = {\n                name: 'r',\n                attributes: {},\n                children: [\n                    { name: 'rPr', attributes: {}, children: [] },\n                    { name: 't', attributes: {}, children: [] }\n                ]\n            };\n            this._fontNode = xmlq.findChild(this._node, 'rPr');\n            this._valueNode = xmlq.findChild(this._node, 't');\n            this.value(value);\n            if (styles) {\n                this.style(styles);\n            }\n        }\n    }\n\n    /**\n     * Gets the value of this part of rich text\n     * @return {string} text\n     *//**\n     * Sets the value of this part of rich text\n     * @param {string} text - the text to set\n     * @return {RichTextFragment} - RichTextFragment\n     */\n    value() {\n        return new ArgHandler(\"_RichText.value\")\n            .case(() => {\n                return this._valueNode.children[0];\n            })\n            .case('string', value => {\n                value = value.replace(/(?:\\r\\n|\\r|\\n)/g, '\\r\\n');\n                const hasLineSeparator = value.indexOf('\\r\\n') !== -1;\n                this._valueNode.children[0] = value;\n                if (value.charAt(0) === ' ') xmlq.setAttributes(this._valueNode, { 'xml:space': 'preserve' });\n\n                if (this._richText) this._richText.removeUnsupportedNodes();\n                if (hasLineSeparator) {\n                    // set wrapText = true if it contains line separator, excel will only display new lines if it sets.\n                    if (this._richText.cell) {\n                        this._richText.cell.style('wrapText', true);\n                    }\n                    xmlq.setAttributes(this._valueNode, { 'xml:space': 'preserve' });\n                }\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Convert the rich text to an XML object.\n     * @returns {{}} The XML form.\n     * @ignore\n     */\n    toXml() {\n        return this._node;\n    }\n\n    /**\n     * Gets an individual style.\n     * @param {string} name - The name of the style.\n     * @returns {*} The style.\n     *//**\n     * Gets multiple styles.\n     * @param {Array.<string>} names - The names of the style.\n     * @returns {object.<string, *>} Object whose keys are the style names and values are the styles.\n     *//**\n     * Sets an individual style.\n     * @param {string} name - The name of the style.\n     * @param {*} value - The value to set.\n     * @returns {RichTextFragment} This RichTextFragment.\n     *//**\n     * Sets multiple styles.\n     * @param {object.<string, *>} styles - Object whose keys are the style names and values are the styles to set.\n     * @returns {RichTextFragment} This RichTextFragment.\n     */\n    style() {\n        return new ArgHandler(\"_RichText.style\")\n            .case('string', name => {\n                // Get single value\n                const getterName = `_get_${name}`;\n                if (!this[getterName]) throw new Error(`_RichText.style: '${name}' is not a valid style`);\n                return this[getterName]();\n            })\n            .case('array', names => {\n                // Get list of values\n                const values = {};\n                names.forEach(name => {\n                    values[name] = this.style(name);\n                });\n                return values;\n            })\n            .case(['string', '*'], (name, value) => {\n                // Set a single value\n                const setterName = `_set_${name}`;\n                if (!this[setterName]) throw new Error(`_RichText.style: '${name}' is not a valid style`);\n                return this[setterName](value);\n            })\n            .case('object', nameValues => {\n                // Object of key value pairs to set\n                for (const name in nameValues) {\n                    if (!nameValues.hasOwnProperty(name)) continue;\n                    const value = nameValues[name];\n                    this.style(name, value);\n                }\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    _getColor(node, name) {\n        const child = xmlq.findChild(node, name);\n        if (!child || !child.attributes) return;\n\n        const color = {};\n        if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;\n        else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;\n        else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n\n        if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n\n        if (_.isEmpty(color)) return;\n\n        return color;\n    }\n\n    _setColor(node, name, color) {\n        if (typeof color === \"string\") color = { rgb: color };\n        else if (typeof color === \"number\") color = { theme: color };\n\n        xmlq.setChildAttributes(node, name, {\n            rgb: color && color.rgb && color.rgb.toUpperCase(),\n            indexed: null,\n            theme: color && color.theme,\n            tint: color && color.tint\n        });\n\n        xmlq.removeChildIfEmpty(node, 'color');\n    }\n\n    _get_bold() {\n        return xmlq.hasChild(this._fontNode, 'b');\n    }\n\n    _set_bold(bold) {\n        if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");\n        else xmlq.removeChild(this._fontNode, 'b');\n    }\n\n    _get_italic() {\n        return xmlq.hasChild(this._fontNode, 'i');\n    }\n\n    _set_italic(italic) {\n        if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");\n        else xmlq.removeChild(this._fontNode, 'i');\n    }\n\n    _get_underline() {\n        const uNode = xmlq.findChild(this._fontNode, 'u');\n        return uNode ? uNode.attributes.val || true : false;\n    }\n\n    _set_underline(underline) {\n        if (underline) {\n            const uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n            const val = typeof underline === 'string' ? underline : null;\n            xmlq.setAttributes(uNode, { val });\n        } else {\n            xmlq.removeChild(this._fontNode, 'u');\n        }\n    }\n\n    _get_strikethrough() {\n        return xmlq.hasChild(this._fontNode, 'strike');\n    }\n\n    _set_strikethrough(strikethrough) {\n        if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");\n        else xmlq.removeChild(this._fontNode, 'strike');\n    }\n\n    _getFontVerticalAlignment() {\n        return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n\n    _setFontVerticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._fontNode, 'vertAlign', { val: alignment });\n        xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n\n    _get_subscript() {\n        return this._getFontVerticalAlignment() === \"subscript\";\n    }\n\n    _set_subscript(subscript) {\n        this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n\n    _get_superscript() {\n        return this._getFontVerticalAlignment() === \"superscript\";\n    }\n\n    _set_superscript(superscript) {\n        this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n\n    _get_fontSize() {\n        return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n\n    _set_fontSize(size) {\n        xmlq.setChildAttributes(this._fontNode, 'sz', { val: size });\n        xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n\n    _get_fontFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'rFont', \"val\");\n    }\n\n    _set_fontFamily(family) {\n        xmlq.setChildAttributes(this._fontNode, 'rFont', { val: family });\n        xmlq.removeChildIfEmpty(this._fontNode, 'rFont');\n    }\n\n    _get_fontGenericFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n\n    /**\n     * @param {number} genericFamily - 1: Serif, 2: Sans Serif, 3: Monospace,\n     * @private\n     * @return {undefined}\n     */\n    _set_fontGenericFamily(genericFamily) {\n        xmlq.setChildAttributes(this._fontNode, 'family', { val: genericFamily });\n        xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n\n    _get_fontColor() {\n        return this._getColor(this._fontNode, \"color\");\n    }\n\n    _set_fontColor(color) {\n        this._setColor(this._fontNode, \"color\", color);\n    }\n\n    _get_fontScheme() {\n        // can be 'minor', 'major', 'none'\n        return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n\n    /**\n     * @param {string} scheme - 'minor'|'major'|'none'\n     * @private\n     * @return {undefined}\n     */\n    _set_fontScheme(scheme) {\n        xmlq.setChildAttributes(this._fontNode, 'scheme', { val: scheme });\n        xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n}\n\n// IE doesn't support function names so explicitly set it.\nif (!RichTextFragment.name) RichTextFragment.name = \"RichTextFragment\";\n\nmodule.exports = RichTextFragment;\n"]},"metadata":{},"sourceType":"script"}