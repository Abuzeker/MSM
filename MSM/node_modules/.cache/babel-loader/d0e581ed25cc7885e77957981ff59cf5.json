{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\MSM-Front\\\\MSM\\\\src\\\\pages\\\\EnergyUsage\\\\EnergyUsage.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Divider, Row, DatePicker, Card, Table, Select, Spin } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { logdata_request, MSM_EventLog_request, MSM_logdata_request } from '../../api';\nimport { C3Model, C3ModelMap, G2Model, MSMTable, DummyData } from '../../DataRequest/DataModel';\nimport { ConvertMonentToDateTime, EventSortTimeMSM, GetDateTime, DataSortTimeMSM, LogDataMappingTime, LogDataMappingTimeMSM, LogDataMappingNameMSM } from '../../DataRequest/LogDataRequestWrap';\nimport { Line, Column } from '@antv/g2plot';\nimport moment from 'moment';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet DTinitial = GetDateTime(0, 1); // get from yesterday 00:00 to today 00:00\n\nlet DTinitial2 = GetDateTime(0, 1); // get from yesterday 00:00 to today 00:00\n\nlet RequestDataOption = ['Line50kg', 'Line1kg', 'Line2kg', 'Line1Ton'];\nlet RequestDateRange = [DTinitial[0], DTinitial[1]];\nlet responseSorted = [];\nconst annotations = [];\nlet EventLogRequestRange = [DTinitial2[0], DTinitial2[1]];\nlet EventLogSorted = [];\nconst Dailydata = [{\n  DateTime: '24/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line50kg',\n  Value: 245\n}, {\n  DateTime: '24/5/2022',\n  type: 'Line1kg',\n  Value: 543\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line1kg',\n  Value: 463\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line1kg',\n  Value: 234\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line1kg',\n  Value: 54\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line1kg',\n  Value: 643\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line1kg',\n  Value: 76\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line1kg',\n  Value: 876\n}, {\n  DateTime: '24/5/2022',\n  type: 'Line2kg',\n  Value: 543\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line2kg',\n  Value: 463\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line2kg',\n  Value: 234\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line2kg',\n  Value: 54\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line2kg',\n  Value: 643\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line2kg',\n  Value: 76\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line2kg',\n  Value: 876\n}, {\n  DateTime: '24/5/2022',\n  type: 'Line1Ton',\n  Value: 564\n}, {\n  DateTime: '25/5/2022',\n  type: 'Line1Ton',\n  Value: 23\n}, {\n  DateTime: '26/5/2022',\n  type: 'Line1Ton',\n  Value: 64\n}, {\n  DateTime: '27/5/2022',\n  type: 'Line1Ton',\n  Value: 76\n}, {\n  DateTime: '28/5/2022',\n  type: 'Line1Ton',\n  Value: 23\n}, {\n  DateTime: '29/5/2022',\n  type: 'Line1Ton',\n  Value: 46\n}, {\n  DateTime: '30/5/2022',\n  type: 'Line1Ton',\n  Value: 86\n}];\nconst DailyLogTable = [];\nconst headers = [{\n  label: \"DateTime\",\n  key: \"DateTime\"\n}, {\n  label: \"Line50kg\",\n  key: \"Line50kg\"\n}, {\n  label: \"Line1kg\",\n  key: \"Line1kg\"\n}, {\n  label: \"Line2kg\",\n  key: \"Line2kg\"\n}, {\n  label: \"Line1Ton\",\n  key: \"Line1Ton\"\n}];\nconst {\n  RangePicker\n} = DatePicker;\nconst {\n  Option\n} = Select;\nlet line, stackedColumnPlot;\n\nconst EnergyUsage = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n  const [Loading, setLoading] = useState(false);\n  const [sortedInfo, setSortedInfo] = useState({});\n\n  const handleChangeOverall = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter);\n    setSortedInfo(sorter);\n  };\n\n  const EvenLogRequest = async () => {\n    let response = await MSM_EventLog_request(RequestDataOption, DailyLogRequestRange[0], DailyLogRequestRange[1]); //  let DailyLogSorted = LogDataMappingTimeMSM(MSMTable,response)   \n\n    EventLogSorted = EventSortTimeMSM(response);\n    console.log(EventLogSorted);\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  useEffect(() => {\n    console.log('Reffect'); //  BarChartInit()\n\n    stackedColumnPlot = new Column('container', {\n      data: Dailydata,\n      isStack: true,\n      xField: 'DateTime',\n      yField: 'Value',\n      seriesField: 'type',\n      label: {\n        position: 'middle',\n        layout: [{\n          type: 'interval-adjust-position'\n        }, {\n          type: 'interval-hide-overlap'\n        }, {\n          type: 'adjust-color'\n        }]\n      },\n      annotations\n    });\n\n    try {\n      stackedColumnPlot.render();\n    } catch {}\n\n    return () => {\n      stackedColumnPlot.destroy();\n    };\n  }, []); // const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n  //     console.log(Parameter)\n  //     const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\n  //     let data = DataSortTime(response)\n  //     LogValue[BufferName] = data\n  //     console.log(data);\n  //     setState(({ count }) => ({ count: count + 1 }));\n  // }\n\n  const BarChartInit = async () => {\n    setLoading(true); // console.log(Parameter)\n\n    stackedColumnPlot.changeData(Dailydata);\n    setLoading(false); // setState(({ count }) => ({ count: count + 1 }));\n  };\n\n  const LogColumb = [{\n    title: 'DateTime',\n    width: 70,\n    dataIndex: 'DateTime',\n    key: 'DateTime',\n    align: 'center',\n    sorter: (a, b) => new Date(moment(a.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")) - new Date(moment(b.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")),\n    sortOrder: sortedInfo.columnKey === 'DateTime' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '50 kG',\n    width: 70,\n    dataIndex: 'Line50kg',\n    key: 'Line50kg',\n    align: 'center',\n    sorter: (a, b) => a.Line50kg - b.Line50kg,\n    sortOrder: sortedInfo.columnKey === 'Line50kg' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '1 kG',\n    width: 70,\n    dataIndex: 'Line1kg',\n    key: 'Line1kg',\n    align: 'center',\n    sorter: (a, b) => a.Line1kg - b.Line1kg,\n    sortOrder: sortedInfo.columnKey === 'Line1kg' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '2 kG',\n    width: 70,\n    dataIndex: 'Line2kg',\n    key: 'Line2kg',\n    align: 'center',\n    sorter: (a, b) => a.Line2kg - b.Line2kg,\n    sortOrder: sortedInfo.columnKey === 'Line2kg' ? sortedInfo.order : null,\n    ellipsis: true\n  }, {\n    title: '1 Ton',\n    width: 70,\n    dataIndex: 'Line1Ton',\n    key: 'Line1Ton',\n    align: 'center',\n    sorter: (a, b) => a.Line1Ton - b.Line1Ton,\n    sortOrder: sortedInfo.columnKey === 'Line1Ton' ? sortedInfo.order : null,\n    ellipsis: true\n  }];\n\n  const DailyLogRequest = async () => {\n    let response = await MSM_logdata_request(RequestDataOption, RequestDateRange[0], RequestDateRange[1]); //  let responseSorted = LogDataMappingTimeMSM(MSMTable,response)   \n\n    responseSorted = LogDataMappingNameMSM(MSMTable, DataSortTimeMSM(response));\n    console.log(responseSorted);\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  const ChangeDateRange = (value, name) => {\n    // console.log(RequestDateRange);\n    RequestDateRange = [];\n    RequestDateRange = ConvertMonentToDateTime(value);\n    console.log(name); // console.log(RequestDateRange);\n  };\n\n  const ChangeOption = value => {\n    console.log(`selected ${value}`);\n    RequestDataOption = [];\n    RequestDataOption.push(value); // console.log(RequestDataOption);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        children: \"Daily Count Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Spin, {\n      tip: \"Loading...\",\n      spinning: Loading,\n      size: \"large\",\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        title: 'Weekly Record',\n        bordered: true,\n        style: {\n          width: '100%',\n          borderRadius: 15,\n          backgroundColor: '#ffffff'\n        },\n        hoverable: true,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"container\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        children: \"Daily Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(RangePicker, {\n        onChange: e => ChangeDateRange(this, 'test')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        style: {\n          marginLeft: '10px'\n        },\n        children: /*#__PURE__*/_jsxDEV(CSVLink, {\n          data: responseSorted,\n          target: \"_blank\",\n          filename: \"DataLog.csv\",\n          headers: headers,\n          children: \"Export\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        style: {\n          marginLeft: '10px'\n        },\n        onClick: () => {\n          DailyLogRequest();\n        },\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Daily Log\",\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15,\n        marginBottom: '10px'\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        columns: LogColumb,\n        dataSource: responseSorted,\n        size: \"small\",\n        scroll: {\n          y: 500\n        },\n        onChange: handleChangeOverall,\n        pagination: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '16px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          height: '540px',\n          backgroundColor: 'AppWorkspace',\n          border: '3px outset'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          level: 1,\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \" Counter Log  \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            paddingBottom: '10px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(RangePicker, {\n            onChange: ChangeDateRange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            defaultValue: \"Line50kg\",\n            style: {\n              width: 100,\n              marginLeft: '10px'\n            },\n            onChange: ChangeOption,\n            children: [/*#__PURE__*/_jsxDEV(Option, {\n              value: \"Line50kg\",\n              children: \"Line50kg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"Line1kg\",\n              children: \"Line1kg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"Line2kg\",\n              children: \"Line2kg\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Option, {\n              value: \"Line1Ton\",\n              children: \"Line1Ton\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            style: {\n              marginLeft: '10px'\n            },\n            children: /*#__PURE__*/_jsxDEV(CSVLink, {\n              data: EventLogSorted,\n              target: \"_blank\",\n              filename: \"EventLog.csv\",\n              headers: headers,\n              children: \"Export\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            style: {\n              marginLeft: '10px'\n            },\n            onClick: () => {\n              EvenLogRequest();\n            },\n            children: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          bordered: true,\n          columns: LogColumbPerTime,\n          dataSource: EventLogSorted,\n          scroll: {\n            x: 600,\n            y: 350\n          },\n          pagination: false,\n          size: \"small\",\n          onChange: handleChangePertime\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EnergyUsage, \"FJEzhj9oWUscaAjS6nRUStfQHqE=\");\n\n_c = EnergyUsage;\nexport default EnergyUsage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EnergyUsage\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/MSM-Front/MSM/src/pages/EnergyUsage/EnergyUsage.jsx"],"names":["Button","Col","Divider","Row","DatePicker","Card","Table","Select","Spin","React","useState","useEffect","logdata_request","MSM_EventLog_request","MSM_logdata_request","C3Model","C3ModelMap","G2Model","MSMTable","DummyData","ConvertMonentToDateTime","EventSortTimeMSM","GetDateTime","DataSortTimeMSM","LogDataMappingTime","LogDataMappingTimeMSM","LogDataMappingNameMSM","Line","Column","moment","CSVLink","CSVDownload","DTinitial","DTinitial2","RequestDataOption","RequestDateRange","responseSorted","annotations","EventLogRequestRange","EventLogSorted","Dailydata","DateTime","type","Value","DailyLogTable","headers","label","key","RangePicker","Option","line","stackedColumnPlot","EnergyUsage","state","setState","count","Loading","setLoading","sortedInfo","setSortedInfo","handleChangeOverall","pagination","filters","sorter","console","log","EvenLogRequest","response","DailyLogRequestRange","data","isStack","xField","yField","seriesField","position","layout","render","destroy","BarChartInit","changeData","LogColumb","title","width","dataIndex","align","a","b","Date","format","sortOrder","columnKey","order","ellipsis","Line50kg","Line1kg","Line2kg","Line1Ton","DailyLogRequest","ChangeDateRange","value","name","ChangeOption","push","paddingBottom","borderRadius","backgroundColor","e","marginLeft","marginBottom","y","marginTop","height","border","fontWeight","LogColumbPerTime","x","handleChangePertime"],"mappings":"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","sourcesContent":["import { Button, Col, Divider, Row, DatePicker, Card, Table, Select, Spin } from 'antd'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { logdata_request, MSM_EventLog_request, MSM_logdata_request } from '../../api'\r\nimport { C3Model, C3ModelMap, G2Model, MSMTable, DummyData } from '../../DataRequest/DataModel'\r\nimport {\r\n    ConvertMonentToDateTime, EventSortTimeMSM, GetDateTime,\r\n    DataSortTimeMSM, LogDataMappingTime, LogDataMappingTimeMSM,\r\n    LogDataMappingNameMSM\r\n} from '../../DataRequest/LogDataRequestWrap'\r\nimport { Line, Column } from '@antv/g2plot';\r\nimport moment from 'moment';\r\nimport { CSVLink, CSVDownload } from \"react-csv\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nlet DTinitial = GetDateTime(0, 1)  // get from yesterday 00:00 to today 00:00\r\nlet DTinitial2 = GetDateTime(0, 1)  // get from yesterday 00:00 to today 00:00\r\n\r\n\r\nlet RequestDataOption = ['Line50kg', 'Line1kg', 'Line2kg', 'Line1Ton']\r\nlet RequestDateRange = [DTinitial[0], DTinitial[1]]\r\nlet responseSorted = []\r\nconst annotations = [];\r\n\r\nlet EventLogRequestRange = [DTinitial2[0], DTinitial2[1]]\r\nlet EventLogSorted = []\r\n\r\n\r\n\r\nconst Dailydata = [\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line50kg',\r\n        Value: 245,\r\n    },\r\n\r\n\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 543,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 463,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 234,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 54,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 643,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 76,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line1kg',\r\n        Value: 876,\r\n    },\r\n\r\n\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 543,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 463,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 234,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 54,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 643,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 76,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line2kg',\r\n        Value: 876,\r\n    },\r\n\r\n\r\n    {\r\n        DateTime: '24/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 564,\r\n    },\r\n    {\r\n        DateTime: '25/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 23,\r\n    },\r\n    {\r\n        DateTime: '26/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 64,\r\n    },\r\n    {\r\n        DateTime: '27/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 76,\r\n    },\r\n    {\r\n        DateTime: '28/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 23,\r\n    },\r\n    {\r\n        DateTime: '29/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 46,\r\n    },\r\n    {\r\n        DateTime: '30/5/2022',\r\n        type: 'Line1Ton',\r\n        Value: 86,\r\n    },\r\n]\r\n\r\n\r\nconst DailyLogTable = [\r\n\r\n]\r\n\r\nconst headers = [\r\n    { label: \"DateTime\", key: \"DateTime\" },\r\n    { label: \"Line50kg\", key: \"Line50kg\" },\r\n    { label: \"Line1kg\", key: \"Line1kg\" },\r\n    { label: \"Line2kg\", key: \"Line2kg\" },\r\n    { label: \"Line1Ton\", key: \"Line1Ton\" },\r\n\r\n  ];\r\n\r\n\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\nlet line, stackedColumnPlot\r\n\r\nconst EnergyUsage = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n    const [Loading, setLoading] = useState(false);\r\n    const [sortedInfo, setSortedInfo] = useState({});\r\n\r\n    const handleChangeOverall = (pagination, filters, sorter) => {\r\n        console.log('Various parameters', pagination, filters, sorter);\r\n        setSortedInfo(sorter);\r\n    };\r\n\r\n    const EvenLogRequest = async () => {\r\n        let response = await MSM_EventLog_request(RequestDataOption, DailyLogRequestRange[0], DailyLogRequestRange[1])\r\n        //  let DailyLogSorted = LogDataMappingTimeMSM(MSMTable,response)   \r\n        EventLogSorted = EventSortTimeMSM(response)\r\n        console.log(EventLogSorted);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n        }\r\n\r\n    useEffect(() => {\r\n        console.log('Reffect');\r\n\r\n        //  BarChartInit()\r\n\r\n        stackedColumnPlot = new Column('container', {\r\n            data: Dailydata,\r\n            isStack: true,\r\n            xField: 'DateTime',\r\n            yField: 'Value',\r\n            seriesField: 'type',\r\n            label: {\r\n                position: 'middle',\r\n                layout: [\r\n                    { type: 'interval-adjust-position' },\r\n                    { type: 'interval-hide-overlap' },\r\n                    { type: 'adjust-color' },\r\n                ],\r\n            },\r\n            annotations,\r\n        });\r\n\r\n        try { stackedColumnPlot.render(); }\r\n        catch { }\r\n\r\n        return () => {\r\n            stackedColumnPlot.destroy()\r\n        }\r\n    }, [])\r\n\r\n    // const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n    //     console.log(Parameter)\r\n    //     const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n    //     let data = DataSortTime(response)\r\n    //     LogValue[BufferName] = data\r\n    //     console.log(data);\r\n    //     setState(({ count }) => ({ count: count + 1 }));\r\n    // }\r\n\r\n    const BarChartInit = async () => {\r\n        setLoading(true)\r\n        // console.log(Parameter)\r\n\r\n        stackedColumnPlot.changeData(Dailydata)\r\n        setLoading(false)\r\n        // setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n\r\n    const LogColumb = [\r\n        {\r\n            title: 'DateTime',\r\n            width: 70,\r\n            dataIndex: 'DateTime',\r\n            key: 'DateTime',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) =>\r\n                new Date(moment(a.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")) -\r\n                new Date(moment(b.DateTime, \"YYYY/MM/DD hh:mm:ss \").format(\"LLL\")),\r\n\r\n            sortOrder: sortedInfo.columnKey === 'DateTime' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '50 kG',\r\n            width: 70,\r\n            dataIndex: 'Line50kg',\r\n            key: 'Line50kg',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line50kg - b.Line50kg,\r\n            sortOrder: sortedInfo.columnKey === 'Line50kg' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '1 kG',\r\n            width: 70,\r\n            dataIndex: 'Line1kg',\r\n            key: 'Line1kg',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line1kg - b.Line1kg,\r\n            sortOrder: sortedInfo.columnKey === 'Line1kg' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '2 kG',\r\n            width: 70,\r\n            dataIndex: 'Line2kg',\r\n            key: 'Line2kg',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line2kg - b.Line2kg,\r\n            sortOrder: sortedInfo.columnKey === 'Line2kg' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n        {\r\n            title: '1 Ton',\r\n            width: 70,\r\n            dataIndex: 'Line1Ton',\r\n            key: 'Line1Ton',\r\n            align: 'center',\r\n\r\n            sorter: (a, b) => a.Line1Ton - b.Line1Ton,\r\n            sortOrder: sortedInfo.columnKey === 'Line1Ton' ? sortedInfo.order : null,\r\n            ellipsis: true,\r\n        },\r\n\r\n    ]\r\n\r\n    const DailyLogRequest = async () => {\r\n        let response = await MSM_logdata_request(RequestDataOption, RequestDateRange[0], RequestDateRange[1])\r\n        //  let responseSorted = LogDataMappingTimeMSM(MSMTable,response)   \r\n        responseSorted = LogDataMappingNameMSM(MSMTable, DataSortTimeMSM(response))\r\n        console.log(responseSorted);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n\r\n    }\r\n\r\n    const ChangeDateRange = (value, name) => {\r\n        // console.log(RequestDateRange);\r\n        RequestDateRange = []\r\n        RequestDateRange = ConvertMonentToDateTime(value)\r\n        console.log(name);\r\n        // console.log(RequestDateRange);\r\n    }\r\n\r\n\r\n    const ChangeOption = (value) => {\r\n        console.log(`selected ${value}`);\r\n        RequestDataOption = []\r\n        RequestDataOption.push(value)\r\n        // console.log(RequestDataOption);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <Divider orientation=\"left\">Daily Count Log</Divider>\r\n            </div>\r\n\r\n\r\n            <Spin tip=\"Loading...\" spinning={Loading} size=\"large\">\r\n                <Card title={'Weekly Record'} bordered={true} style={{ width: '100%', borderRadius: 15, backgroundColor: '#ffffff' }} hoverable={true}>\r\n                    <div id='container'></div>\r\n                </Card>\r\n            </Spin>\r\n\r\n\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <Divider orientation=\"left\">Daily Log</Divider>\r\n            </div>\r\n\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <RangePicker onChange={ (e) => ChangeDateRange(this, 'test') } />\r\n\r\n                {/* <Select defaultValue=\"Line50kg\" style={{ width: 100, marginLeft: '10px' }} onChange={ChangeOption}>\r\n                    <Option value=\"Line50kg\">Line50kg</Option>\r\n                    <Option value=\"Line1kg\">Line1kg</Option>\r\n                    <Option value=\"Line2kg\">Line2kg</Option>\r\n                    <Option value=\"Line1Ton\">Line1Ton</Option>\r\n                </Select> */}\r\n\r\n                <Button type='primary' style={{ marginLeft: '10px' }} >\r\n                    <CSVLink data={responseSorted} target=\"_blank\" filename={\"DataLog.csv\"} headers={headers}>\r\n                        Export\r\n                    </CSVLink>\r\n                </Button>\r\n\r\n\r\n\r\n                <Button type='primary' style={{ marginLeft: '10px' }} onClick={() => { DailyLogRequest() }}>Update</Button>\r\n            </div>\r\n\r\n\r\n            <Card title='Daily Log' bordered={true}\r\n                style={{ width: '100%', borderRadius: 15, marginBottom: '10px' }} hoverable={true}>\r\n                <Table bordered columns={LogColumb} dataSource={responseSorted} size=\"small\" scroll={{ y: 500 }}\r\n                    onChange={handleChangeOverall} pagination={false} />\r\n            </Card>\r\n\r\n            <div style={{ marginTop: '16px' }}>\r\n\r\n\r\n\r\n<Card style={{ height: '540px', backgroundColor: 'AppWorkspace', border: '3px outset' }} >\r\n\r\n    <Title level={1} style={{ fontWeight: 'bold' }}> Counter Log  </Title>\r\n\r\n    <div style={{ paddingBottom: '10px' }}>\r\n        <RangePicker onChange={ChangeDateRange} />\r\n\r\n        <Select defaultValue=\"Line50kg\" style={{ width: 100, marginLeft: '10px' }} onChange={ChangeOption}>\r\n            <Option value=\"Line50kg\">Line50kg</Option>\r\n            <Option value=\"Line1kg\">Line1kg</Option>\r\n            <Option value=\"Line2kg\">Line2kg</Option>\r\n            <Option value=\"Line1Ton\">Line1Ton</Option>\r\n        </Select>\r\n\r\n        <Button type='primary' style={{ marginLeft: '10px' }} >\r\n            <CSVLink data={EventLogSorted} target=\"_blank\" filename={\"EventLog.csv\"} headers={headers}>\r\n                Export\r\n            </CSVLink>\r\n        </Button>\r\n\r\n\r\n\r\n        <Button type='primary' style={{ marginLeft: '10px' }} onClick={() => { EvenLogRequest() }}>Update</Button>\r\n    </div>\r\n\r\n    <Table bordered columns={LogColumbPerTime} dataSource={EventLogSorted} scroll={{ x: 600, y: 350 }} pagination={false} size=\"small\" onChange={handleChangePertime} />\r\n</Card>\r\n\r\n</div>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EnergyUsage\r\n\r\n"]},"metadata":{},"sourceType":"module"}