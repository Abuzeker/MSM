{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1Report.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Col, DatePicker, Divider, Row, Table } from 'antd';\nimport { logdata_request } from '../../api';\nimport { DataSortTime, GetDateTime, LogDataMappingTime, SetDateRange, TableColumbTimeAsRow } from '../../DataRequest/LogDataRequestWrap';\nimport { C3Model } from '../../DataRequest/DataModel';\nimport { Page, Text, View, Document, StyleSheet, PDFViewer } from '@react-pdf/renderer';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport ReportWrapper from '../Report/ReportWrapper';\nimport { Redirect } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": []\n};\nconst Columb = TableColumbTimeAsRow();\n\nconst Line1Report = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n\n  const TestGet = () => {\n    let DateTimeRange = GetDateTime(1);\n    UpdateTableData([], DateTimeRange[0], DateTimeRange[1], 'Polymerlink', 'C3', '1');\n  };\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page); //console.log(response);\n\n    let da = DataSortTime(response);\n    LogValue['LogC3'] = LogDataMappingTime(C3Model, da); //console.log(LogValue['LogC3']);\n\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const SetTimeRange = value => {\n    const DateRange = SetDateRange(value);\n    UpdateTableData([], DateRange[0], DateRange[1], 'Polymerlink', 'C3', '1');\n  };\n\n  const convertCanvas = () => {\n    const input = document.getElementById(\"capture\");\n    html2canvas(input, {\n      scrollX: -window.scrollX\n    }, {\n      scale: 6\n    }).then(canvas => {\n      const imgData = canvas.toDataURL(\"image/jpeg\");\n      const pdf = new jsPDF({\n        orientation: 'landscape',\n        type: 'a4'\n      }); //const imgProps = pdf.getImageProperties(imgData);\n\n      const pdfWidth = pdf.internal.pageSize.getWidth();\n      const pdfHeight = pdf.internal.pageSize.getHeight();\n      pdf.addImage(imgData, 'SVG', 0, 0, pdfWidth, pdfHeight);\n      pdf.save('download.pdf');\n    });\n  };\n\n  const redirection = () => {\n    return /*#__PURE__*/_jsxDEV(ReportWrapper, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"capture\",\n        style: {},\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          columns: Columb,\n          dataSource: LogValue['LogC3'],\n          bordered: true,\n          scroll: {\n            x: 2000,\n            y: 500\n          },\n          pagination: false,\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      onChange: SetTimeRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: redirection,\n      children: \" test \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: convertCanvas,\n      children: \" export \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: '/Testpage2',\n        redirection\n      },\n      children: \"My route\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      columns: Columb,\n      dataSource: LogValue['LogC3'],\n      bordered: true,\n      scroll: {\n        x: 2000,\n        y: 500\n      },\n      pagination: false,\n      size: \"small\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1Report, \"TOtJj3Zjk9A8N3grQNDDe2GZezA=\");\n\n_c = Line1Report;\nexport default Line1Report;\n\nvar _c;\n\n$RefreshReg$(_c, \"Line1Report\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1Report.jsx"],"names":["React","useState","useEffect","Button","Col","DatePicker","Divider","Row","Table","logdata_request","DataSortTime","GetDateTime","LogDataMappingTime","SetDateRange","TableColumbTimeAsRow","C3Model","Page","Text","View","Document","StyleSheet","PDFViewer","html2canvas","jsPDF","ReportWrapper","Redirect","Link","LogValue","Columb","Line1Report","state","setState","count","TestGet","DateTimeRange","UpdateTableData","Parameter","StartTime","EndTime","Site","Line","response","da","SetTimeRange","value","DateRange","convertCanvas","input","document","getElementById","scrollX","window","scale","then","canvas","imgData","toDataURL","pdf","orientation","type","pdfWidth","internal","pageSize","getWidth","pdfHeight","getHeight","addImage","save","redirection","x","y","pathname"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Button, Col, DatePicker, Divider, Row, Table } from 'antd'\r\nimport { logdata_request } from '../../api';\r\nimport { DataSortTime, GetDateTime, LogDataMappingTime, SetDateRange, TableColumbTimeAsRow } from '../../DataRequest/LogDataRequestWrap';\r\nimport { C3Model } from '../../DataRequest/DataModel';\r\nimport { Page, Text, View, Document, StyleSheet, PDFViewer } from '@react-pdf/renderer';\r\nimport html2canvas from 'html2canvas';\r\nimport jsPDF from 'jspdf';\r\nimport ReportWrapper from '../Report/ReportWrapper';\r\nimport { Redirect } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n}\r\n\r\nconst Columb = TableColumbTimeAsRow()\r\n\r\nconst Line1Report = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n\r\n    const TestGet = () => {\r\n        let DateTimeRange = GetDateTime(1)\r\n        UpdateTableData([], DateTimeRange[0], DateTimeRange[1], 'Polymerlink', 'C3', '1')\r\n    }\r\n\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        //console.log(response);\r\n        let da = DataSortTime(response)\r\n        LogValue['LogC3'] = LogDataMappingTime(C3Model, da)\r\n        //console.log(LogValue['LogC3']);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n\r\n    }\r\n\r\n    const SetTimeRange = (value) => {\r\n        const DateRange = SetDateRange(value)\r\n        UpdateTableData([], DateRange[0], DateRange[1], 'Polymerlink', 'C3', '1')\r\n    }\r\n\r\n    const convertCanvas = () => {\r\n        const input = document.getElementById(\"capture\");\r\n\r\n        html2canvas(input, { scrollX: -window.scrollX }, { scale: 6 })\r\n            .then((canvas) => {\r\n                const imgData = canvas.toDataURL(\"image/jpeg\");\r\n                const pdf = new jsPDF({\r\n                    orientation: 'landscape',\r\n                    type: 'a4'\r\n                });\r\n                //const imgProps = pdf.getImageProperties(imgData);\r\n                const pdfWidth = pdf.internal.pageSize.getWidth();\r\n                const pdfHeight = pdf.internal.pageSize.getHeight();\r\n                pdf.addImage(imgData, 'SVG', 0, 0, pdfWidth, pdfHeight);\r\n                pdf.save('download.pdf');\r\n            });\r\n    }\r\n\r\n    const redirection = () => {\r\n        return (\r\n            <ReportWrapper>\r\n                <div id='capture' style={{}}>\r\n                    <Table columns={Columb} dataSource={LogValue['LogC3']} bordered scroll={{ x: 2000, y: 500 }} pagination={false} size=\"small\" />\r\n                </div>\r\n            </ReportWrapper>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <DatePicker onChange={SetTimeRange} />\r\n            <Button onClick={redirection}> test </Button>\r\n            <Button onClick={convertCanvas}> export </Button>\r\n            <Link to={{ pathname: '/Testpage2', redirection }}>My route</Link>\r\n\r\n            <Table columns={Columb} dataSource={LogValue['LogC3']} bordered scroll={{ x: 2000, y: 500 }} pagination={false} size=\"small\" />\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Line1Report\r\n"]},"metadata":{},"sourceType":"module"}