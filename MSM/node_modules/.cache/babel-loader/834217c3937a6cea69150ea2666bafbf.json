{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1Report.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { DeleteJob, logdata_request, ReadJob, WriteJob } from '../../api';\nimport { DataSortTime, LogDataMappingTime, TableColumbTimeAsRow, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob, SortToArrayExcel, ExportExcelWorkBook } from '../../DataRequest/LogDataRequestWrap';\nimport { C3Model, G2Model, JobModel } from '../../DataRequest/DataModel';\nimport TimeTableWrapper from '../Report/TimeTableWrapper';\nimport NameTableWrapper from '../Report/NameTableWrapper';\nimport ReportWrapper from '../Report/ReportWrapper';\nimport { Button, message } from 'antd';\nimport ReportListWrapper from '../Report/ReportListWrapper';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": []\n};\nlet ReportList = {\n  \"C3ReportList\": [],\n  \"G2ReportList\": []\n};\nlet ReportInfoG2 = {};\nlet ReportInfoC3 = {};\nlet BlankPage;\nconst ColumbC3 = TableColumbLabelAsRow(C3Model);\n_c = ColumbC3;\nconst ColumbG2 = TableColumbLabelAsRow(G2Model);\n_c2 = ColumbG2;\n\nconst Line1Report = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n\n  const JobDeleteHandler = (jobnumber, line) => {\n    console.log(jobnumber); // const response = await DeleteJob(line, page, jobnumber)\n    // if (response.success === true) {\n    //     message.success(`Job ${jobnumber} Deleted`)\n    // }\n    // else {\n    //     message.error(`Unable to Delete Job ${jobnumber}`)\n    // }\n  };\n\n  const DataRequestC3 = row => {\n    let TimeRange = [];\n    TimeRange[0] = moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    TimeRange[1] = moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    ReportInfoC3.Info1 = row['Job No'];\n    ReportInfoC3.Info2 = row['Start Time'];\n    ReportInfoC3.Info3 = row['End Time'];\n    ReportInfoC3.Info4 = row['Color'];\n    ReportInfoC3.Info5 = row['Grade'];\n    UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'C3', '1', 'LogC3', C3Model);\n  };\n\n  const ColumbJobC3 = TableColumbJob(JobModel, DataRequestC3, JobDeleteHandler, 'C3', '1');\n\n  const DataRequestG2 = row => {\n    // console.log(row)\n    let TimeRange = [];\n    TimeRange[0] = moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    TimeRange[1] = moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    ReportInfoG2.Info1 = row['Job No'];\n    ReportInfoG2.Info2 = row['Start Time'];\n    ReportInfoG2.Info3 = row['End Time'];\n    ReportInfoG2.Info4 = row['Color'];\n    ReportInfoG2.Info5 = row['Grade'];\n    console.log(ReportInfoG2);\n    UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model);\n  };\n\n  const ColumbJobG2 = TableColumbJob(JobModel, DataRequestG2, JobDeleteHandler, 'G2', BlankPage);\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    let data = DataSortTime(response);\n    console.log(data);\n    LogValue[BufferName] = LogDataMappingName(Model, data);\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\n    const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line);\n\n    if (response.success === true) {\n      message.success('Create Success !');\n    }\n  };\n\n  const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\n    const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line);\n    let data = ReportSort(response);\n    ReportList[BufferName] = data; //console.log(data);\n\n    setState(_ref2 => {\n      let {\n        count\n      } = _ref2;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ReportWrapper, {\n      CreateJobCallBack: CreateJob,\n      site: 'Polymerlink',\n      line: 'C3'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportListWrapper, {\n      ReportListCallBack: RequestJob,\n      site: 'Polymerlink',\n      line: 'C3',\n      ReportList: ReportList['C3ReportList'],\n      Columb: ColumbJobC3,\n      BufferName: \"C3ReportList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NameTableWrapper, {\n      SetTimeRangeCallBack: UpdateTableData,\n      LogValue: LogValue['LogC3'],\n      Columb: ColumbC3,\n      site: 'C3',\n      page: '1',\n      BufferName: \"LogC3\",\n      Model: C3Model,\n      JobInfo: ReportInfoC3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1Report, \"TOtJj3Zjk9A8N3grQNDDe2GZezA=\");\n\n_c3 = Line1Report;\nexport default Line1Report;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ColumbC3\");\n$RefreshReg$(_c2, \"ColumbG2\");\n$RefreshReg$(_c3, \"Line1Report\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1Report.jsx"],"names":["React","useState","useEffect","DeleteJob","logdata_request","ReadJob","WriteJob","DataSortTime","LogDataMappingTime","TableColumbTimeAsRow","TableColumbLabelAsRow","LogDataMappingName","ReportSort","TableColumbJob","SortToArrayExcel","ExportExcelWorkBook","C3Model","G2Model","JobModel","TimeTableWrapper","NameTableWrapper","ReportWrapper","Button","message","ReportListWrapper","moment","LogValue","ReportList","ReportInfoG2","ReportInfoC3","BlankPage","ColumbC3","ColumbG2","Line1Report","state","setState","count","JobDeleteHandler","jobnumber","line","console","log","DataRequestC3","row","TimeRange","toISOString","split","Info1","Info2","Info3","Info4","Info5","UpdateTableData","ColumbJobC3","DataRequestG2","ColumbJobG2","Parameter","StartTime","EndTime","Site","Line","Page","BufferName","Model","response","data","CreateJob","info","datetimeStart","datetimeEnd","site","success","RequestJob"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { DeleteJob, logdata_request, ReadJob, WriteJob } from '../../api';\r\nimport { DataSortTime, LogDataMappingTime, TableColumbTimeAsRow, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob, SortToArrayExcel, ExportExcelWorkBook } from '../../DataRequest/LogDataRequestWrap';\r\nimport { C3Model, G2Model, JobModel } from '../../DataRequest/DataModel';\r\nimport TimeTableWrapper from '../Report/TimeTableWrapper';\r\nimport NameTableWrapper from '../Report/NameTableWrapper';\r\nimport ReportWrapper from '../Report/ReportWrapper';\r\nimport { Button, message } from 'antd';\r\nimport ReportListWrapper from '../Report/ReportListWrapper';\r\nimport moment from 'moment';\r\n\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n}\r\n\r\nlet ReportList = {\r\n    \"C3ReportList\": [],\r\n    \"G2ReportList\": []\r\n}\r\n\r\nlet ReportInfoG2 = {}\r\nlet ReportInfoC3 = {}\r\n\r\n\r\nlet BlankPage\r\n\r\nconst ColumbC3 = TableColumbLabelAsRow(C3Model)\r\nconst ColumbG2 = TableColumbLabelAsRow(G2Model)\r\n\r\nconst Line1Report = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    const JobDeleteHandler =  ( jobnumber, line) => {\r\n        console.log(jobnumber);\r\n        // const response = await DeleteJob(line, page, jobnumber)\r\n\r\n        // if (response.success === true) {\r\n        //     message.success(`Job ${jobnumber} Deleted`)\r\n        // }\r\n\r\n        // else {\r\n        //     message.error(`Unable to Delete Job ${jobnumber}`)\r\n        // }\r\n    }\r\n\r\n    const DataRequestC3 = (row) => {\r\n\r\n        let TimeRange = []\r\n\r\n        TimeRange[0] = (moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\")\r\n        TimeRange[1] = (moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\")).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n        ReportInfoC3.Info1 = row['Job No']\r\n        ReportInfoC3.Info2 = row['Start Time']\r\n        ReportInfoC3.Info3 = row['End Time']\r\n        ReportInfoC3.Info4 = row['Color']\r\n        ReportInfoC3.Info5 = row['Grade']\r\n        UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'C3', '1', 'LogC3', C3Model)\r\n\r\n    }\r\n\r\n    const ColumbJobC3 = TableColumbJob(JobModel, DataRequestC3, JobDeleteHandler, 'C3', '1')\r\n\r\n\r\n    const DataRequestG2 = (row) => {\r\n\r\n        // console.log(row)\r\n\r\n        let TimeRange = []\r\n\r\n        TimeRange[0] = (moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\")\r\n        TimeRange[1] = (moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\")).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n        ReportInfoG2.Info1 = row['Job No']\r\n        ReportInfoG2.Info2 = row['Start Time']\r\n        ReportInfoG2.Info3 = row['End Time']\r\n        ReportInfoG2.Info4 = row['Color']\r\n        ReportInfoG2.Info5 = row['Grade']\r\n\r\n        console.log(ReportInfoG2);\r\n\r\n\r\n        UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model)\r\n    }\r\n    const ColumbJobG2 = TableColumbJob(JobModel, DataRequestG2, JobDeleteHandler, 'G2', BlankPage)\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        let data = DataSortTime(response)\r\n        console.log(data);\r\n\r\n        LogValue[BufferName] = LogDataMappingName(Model, data)\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\r\n        const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line)\r\n        if (response.success === true) {\r\n            message.success('Create Success !')\r\n        }\r\n    }\r\n\r\n    const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\r\n        const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line)\r\n        let data = ReportSort(response)\r\n        ReportList[BufferName] = data\r\n        //console.log(data);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* C3 part here */}\r\n            <ReportWrapper CreateJobCallBack={CreateJob}\r\n                site={'Polymerlink'} line={'C3'}\r\n            />\r\n\r\n            <ReportListWrapper ReportListCallBack={RequestJob}\r\n                site={'Polymerlink'} line={'C3'}\r\n                ReportList={ReportList['C3ReportList']}\r\n                Columb={ColumbJobC3}\r\n                BufferName={\"C3ReportList\"}\r\n            />\r\n\r\n            <NameTableWrapper SetTimeRangeCallBack={UpdateTableData}\r\n                LogValue={LogValue['LogC3']} Columb={ColumbC3}\r\n                site={'C3'} page={'1'} BufferName={\"LogC3\"} Model={C3Model}\r\n                JobInfo={ReportInfoC3}\r\n            />\r\n\r\n            {/* G2 part here */}\r\n            {/* <ReportWrapper CreateJobCallBack={CreateJob}\r\n                site={'Polymerlink'} line={'G2'}\r\n            />\r\n\r\n            <ReportListWrapper ReportListCallBack={RequestJob}\r\n                site={'Polymerlink'} line={'G2'}\r\n                ReportList={ReportList['G2ReportList']}\r\n                Columb={ColumbJobG2}\r\n                BufferName={\"G2ReportList\"}\r\n            />\r\n\r\n            <NameTableWrapper SetTimeRangeCallBack={UpdateTableData}\r\n                LogValue={LogValue['LogG2']} Columb={ColumbG2}\r\n                site={'G2'} page={BlankPage} BufferName={\"LogG2\"} Model={G2Model}\r\n                JobInfo={ReportInfoG2}\r\n            /> */}\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Line1Report\r\n"]},"metadata":{},"sourceType":"module"}