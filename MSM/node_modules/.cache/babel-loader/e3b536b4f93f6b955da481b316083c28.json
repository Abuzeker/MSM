{"ast":null,"code":"import _slicedToArray from\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Button,Card,Select}from'antd';import{Line}from'@antv/g2plot';import{GraphDataFind}from'../../DataRequest/RealTimeRequestWrap';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Option=Select.Option;// let line\nvar RealTimeGraphWrapper=function RealTimeGraphWrapper(props){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),OptionSelected=_useState2[0],setOptionSelected=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),Graph=_useState4[0],setGraph=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),line=_useState6[0],setline=_useState6[1];var _useState7=useState({re:0}),_useState8=_slicedToArray(_useState7,2),state=_useState8[0],setstate=_useState8[1];var LabelOption=[];var LabelList=Object.keys(props.DataModel);LabelList.forEach(function(element){LabelOption.push(/*#__PURE__*/_jsx(Option,{children:element},element));});var handleChange=function handleChange(value){setOptionSelected(value);};var HistoryClear=function HistoryClear(){line.update();setGraph([]);};var renderline=function renderline(){try{line.render();setstate(function(_ref){var re=_ref.re;return{re:re+1};});}catch(_unused){}};var UpdateData=function UpdateData(){state.re===0?renderline():console.log('Already Render');var GraphBuffer=GraphDataFind(OptionSelected,props.RawDataReceive);if(GraphBuffer.length===0){}else{GraphBuffer.forEach(function(element){Graph.push(element);});try{line.changeData(Graph);}catch(_unused2){}}};useEffect(function(){console.log('Reffect');setline(new Line(props.Divname,{data:Graph,xField:'time',yField:'Value',seriesField:'Label'}));try{line.render();}catch(_unused3){}return function(){console.log('un');try{line.destroy();}catch(_unused4){}};},[]);console.log(props.GarphTitle);UpdateData();return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Select,{mode:\"multiple\",placeholder:\"Please select\",onChange:handleChange,style:{width:'100%'},children:LabelOption}),/*#__PURE__*/_jsx(Button,{onClick:HistoryClear,children:\" Clear \"})]}),/*#__PURE__*/_jsx(Card,{title:props.GarphTitle,bordered:true,style:{width:'100%',borderRadius:15,backgroundColor:'#f0f9fa'},hoverable:true,children:/*#__PURE__*/_jsx(\"div\",{id:props.Divname})})]});};export default RealTimeGraphWrapper;","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Realtime/RealTimeGraphWrapper.jsx"],"names":["React","useState","useEffect","Button","Card","Select","Line","GraphDataFind","Option","RealTimeGraphWrapper","props","OptionSelected","setOptionSelected","Graph","setGraph","line","setline","re","state","setstate","LabelOption","LabelList","Object","keys","DataModel","forEach","element","push","handleChange","value","HistoryClear","update","renderline","render","UpdateData","console","log","GraphBuffer","RawDataReceive","length","changeData","Divname","data","xField","yField","seriesField","destroy","GarphTitle","width","borderRadius","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Button, Card, Select } from 'antd';\r\nimport { Line } from '@antv/g2plot';\r\nimport { GraphDataFind } from '../../DataRequest/RealTimeRequestWrap';\r\n\r\nconst { Option } = Select;\r\n\r\n// let line\r\n\r\nconst RealTimeGraphWrapper = (props) => {\r\n\r\n    const [OptionSelected, setOptionSelected] = useState([])\r\n    const [Graph, setGraph] = useState([])\r\n    const [line, setline] = useState()\r\n    const [state, setstate] = useState({re:0})\r\n\r\n    const LabelOption = []\r\n    const LabelList = Object.keys(props.DataModel)\r\n\r\n    LabelList.forEach(element => {\r\n        LabelOption.push(<Option key={element}>{element}</Option>);\r\n    });\r\n\r\n    const handleChange = (value) => {\r\n        setOptionSelected(value)\r\n    }\r\n\r\n    const HistoryClear = () => {\r\n        line.update()\r\n        setGraph([])\r\n    }\r\n\r\n    const renderline = () =>{\r\n        try { \r\n            line.render()\r\n            setstate(({ re }) => ({ re: re + 1 }));\r\n         }\r\n        catch { }\r\n    }\r\n\r\n    const UpdateData = () => {\r\n\r\n        state.re === 0 ? renderline() : console.log('Already Render');\r\n\r\n        let GraphBuffer = GraphDataFind(OptionSelected, props.RawDataReceive)\r\n        if (GraphBuffer.length === 0) {\r\n        }\r\n\r\n        else {\r\n            GraphBuffer.forEach(element => {\r\n                Graph.push(element)\r\n            });\r\n            try {\r\n                line.changeData(Graph)\r\n            }\r\n            catch { }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('Reffect');\r\n\r\n        setline(new Line(props.Divname, {\r\n            data: Graph,\r\n            xField: 'time',\r\n            yField: 'Value',\r\n            seriesField: 'Label',\r\n        }))\r\n\r\n        try { line.render() }\r\n        catch { }\r\n\r\n        return () => {\r\n            console.log('un');\r\n            try {\r\n                line.destroy();\r\n            }\r\n            catch { }\r\n\r\n        }\r\n    }, [])\r\n\r\n    console.log(props.GarphTitle);\r\n    UpdateData()\r\n\r\n    return (\r\n        <div >\r\n            <div>\r\n                <Select\r\n                    mode=\"multiple\"\r\n                    placeholder=\"Please select\"\r\n                    onChange={handleChange}\r\n                    style={{ width: '100%' }}\r\n                >\r\n                    {LabelOption}\r\n                </Select>\r\n\r\n                <Button onClick={HistoryClear}> Clear </Button>\r\n\r\n            </div>\r\n\r\n            <Card title={props.GarphTitle} bordered={true} style={{ width: '100%', borderRadius: 15, backgroundColor: '#f0f9fa' }} hoverable={true}>\r\n                <div id={props.Divname}></div>\r\n            </Card>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RealTimeGraphWrapper\r\n"]},"metadata":{},"sourceType":"module"}