{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar externals = require(\"./externals\");\n\nvar Workbook = require(\"./Workbook\");\n\nvar FormulaError = require(\"./FormulaError\");\n\nvar dateConverter = require(\"./dateConverter\");\n\nvar RichText = require(\"./RichText\");\n/**\n * xlsx-poulate namespace.\n * @namespace\n */\n\n\nvar XlsxPopulate = /*#__PURE__*/function () {\n  function XlsxPopulate() {\n    _classCallCheck(this, XlsxPopulate);\n  }\n\n  _createClass(XlsxPopulate, null, [{\n    key: \"dateToNumber\",\n    value:\n    /**\n     * Convert a date to a number for Excel.\n     * @param {Date} date - The date.\n     * @returns {number} The number.\n     */\n    function dateToNumber(date) {\n      return dateConverter.dateToNumber(date);\n    }\n    /**\n     * Create a new blank workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n\n  }, {\n    key: \"fromBlankAsync\",\n    value: function fromBlankAsync() {\n      return Workbook.fromBlankAsync();\n    }\n    /**\n     * Loads a workbook from a data object. (Supports any supported [JSZip data types]{@link https://stuk.github.io/jszip/documentation/api_jszip/load_async.html}.)\n     * @param {string|Array.<number>|ArrayBuffer|Uint8Array|Buffer|Blob|Promise.<*>} data - The data to load.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n\n  }, {\n    key: \"fromDataAsync\",\n    value: function fromDataAsync(data, opts) {\n      return Workbook.fromDataAsync(data, opts);\n    }\n    /**\n     * Loads a workbook from file.\n     * @param {string} path - The path to the workbook.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n\n  }, {\n    key: \"fromFileAsync\",\n    value: function fromFileAsync(path, opts) {\n      return Workbook.fromFileAsync(path, opts);\n    }\n    /**\n     * Convert an Excel number to a date.\n     * @param {number} number - The number.\n     * @returns {Date} The date.\n     */\n\n  }, {\n    key: \"numberToDate\",\n    value: function numberToDate(number) {\n      return dateConverter.numberToDate(number);\n    }\n    /**\n     * The Promise library.\n     * @type {Promise}\n     */\n\n  }, {\n    key: \"Promise\",\n    get: function get() {\n      return externals.Promise;\n    },\n    set: function set(Promise) {\n      externals.Promise = Promise;\n    }\n  }]);\n\n  return XlsxPopulate;\n}();\n/**\n * The XLSX mime type.\n * @type {string}\n */\n\n\nXlsxPopulate.MIME_TYPE = Workbook.MIME_TYPE;\n/**\n * Formula error class.\n * @type {FormulaError}\n */\n\nXlsxPopulate.FormulaError = FormulaError;\n/**\n * RichTexts class\n * @type {RichText}\n */\n\nXlsxPopulate.RichText = RichText;\nmodule.exports = XlsxPopulate;","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/xlsx-populate/lib/XlsxPopulate.js"],"names":["externals","require","Workbook","FormulaError","dateConverter","RichText","XlsxPopulate","date","dateToNumber","fromBlankAsync","data","opts","fromDataAsync","path","fromFileAsync","number","numberToDate","Promise","MIME_TYPE","module","exports"],"mappings":"AAAA;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,gBAAD,CAA5B;;AACA,IAAMG,aAAa,GAAGH,OAAO,CAAC,iBAAD,CAA7B;;AACA,IAAMI,QAAQ,GAAGJ,OAAO,CAAC,YAAD,CAAxB;AAEA;AACA;AACA;AACA;;;IACMK,Y;;;;;;;;AACF;AACJ;AACA;AACA;AACA;AACI,0BAAoBC,IAApB,EAA0B;AACtB,aAAOH,aAAa,CAACI,YAAd,CAA2BD,IAA3B,CAAP;AACH;AAED;AACJ;AACA;AACA;;;;WACI,0BAAwB;AACpB,aAAOL,QAAQ,CAACO,cAAT,EAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,uBAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AAC7B,aAAOT,QAAQ,CAACU,aAAT,CAAuBF,IAAvB,EAA6BC,IAA7B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,uBAAqBE,IAArB,EAA2BF,IAA3B,EAAiC;AAC7B,aAAOT,QAAQ,CAACY,aAAT,CAAuBD,IAAvB,EAA6BF,IAA7B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;;WACI,sBAAoBI,MAApB,EAA4B;AACxB,aAAOX,aAAa,CAACY,YAAd,CAA2BD,MAA3B,CAAP;AACH;AAED;AACJ;AACA;AACA;;;;SACI,eAAqB;AACjB,aAAOf,SAAS,CAACiB,OAAjB;AACH,K;SACD,aAAmBA,OAAnB,EAA4B;AACxBjB,MAAAA,SAAS,CAACiB,OAAV,GAAoBA,OAApB;AACH;;;;;AAGL;AACA;AACA;AACA;;;AACAX,YAAY,CAACY,SAAb,GAAyBhB,QAAQ,CAACgB,SAAlC;AAEA;AACA;AACA;AACA;;AACAZ,YAAY,CAACH,YAAb,GAA4BA,YAA5B;AAEA;AACA;AACA;AACA;;AACAG,YAAY,CAACD,QAAb,GAAwBA,QAAxB;AAEAc,MAAM,CAACC,OAAP,GAAiBd,YAAjB","sourcesContent":["\"use strict\";\n\nconst externals = require(\"./externals\");\nconst Workbook = require(\"./Workbook\");\nconst FormulaError = require(\"./FormulaError\");\nconst dateConverter = require(\"./dateConverter\");\nconst RichText = require(\"./RichText\");\n\n/**\n * xlsx-poulate namespace.\n * @namespace\n */\nclass XlsxPopulate {\n    /**\n     * Convert a date to a number for Excel.\n     * @param {Date} date - The date.\n     * @returns {number} The number.\n     */\n    static dateToNumber(date) {\n        return dateConverter.dateToNumber(date);\n    }\n\n    /**\n     * Create a new blank workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromBlankAsync() {\n        return Workbook.fromBlankAsync();\n    }\n\n    /**\n     * Loads a workbook from a data object. (Supports any supported [JSZip data types]{@link https://stuk.github.io/jszip/documentation/api_jszip/load_async.html}.)\n     * @param {string|Array.<number>|ArrayBuffer|Uint8Array|Buffer|Blob|Promise.<*>} data - The data to load.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromDataAsync(data, opts) {\n        return Workbook.fromDataAsync(data, opts);\n    }\n\n    /**\n     * Loads a workbook from file.\n     * @param {string} path - The path to the workbook.\n     * @param {{}} [opts] - Options\n     * @param {string} [opts.password] - The password to decrypt the workbook.\n     * @returns {Promise.<Workbook>} The workbook.\n     */\n    static fromFileAsync(path, opts) {\n        return Workbook.fromFileAsync(path, opts);\n    }\n\n    /**\n     * Convert an Excel number to a date.\n     * @param {number} number - The number.\n     * @returns {Date} The date.\n     */\n    static numberToDate(number) {\n        return dateConverter.numberToDate(number);\n    }\n\n    /**\n     * The Promise library.\n     * @type {Promise}\n     */\n    static get Promise() {\n        return externals.Promise;\n    }\n    static set Promise(Promise) {\n        externals.Promise = Promise;\n    }\n}\n\n/**\n * The XLSX mime type.\n * @type {string}\n */\nXlsxPopulate.MIME_TYPE = Workbook.MIME_TYPE;\n\n/**\n * Formula error class.\n * @type {FormulaError}\n */\nXlsxPopulate.FormulaError = FormulaError;\n\n/**\n * RichTexts class\n * @type {RichText}\n */\nXlsxPopulate.RichText = RichText;\n\nmodule.exports = XlsxPopulate;\n"]},"metadata":{},"sourceType":"script"}