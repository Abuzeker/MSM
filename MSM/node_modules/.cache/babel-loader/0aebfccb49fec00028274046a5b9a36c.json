{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1ReportC3.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { DeleteJob, logdata_request, ReadJob, WriteJob } from '../../api';\nimport { DataSortTime, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob, SortToArrayExcel, ExportExcelWorkBook, FilterByName } from '../../DataRequest/LogDataRequestWrap';\nimport { C3Model, C3ModelMap, G2Model, JobModel } from '../../DataRequest/DataModel';\nimport NameTableWrapper from '../Report/NameTableWrapper';\nimport ReportWrapper from '../Report/ReportWrapper';\nimport { Button, message, Card } from 'antd';\nimport ReportListWrapper from '../Report/ReportListWrapper';\nimport moment from 'moment';\nimport { Area } from '@antv/g2plot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet line;\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": [],\n  \"TimingData\": []\n};\nlet ReportList = {\n  \"C3ReportList\": [],\n  \"G2ReportList\": []\n};\nlet JobDetailRecord = {\n  datetimeStart: '',\n  datetimeEnd: '',\n  site: '',\n  line: '',\n  BufferName: ''\n};\nlet Cell = [\"A2\", \"E2\", \"I2\", \"K2\", \"O2\"];\nlet ReportInfoG2 = {};\nlet ReportInfoC3 = {};\nlet BlankPage = 1;\nconst ColumbC3 = TableColumbLabelAsRow(C3ModelMap);\n_c = ColumbC3;\n\nconst Line1Report = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n  useEffect(() => {\n    line = new Area('C3Graph', {\n      data: LogValue['TimingData'],\n      xField: 'date',\n      yField: 'Value',\n      seriesField: 'Parameter',\n      xAxis: {\n        range: [0, 1]\n      }\n    });\n    line.render();\n    return () => {};\n  }, []);\n\n  const JobDeleteHandler = async (jobnumber, line, page) => {\n    const response = await DeleteJob(jobnumber['Job No'], line, page);\n\n    if (response.success === true) {\n      message.success(`Job ${jobnumber['Job No']} Deleted`);\n      RequestJob([], JobDetailRecord.datetimeStart, JobDetailRecord.datetimeEnd, JobDetailRecord.site, JobDetailRecord.line, JobDetailRecord.BufferName);\n    } else {\n      message.error(`Unable to Delete Job ${jobnumber['Job No']}`);\n    }\n  };\n\n  const DataRequestC3 = row => {\n    let TimeRange = [];\n    TimeRange[0] = moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    TimeRange[1] = moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    ReportInfoC3.Info1 = row['Job No'];\n    ReportInfoC3.Info2 = row['Start Time'];\n    ReportInfoC3.Info3 = row['End Time'];\n    ReportInfoC3.Info4 = row['Color'];\n    ReportInfoC3.Info5 = row['Grade'];\n    UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'C3', BlankPage, 'LogC3', C3ModelMap);\n  };\n\n  const ColumbJobC3 = TableColumbJob(JobModel, DataRequestC3, JobDeleteHandler, 'C3', BlankPage, 'View', 'Delete');\n\n  const DataRequestG2 = row => {\n    // console.log(row)\n    let TimeRange = [];\n    TimeRange[0] = moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    TimeRange[1] = moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    ReportInfoG2.Info1 = row['Job No'];\n    ReportInfoG2.Info2 = row['Start Time'];\n    ReportInfoG2.Info3 = row['End Time'];\n    ReportInfoG2.Info4 = row['Color'];\n    ReportInfoG2.Info5 = row['Grade'];\n    console.log(ReportInfoG2);\n    UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model);\n  };\n\n  const ColumbJobG2 = TableColumbJob(JobModel, DataRequestG2, JobDeleteHandler, 'G2', BlankPage, 'View', 'Delete');\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    let data = DataSortTime(response); // console.log(data);\n\n    LogValue[BufferName] = LogDataMappingName(Model, data);\n    console.log(LogValue[BufferName]);\n    FilterByName('Feeder Speed', LogValue[BufferName]);\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\n    const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line);\n\n    if (response.success === true) {\n      message.success('Create Success !');\n    }\n  };\n\n  const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\n    JobDetailRecord.datetimeStart = datetimeStart;\n    JobDetailRecord.datetimeEnd = datetimeEnd;\n    JobDetailRecord.site = site;\n    JobDetailRecord.line = line;\n    JobDetailRecord.BufferName = BufferName;\n    const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line);\n    let data = ReportSort(response);\n    ReportList[BufferName] = data; //console.log(data);\n\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ReportWrapper, {\n      CreateJobCallBack: CreateJob,\n      site: 'Polymerlink',\n      line: 'C3'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportListWrapper, {\n      ReportListCallBack: RequestJob,\n      site: 'Polymerlink',\n      line: 'C3',\n      ReportList: ReportList['C3ReportList'],\n      Columb: ColumbJobC3,\n      BufferName: \"C3ReportList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NameTableWrapper, {\n      SetTimeRangeCallBack: UpdateTableData,\n      LogValue: LogValue['LogC3'],\n      Columb: ColumbC3,\n      site: 'C3',\n      page: '1',\n      BufferName: \"LogC3\",\n      Model: C3ModelMap,\n      JobInfo: ReportInfoC3,\n      FileName: 'ExtruderSheet.xlsx',\n      startingColumb: 'A',\n      startingRow: 7,\n      EndingColumb: 'R',\n      EndingRow: 7,\n      Cell: Cell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: 'Timing Graph C3',\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15,\n        backgroundColor: '#ffffff',\n        marginTop: '15px'\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"C3Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1Report, \"kcd+c1a7RyKAa2KvtJN963wq2Sk=\");\n\n_c2 = Line1Report;\nexport default Line1Report;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ColumbC3\");\n$RefreshReg$(_c2, \"Line1Report\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1ReportC3.jsx"],"names":["React","useState","useEffect","DeleteJob","logdata_request","ReadJob","WriteJob","DataSortTime","TableColumbLabelAsRow","LogDataMappingName","ReportSort","TableColumbJob","SortToArrayExcel","ExportExcelWorkBook","FilterByName","C3Model","C3ModelMap","G2Model","JobModel","NameTableWrapper","ReportWrapper","Button","message","Card","ReportListWrapper","moment","Area","line","LogValue","ReportList","JobDetailRecord","datetimeStart","datetimeEnd","site","BufferName","Cell","ReportInfoG2","ReportInfoC3","BlankPage","ColumbC3","Line1Report","state","setState","count","data","xField","yField","seriesField","xAxis","range","render","JobDeleteHandler","jobnumber","page","response","success","RequestJob","error","DataRequestC3","row","TimeRange","toISOString","split","Info1","Info2","Info3","Info4","Info5","UpdateTableData","ColumbJobC3","DataRequestG2","console","log","ColumbJobG2","Parameter","StartTime","EndTime","Site","Line","Page","Model","CreateJob","info","width","borderRadius","backgroundColor","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { DeleteJob, logdata_request, ReadJob, WriteJob } from '../../api';\r\nimport { DataSortTime, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob, SortToArrayExcel, ExportExcelWorkBook, FilterByName } from '../../DataRequest/LogDataRequestWrap';\r\nimport { C3Model, C3ModelMap, G2Model, JobModel } from '../../DataRequest/DataModel';\r\nimport NameTableWrapper from '../Report/NameTableWrapper';\r\nimport ReportWrapper from '../Report/ReportWrapper';\r\nimport { Button, message, Card } from 'antd';\r\nimport ReportListWrapper from '../Report/ReportListWrapper';\r\nimport moment from 'moment';\r\nimport { Area } from '@antv/g2plot';\r\nlet line\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n    \"TimingData\": [],\r\n\r\n}\r\n\r\nlet ReportList = {\r\n    \"C3ReportList\": [],\r\n    \"G2ReportList\": []\r\n}\r\n\r\nlet JobDetailRecord = {\r\n    datetimeStart: '',\r\n    datetimeEnd: '',\r\n    site: '',\r\n    line: '',\r\n    BufferName: ''\r\n}\r\n\r\nlet Cell = [\"A2\", \"E2\", \"I2\", \"K2\", \"O2\"]\r\n\r\n\r\nlet ReportInfoG2 = {}\r\nlet ReportInfoC3 = {}\r\n\r\n\r\nlet BlankPage = 1\r\n\r\nconst ColumbC3 = TableColumbLabelAsRow(C3ModelMap)\r\n\r\nconst Line1Report = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    useEffect(() => {\r\n        line = new Area('C3Graph', {\r\n            data: LogValue['TimingData'],\r\n            xField: 'date',\r\n            yField: 'Value',\r\n            seriesField: 'Parameter',\r\n            xAxis: {\r\n                range: [0, 1],\r\n              },\r\n        })\r\n        line.render()\r\n        return () => {\r\n\r\n        }\r\n    }, [])\r\n\r\n    const JobDeleteHandler = async (jobnumber, line, page) => {\r\n        const response = await DeleteJob(jobnumber['Job No'], line, page)\r\n\r\n        if (response.success === true) {\r\n            message.success(`Job ${jobnumber['Job No']} Deleted`)\r\n            RequestJob([], JobDetailRecord.datetimeStart, JobDetailRecord.datetimeEnd,\r\n                JobDetailRecord.site, JobDetailRecord.line, JobDetailRecord.BufferName)\r\n        }\r\n\r\n        else {\r\n            message.error(`Unable to Delete Job ${jobnumber['Job No']}`)\r\n        }\r\n\r\n    }\r\n\r\n    const DataRequestC3 = (row) => {\r\n\r\n        let TimeRange = []\r\n\r\n        TimeRange[0] = (moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\")\r\n        TimeRange[1] = (moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\")).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n        ReportInfoC3.Info1 = row['Job No']\r\n        ReportInfoC3.Info2 = row['Start Time']\r\n        ReportInfoC3.Info3 = row['End Time']\r\n        ReportInfoC3.Info4 = row['Color']\r\n        ReportInfoC3.Info5 = row['Grade']\r\n        UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'C3', BlankPage, 'LogC3', C3ModelMap)\r\n\r\n    }\r\n    const ColumbJobC3 = TableColumbJob(JobModel, DataRequestC3, JobDeleteHandler, 'C3', BlankPage, 'View', 'Delete')\r\n\r\n    const DataRequestG2 = (row) => {\r\n\r\n        // console.log(row)\r\n\r\n        let TimeRange = []\r\n\r\n        TimeRange[0] = (moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\")\r\n        TimeRange[1] = (moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\")).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n        ReportInfoG2.Info1 = row['Job No']\r\n        ReportInfoG2.Info2 = row['Start Time']\r\n        ReportInfoG2.Info3 = row['End Time']\r\n        ReportInfoG2.Info4 = row['Color']\r\n        ReportInfoG2.Info5 = row['Grade']\r\n\r\n        console.log(ReportInfoG2);\r\n\r\n\r\n        UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'G2', BlankPage, 'LogG2', G2Model)\r\n    }\r\n    const ColumbJobG2 = TableColumbJob(JobModel, DataRequestG2, JobDeleteHandler, 'G2', BlankPage, 'View', 'Delete')\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        let data = DataSortTime(response)\r\n        // console.log(data);\r\n\r\n        LogValue[BufferName] = LogDataMappingName(Model, data)\r\n        console.log(LogValue[BufferName]);\r\n        FilterByName('Feeder Speed', LogValue[BufferName])\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\r\n        const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line)\r\n        if (response.success === true) {\r\n            message.success('Create Success !')\r\n        }\r\n    }\r\n\r\n    const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\r\n        JobDetailRecord.datetimeStart = datetimeStart\r\n        JobDetailRecord.datetimeEnd = datetimeEnd\r\n        JobDetailRecord.site = site\r\n        JobDetailRecord.line = line\r\n        JobDetailRecord.BufferName = BufferName\r\n\r\n        const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line)\r\n        let data = ReportSort(response)\r\n        ReportList[BufferName] = data\r\n        //console.log(data);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* C3 part here */}\r\n            <ReportWrapper CreateJobCallBack={CreateJob}\r\n                site={'Polymerlink'} line={'C3'}\r\n            />\r\n\r\n            <ReportListWrapper ReportListCallBack={RequestJob}\r\n                site={'Polymerlink'} line={'C3'}\r\n                ReportList={ReportList['C3ReportList']}\r\n                Columb={ColumbJobC3}\r\n                BufferName={\"C3ReportList\"}\r\n            />\r\n\r\n            <NameTableWrapper SetTimeRangeCallBack={UpdateTableData}\r\n                LogValue={LogValue['LogC3']} Columb={ColumbC3}\r\n                site={'C3'} page={'1'} BufferName={\"LogC3\"} Model={C3ModelMap}\r\n                JobInfo={ReportInfoC3} FileName={'ExtruderSheet.xlsx'} startingColumb={'A'} startingRow={7}\r\n                EndingColumb={'R'} EndingRow={7} Cell={Cell}\r\n            />\r\n\r\n            <Card title={'Timing Graph C3'} bordered={true} style={{\r\n                width: '100%', borderRadius: 15,\r\n                backgroundColor: '#ffffff', marginTop: '15px'\r\n            }} hoverable={true}>\r\n                <div id='C3Graph'></div>\r\n            </Card>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Line1Report\r\n"]},"metadata":{},"sourceType":"module"}