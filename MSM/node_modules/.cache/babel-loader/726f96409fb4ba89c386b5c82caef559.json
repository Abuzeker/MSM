{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1Report.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Col, DatePicker, Divider, Row, Table } from 'antd';\nimport { logdata_request } from '../../api';\nimport { DataSortTime, GetDateTime, LogDataMappingTime, SetDateRange, TableColumbTimeAsRow } from '../../DataRequest/LogDataRequestWrap';\nimport { C3Model } from '../../DataRequest/DataModel';\nimport { Page, Text, View, Document, StyleSheet, PDFViewer } from '@react-pdf/renderer'; // Create styles\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = StyleSheet.create({\n  page: {\n    flexDirection: 'row',\n    backgroundColor: '#E4E4E4'\n  },\n  section: {\n    margin: 10,\n    padding: 10,\n    flexGrow: 1\n  }\n});\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": []\n};\nconst Columb = TableColumbTimeAsRow();\n\nconst Line1Report = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n  const styles = StyleSheet.create({\n    page: {\n      flexDirection: 'row',\n      backgroundColor: '#E4E4E4'\n    },\n    section: {\n      margin: 10,\n      padding: 10,\n      flexGrow: 1\n    }\n  }); // Create Document Component\n\n  const MyDocument = () => /*#__PURE__*/_jsxDEV(Document, {\n    children: /*#__PURE__*/_jsxDEV(Page, {\n      size: \"A4\",\n      style: styles.page,\n      children: [/*#__PURE__*/_jsxDEV(View, {\n        style: styles.section,\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: \"Section #1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(View, {\n        style: styles.section,\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: \"Section #2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n\n  const TestGet = () => {\n    MyDocument(); // let DateTimeRange = GetDateTime(1)\n    //UpdateTableData([], DateTimeRange[0], DateTimeRange[1], 'Polymerlink', 'C3', '1')\n  };\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page); //console.log(response);\n\n    let da = DataSortTime(response);\n    LogValue['LogC3'] = LogDataMappingTime(C3Model, da); //console.log(LogValue['LogC3']);\n\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const SetTimeRange = value => {\n    const DateRange = SetDateRange(value);\n    UpdateTableData([], DateRange[0], DateRange[1], 'Polymerlink', 'C3', '1');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      onChange: SetTimeRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: TestGet,\n      children: \" test \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      columns: Columb,\n      dataSource: LogValue['LogC3'],\n      bordered: true,\n      scroll: {\n        x: 2000,\n        y: 500\n      },\n      pagination: false,\n      size: \"small\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PDFViewer, {\n      children: /*#__PURE__*/_jsxDEV(MyDocument, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1Report, \"TOtJj3Zjk9A8N3grQNDDe2GZezA=\");\n\n_c = Line1Report;\nexport default Line1Report;\n\nvar _c;\n\n$RefreshReg$(_c, \"Line1Report\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1Report.jsx"],"names":["React","useState","useEffect","Button","Col","DatePicker","Divider","Row","Table","logdata_request","DataSortTime","GetDateTime","LogDataMappingTime","SetDateRange","TableColumbTimeAsRow","C3Model","Page","Text","View","Document","StyleSheet","PDFViewer","styles","create","page","flexDirection","backgroundColor","section","margin","padding","flexGrow","LogValue","Columb","Line1Report","state","setState","count","MyDocument","TestGet","UpdateTableData","Parameter","StartTime","EndTime","Site","Line","response","da","SetTimeRange","value","DateRange","x","y"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Button, Col, DatePicker, Divider, Row, Table } from 'antd'\r\nimport { logdata_request } from '../../api';\r\nimport { DataSortTime, GetDateTime, LogDataMappingTime, SetDateRange, TableColumbTimeAsRow } from '../../DataRequest/LogDataRequestWrap';\r\nimport { C3Model } from '../../DataRequest/DataModel';\r\nimport { Page, Text, View, Document, StyleSheet, PDFViewer } from '@react-pdf/renderer';\r\n\r\n// Create styles\r\nconst styles = StyleSheet.create({\r\n    page: {\r\n        flexDirection: 'row',\r\n        backgroundColor: '#E4E4E4'\r\n    },\r\n    section: {\r\n        margin: 10,\r\n        padding: 10,\r\n        flexGrow: 1\r\n    }\r\n});\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n}\r\n\r\nconst Columb = TableColumbTimeAsRow()\r\n\r\nconst Line1Report = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    const styles = StyleSheet.create({\r\n        page: {\r\n            flexDirection: 'row',\r\n            backgroundColor: '#E4E4E4'\r\n        },\r\n        section: {\r\n            margin: 10,\r\n            padding: 10,\r\n            flexGrow: 1\r\n        }\r\n    });\r\n\r\n    // Create Document Component\r\n    const MyDocument = () => (\r\n        <Document>\r\n            <Page size=\"A4\" style={styles.page}>\r\n                <View style={styles.section}>\r\n                    <Text>Section #1</Text>\r\n                </View>\r\n                <View style={styles.section}>\r\n                    <Text>Section #2</Text>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n    );\r\n\r\n    const TestGet = () => {\r\n        MyDocument()\r\n        // let DateTimeRange = GetDateTime(1)\r\n        //UpdateTableData([], DateTimeRange[0], DateTimeRange[1], 'Polymerlink', 'C3', '1')\r\n    }\r\n\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        //console.log(response);\r\n        let da = DataSortTime(response)\r\n        LogValue['LogC3'] = LogDataMappingTime(C3Model, da)\r\n        //console.log(LogValue['LogC3']);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n\r\n    }\r\n\r\n    const SetTimeRange = (value) => {\r\n        const DateRange = SetDateRange(value)\r\n        UpdateTableData([], DateRange[0], DateRange[1], 'Polymerlink', 'C3', '1')\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <DatePicker onChange={SetTimeRange} />\r\n            <Button onClick={TestGet}> test </Button>\r\n            <Table columns={Columb} dataSource={LogValue['LogC3']} bordered scroll={{ x: 2000, y: 500 }} pagination={false} size=\"small\" />\r\n            <PDFViewer>\r\n                <MyDocument />\r\n            </PDFViewer>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Line1Report\r\n"]},"metadata":{},"sourceType":"module"}