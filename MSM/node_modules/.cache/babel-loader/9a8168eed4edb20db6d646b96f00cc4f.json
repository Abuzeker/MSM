{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\EnergyUsage\\\\EnergyUsage.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Divider, Row, DatePicker, Card, Table, Select } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { logdata_request, RealtimeData_Request } from '../../api';\nimport { C3Model, C3ModelMap, G2Model } from '../../DataRequest/DataModel';\nimport { ConvertMonentToDateTime, DataSortTime, GetDateTime } from '../../DataRequest/LogDataRequestWrap';\nimport { Line, Column } from '@antv/g2plot';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet DTinitial = GetDateTime(0, 1); // get from yesterday 00:00 to today 00:00\n// console.log(DTinitial);\n\nlet BlankPage = 1,\n    DTc3 = [],\n    DTg2 = [];\nlet C3DTRange = [],\n    G2DTRange = [];\nlet MonthlyEnergy = [];\nlet BarchartData = [];\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nDTc3.push(moment(DTinitial[2]));\nDTc3.push(moment(DTinitial[3]));\nDTg2 = DTc3;\nlet LogValue = {\n  \"C3Table\": [],\n  \"G2Table\": [],\n  \"C3Graph\": [],\n  \"G2Graph\": [],\n  \"C3Selected\": [],\n  \"G2Selected\": []\n};\nconst EnergyOption = ['C3', 'G2'];\nconst {\n  RangePicker\n} = DatePicker;\nconst {\n  Option\n} = Select;\nlet OptionC3 = Object.keys(C3ModelMap);\n_c = OptionC3;\nlet OptionG2 = Object.keys(G2Model);\n_c2 = OptionG2;\nconst OptionSelectorC3 = [];\nconst OptionSelectorG2 = [];\nLogValue['C3Selected'] = [OptionC3[0], OptionC3[1]];\nLogValue['G2Selected'] = [OptionG2[0], OptionG2[1]];\nOptionC3.forEach(element => {\n  OptionSelectorC3.push( /*#__PURE__*/_jsxDEV(Option, {\n    children: element\n  }, element, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 27\n  }, this));\n});\nOptionG2.forEach(element => {\n  OptionSelectorG2.push( /*#__PURE__*/_jsxDEV(Option, {\n    children: element\n  }, element, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 27\n  }, this));\n});\nlet data_filterC3 = OptionC3.map(obj => {\n  let cobj = [];\n  cobj = {\n    text: obj,\n    value: obj\n  };\n  return cobj;\n});\n\nconst parseDMYhmC3 = s => {\n  var b = s.split(/\\D/);\n  return new Date(b[2], b[1] - 1, b[2], b[3], b[4]);\n};\n\nconst columnsC3 = [{\n  title: 'Parameter',\n  dataIndex: 'Parameter',\n  filters: data_filterC3,\n  filterMode: 'tree',\n  filterSearch: true,\n  onFilter: (value, record) => record.Parameter.includes(value),\n  width: '30%'\n}, {\n  title: 'Value',\n  dataIndex: 'Value',\n  sorter: (a, b) => a.Value - b.Value\n}, {\n  title: 'Date',\n  dataIndex: 'date',\n  sorter: (a, b) => parseDMYhmC3(a.date) - parseDMYhmC3(b.date)\n}];\nlet line, stackedColumnPlot;\n\nconst EnergyUsage = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n  useEffect(() => {\n    console.log('Reffect');\n    BarChartInit(['Power Meter'], DTinitial[0], DTinitial[1], 'Polymerlink', 'C3', '1', \"C3Table\", C3ModelMap);\n    stackedColumnPlot = new Column('container', {\n      data: [],\n      isStack: true,\n      xField: 'year',\n      yField: 'value',\n      seriesField: 'type',\n      label: {\n        // 可手动配置 label 数据标签位置\n        position: 'middle',\n        // 'top', 'bottom', 'middle'\n        // 可配置附加的布局方法\n        layout: [// 柱形图数据标签位置自动调整\n        {\n          type: 'interval-adjust-position'\n        }, // 数据标签防遮挡\n        {\n          type: 'interval-hide-overlap'\n        }, // 数据标签文颜色自动调整\n        {\n          type: 'adjust-color'\n        }]\n      }\n    });\n\n    try {\n      stackedColumnPlot.render();\n    } catch {}\n\n    line = new Line('C3Graph', {\n      data: LogValue['C3Table'],\n      xField: 'date',\n      yField: 'Value',\n      seriesField: 'Parameter'\n    });\n\n    try {\n      line.render();\n    } catch {} // line2 = new Line('G2Graph', {\n    //     data: LogValue['G2Table'],\n    //     xField: 'date',\n    //     yField: 'Value',\n    //     seriesField: 'Parameter',\n    // })\n    // try { line2.render() }\n    // catch { }\n\n\n    return () => {\n      line.destroy();\n      stackedColumnPlot.destroy(); // line2.destroy();\n    };\n  }, []);\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n    console.log(Parameter);\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    let data = DataSortTime(response);\n    LogValue[BufferName] = data;\n    console.log(data);\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  const BarChartInit = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n    // console.log(Parameter)\n    for (let month = 0; month < 6; month++) {\n      var date = new Date();\n      var firstDay = new Date(date.getFullYear(), date.getMonth() - month, 1);\n      var lastDay = new Date(date.getFullYear(), date.getMonth() + 1 - month, 0);\n      MonthlyEnergy = [];\n      let dat = [];\n      dat.push(firstDay);\n      dat.push(lastDay);\n      let DateInterval = ConvertMonentToDateTime(dat);\n      const response = await logdata_request(Parameter, DateInterval[0], DateInterval[1], Site, Line, Page);\n\n      if (response.data.length > 0) {\n        let length = response.data.length;\n        MonthlyEnergy[month] = (response.data[length - 1].fields.Value - response.data[0].fields.Value).toFixed(2);\n      }\n\n      let Energy = {\n        \"type\": \"C3\",\n        \"value\": MonthlyEnergy[month],\n        \"Date\": monthNames[date.getMonth() - month]\n      };\n      MonthlyEnergy.push(Energy);\n    }\n\n    console.log(MonthlyEnergy); //setState(({ count }) => ({ count: count + 1 }));\n  };\n\n  const C3LogRequest = async DT => {\n    DTc3 = DT;\n    console.log(DTc3);\n    C3DTRange = ConvertMonentToDateTime(DT);\n    console.log(C3DTRange);\n    await UpdateTableData(LogValue['C3Selected'], C3DTRange[0], C3DTRange[1], 'Polymerlink', 'C3', BlankPage, \"C3Table\", C3ModelMap);\n    console.log(LogValue[\"C3Table\"]);\n    line.changeData(LogValue[\"C3Table\"]);\n  }; // const G2LogRequest = async (DT) => {\n  //     DTg2 = DT\n  //     G2DTRange = ConvertMonentToDateTime(DT)\n  //     await UpdateTableData(LogValue['G2Selected'], G2DTRange[0], G2DTRange[1], 'Polymerlink', 'G2', BlankPage, \"G2Table\", G2Model)\n  //     line2.changeData(LogValue[\"G2Table\"])\n  // }\n\n\n  const ChangeC3Select = value => {\n    LogValue['C3Selected'] = value;\n  }; // const ChangeG2Select = (value) => {\n  //     LogValue['G2Selected'] = value\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        children: \"Energy Consumption\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: 'Energy',\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15,\n        backgroundColor: '#ffffff'\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Divider, {\n        orientation: \"left\",\n        children: \"C3 Log Visualize\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(RangePicker, {\n        showTime: true,\n        onOk: C3LogRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        style: {\n          marginLeft: '10px'\n        },\n        onClick: () => {\n          C3LogRequest(DTc3);\n        },\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      mode: \"multiple\",\n      size: \"middle\",\n      placeholder: \"Please select\",\n      defaultValue: [OptionC3[0], OptionC3[1]],\n      style: {\n        width: '100%',\n        paddingBottom: '20px'\n      },\n      onChange: ChangeC3Select,\n      children: OptionSelectorC3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: \"Log Value C3\",\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15,\n        marginBottom: '10px'\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        columns: columnsC3,\n        dataSource: LogValue['C3Table'],\n        size: \"small\",\n        scroll: {\n          y: 500\n        },\n        pagination: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      title: 'C3 Graph Visulize',\n      bordered: true,\n      style: {\n        width: '100%',\n        borderRadius: 15,\n        backgroundColor: '#ffffff'\n      },\n      hoverable: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"C3Graph\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 234,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EnergyUsage, \"kcd+c1a7RyKAa2KvtJN963wq2Sk=\");\n\n_c3 = EnergyUsage;\nexport default EnergyUsage;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"OptionC3\");\n$RefreshReg$(_c2, \"OptionG2\");\n$RefreshReg$(_c3, \"EnergyUsage\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/EnergyUsage/EnergyUsage.jsx"],"names":["Button","Col","Divider","Row","DatePicker","Card","Table","Select","React","useState","useEffect","logdata_request","RealtimeData_Request","C3Model","C3ModelMap","G2Model","ConvertMonentToDateTime","DataSortTime","GetDateTime","Line","Column","moment","DTinitial","BlankPage","DTc3","DTg2","C3DTRange","G2DTRange","MonthlyEnergy","BarchartData","monthNames","push","LogValue","EnergyOption","RangePicker","Option","OptionC3","Object","keys","OptionG2","OptionSelectorC3","OptionSelectorG2","forEach","element","data_filterC3","map","obj","cobj","text","value","parseDMYhmC3","s","b","split","Date","columnsC3","title","dataIndex","filters","filterMode","filterSearch","onFilter","record","Parameter","includes","width","sorter","a","Value","date","line","stackedColumnPlot","EnergyUsage","state","setState","count","console","log","BarChartInit","data","isStack","xField","yField","seriesField","label","position","layout","type","render","destroy","UpdateTableData","StartTime","EndTime","Site","Page","BufferName","Model","response","month","firstDay","getFullYear","getMonth","lastDay","dat","DateInterval","length","fields","toFixed","Energy","C3LogRequest","DT","changeData","ChangeC3Select","paddingBottom","borderRadius","backgroundColor","marginLeft","marginBottom","y"],"mappings":"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","sourcesContent":["import { Button, Col, Divider, Row, DatePicker, Card, Table, Select } from 'antd'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { logdata_request, RealtimeData_Request } from '../../api'\r\nimport { C3Model, C3ModelMap, G2Model } from '../../DataRequest/DataModel'\r\nimport { ConvertMonentToDateTime, DataSortTime, GetDateTime } from '../../DataRequest/LogDataRequestWrap'\r\nimport { Line, Column } from '@antv/g2plot';\r\nimport moment from 'moment';\r\n\r\n\r\n\r\nlet DTinitial = GetDateTime(0, 1)  // get from yesterday 00:00 to today 00:00\r\n// console.log(DTinitial);\r\nlet BlankPage = 1, DTc3 = [], DTg2 = []\r\nlet C3DTRange = [], G2DTRange = []\r\nlet MonthlyEnergy = []\r\nlet BarchartData = []\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\n\r\n\r\nDTc3.push(moment(DTinitial[2]))\r\nDTc3.push(moment(DTinitial[3]))\r\nDTg2 = DTc3\r\n\r\n\r\nlet LogValue = {\r\n    \"C3Table\": [],\r\n    \"G2Table\": [],\r\n    \"C3Graph\": [],\r\n    \"G2Graph\": [],\r\n    \"C3Selected\": [],\r\n    \"G2Selected\": [],\r\n}\r\n\r\nconst EnergyOption = ['C3', 'G2']\r\n\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\n\r\nlet OptionC3 = Object.keys(C3ModelMap)\r\nlet OptionG2 = Object.keys(G2Model)\r\n\r\nconst OptionSelectorC3 = [];\r\nconst OptionSelectorG2 = [];\r\n\r\nLogValue['C3Selected'] = [OptionC3[0], OptionC3[1]];\r\nLogValue['G2Selected'] = [OptionG2[0], OptionG2[1]];\r\n\r\nOptionC3.forEach(element => {\r\n    OptionSelectorC3.push(<Option key={element}>{element}</Option>)\r\n});\r\nOptionG2.forEach(element => {\r\n    OptionSelectorG2.push(<Option key={element}>{element}</Option>)\r\n});\r\n\r\nlet data_filterC3 = OptionC3.map(obj => {\r\n    let cobj = []\r\n\r\n    cobj = {\r\n        text: obj,\r\n        value: obj,\r\n    }\r\n    return cobj\r\n})\r\n\r\nconst parseDMYhmC3 = (s) => {\r\n    var b = s.split(/\\D/);\r\n    return new Date(b[2], b[1] - 1, b[2], b[3], b[4]);\r\n}\r\n\r\nconst columnsC3 = [\r\n    {\r\n        title: 'Parameter',\r\n        dataIndex: 'Parameter',\r\n        filters: data_filterC3,\r\n        filterMode: 'tree',\r\n        filterSearch: true,\r\n        onFilter: (value, record) => record.Parameter.includes(value),\r\n        width: '30%',\r\n    },\r\n    {\r\n        title: 'Value',\r\n        dataIndex: 'Value',\r\n        sorter: (a, b) => a.Value - b.Value,\r\n    },\r\n    {\r\n        title: 'Date',\r\n        dataIndex: 'date',\r\n        sorter: (a, b) => parseDMYhmC3(a.date) - parseDMYhmC3(b.date),\r\n    },\r\n];\r\n\r\n\r\n\r\nlet line, stackedColumnPlot\r\n\r\nconst EnergyUsage = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    useEffect(() => {\r\n        console.log('Reffect');\r\n\r\n\r\n        BarChartInit( ['Power Meter'] , DTinitial[0], DTinitial[1], 'Polymerlink', 'C3', '1', \"C3Table\", C3ModelMap)\r\n        \r\n        stackedColumnPlot = new Column('container', {\r\n            data: [],\r\n            isStack: true,\r\n            xField: 'year',\r\n            yField: 'value',\r\n            seriesField: 'type',\r\n            label: {\r\n                // 可手动配置 label 数据标签位置\r\n                position: 'middle', // 'top', 'bottom', 'middle'\r\n                // 可配置附加的布局方法\r\n                layout: [\r\n                    // 柱形图数据标签位置自动调整\r\n                    { type: 'interval-adjust-position' },\r\n                    // 数据标签防遮挡\r\n                    { type: 'interval-hide-overlap' },\r\n                    // 数据标签文颜色自动调整\r\n                    { type: 'adjust-color' },\r\n                ],\r\n            },\r\n        });\r\n\r\n        try { stackedColumnPlot.render(); }\r\n        catch { }\r\n\r\n\r\n        line = new Line('C3Graph', {\r\n            data: LogValue['C3Table'],\r\n            xField: 'date',\r\n            yField: 'Value',\r\n            seriesField: 'Parameter',\r\n        })\r\n\r\n        try { line.render() }\r\n        catch { }\r\n\r\n        // line2 = new Line('G2Graph', {\r\n        //     data: LogValue['G2Table'],\r\n        //     xField: 'date',\r\n        //     yField: 'Value',\r\n        //     seriesField: 'Parameter',\r\n        // })\r\n\r\n        // try { line2.render() }\r\n        // catch { }\r\n\r\n        return () => {\r\n            line.destroy();\r\n            stackedColumnPlot.destroy()\r\n            // line2.destroy();\r\n\r\n        }\r\n    }, [])\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n        console.log(Parameter)\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        let data = DataSortTime(response)\r\n        LogValue[BufferName] = data\r\n        console.log(data);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const BarChartInit = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n        // console.log(Parameter)\r\n\r\n        for (let month = 0; month < 6; month++) {\r\n            var date = new Date();\r\n            var firstDay = new Date(date.getFullYear(), date.getMonth() - month, 1);\r\n            var lastDay = new Date(date.getFullYear(), date.getMonth() + 1 - month, 0);\r\n            MonthlyEnergy = []\r\n    \r\n            let dat =[]\r\n                dat.push(firstDay)\r\n                dat.push(lastDay)\r\n    \r\n                let DateInterval = ConvertMonentToDateTime(dat)\r\n\r\n                const response = await logdata_request(Parameter, DateInterval[0], DateInterval[1], Site, Line, Page)\r\n                \r\n                if(response.data.length > 0){\r\n                    let length = response.data.length\r\n                    MonthlyEnergy[month] = (response.data[length-1].fields.Value - response.data[0].fields.Value).toFixed(2)\r\n                }\r\n\r\n                let Energy = {\r\n                    \"type\" : \"C3\",\r\n                    \"value\": MonthlyEnergy[month],\r\n                    \"Date\" : monthNames[date.getMonth() - month]\r\n                }\r\n\r\n                MonthlyEnergy.push(Energy)\r\n \r\n            }\r\n            console.log(MonthlyEnergy);\r\n        //setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const C3LogRequest = async (DT) => {\r\n        DTc3 = DT\r\n        console.log(DTc3);\r\n        C3DTRange = ConvertMonentToDateTime(DT)\r\n        console.log(C3DTRange);\r\n        await UpdateTableData(LogValue['C3Selected'], C3DTRange[0], C3DTRange[1], 'Polymerlink', 'C3', BlankPage, \"C3Table\", C3ModelMap)\r\n        console.log(LogValue[\"C3Table\"]);\r\n        line.changeData(LogValue[\"C3Table\"])\r\n    }\r\n\r\n    // const G2LogRequest = async (DT) => {\r\n    //     DTg2 = DT\r\n    //     G2DTRange = ConvertMonentToDateTime(DT)\r\n    //     await UpdateTableData(LogValue['G2Selected'], G2DTRange[0], G2DTRange[1], 'Polymerlink', 'G2', BlankPage, \"G2Table\", G2Model)\r\n    //     line2.changeData(LogValue[\"G2Table\"])\r\n    // }\r\n\r\n    const ChangeC3Select = (value) => {\r\n        LogValue['C3Selected'] = value\r\n    }\r\n\r\n    // const ChangeG2Select = (value) => {\r\n    //     LogValue['G2Selected'] = value\r\n\r\n    // }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <Divider orientation=\"left\">Energy Consumption</Divider>\r\n            </div>\r\n            <Card title={'Energy'} bordered={true} style={{ width: '100%', borderRadius: 15, backgroundColor: '#ffffff' }} hoverable={true}>\r\n                <div id='container'></div>\r\n            </Card>\r\n\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <Divider orientation=\"left\">C3 Log Visualize</Divider>\r\n            </div>\r\n            <div style={{ paddingBottom: '10px' }}>\r\n                <RangePicker showTime onOk={C3LogRequest} />\r\n                <Button type='primary' style={{ marginLeft: '10px' }} onClick={() => { C3LogRequest(DTc3) }}>Update</Button>\r\n            </div>\r\n\r\n            <Select\r\n                mode=\"multiple\"\r\n                size=\"middle\"\r\n                placeholder=\"Please select\"\r\n                defaultValue={[OptionC3[0], OptionC3[1]]}\r\n                style={{ width: '100%', paddingBottom: '20px' }}\r\n                onChange={ChangeC3Select}\r\n            >\r\n                {OptionSelectorC3}\r\n            </Select>\r\n\r\n            <Card title='Log Value C3' bordered={true}\r\n                style={{ width: '100%', borderRadius: 15, marginBottom: '10px' }} hoverable={true}>\r\n                <Table bordered columns={columnsC3} dataSource={LogValue['C3Table']} size=\"small\" scroll={{ y: 500 }} pagination={false} />\r\n            </Card>\r\n\r\n            <Card title={'C3 Graph Visulize'} bordered={true} style={{ width: '100%', borderRadius: 15, backgroundColor: '#ffffff' }} hoverable={true}>\r\n                <div id='C3Graph'></div>\r\n            </Card>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EnergyUsage\r\n\r\n"]},"metadata":{},"sourceType":"module"}