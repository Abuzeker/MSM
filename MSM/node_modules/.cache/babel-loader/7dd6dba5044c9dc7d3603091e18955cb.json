{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _ = require(\"lodash\");\n\nvar RichTextFragment = require(\"./RichTextFragment\");\n/**\n * A RichText class that contains many {@link RichTextFragment}.\n */\n\n\nvar RichText = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance of RichText. If you get the instance by calling `Cell.value()`,\n   * adding a text contains line separator will trigger {@link Cell.style}('wrapText', true), which\n   * will make MS Excel show the new line. i.e. In MS Excel, Tap \"alt+Enter\" in a cell, the cell\n   * will set wrap text to true automatically.\n   *\n   * @param {undefined|null|Object} [node] - The node stored in the shared string\n   */\n  function RichText(node) {\n    _classCallCheck(this, RichText);\n\n    this._node = [];\n    this._cell = null;\n    this._remainingNodes = [];\n\n    if (node) {\n      for (var i = 0; i < node.length; i++) {\n        var fragment = node[i];\n\n        if (fragment.name === 'r') {\n          this._node.push(new RichTextFragment(fragment, null, this));\n        } else {\n          // special node, e.g. rPh, phoneticPr in Japanese language.\n          this._remainingNodes.push(fragment);\n        }\n      }\n    }\n  }\n  /**\n   * Gets which cell this {@link RichText} instance belongs to.\n   * @return {Cell|undefined} The cell this instance belongs to.\n   */\n\n\n  _createClass(RichText, [{\n    key: \"cell\",\n    get: function get() {\n      return this._cell;\n    }\n    /**\n     * Gets the how many rich text fragment this {@link RichText} instance contains\n     * @return {number} The number of fragments this {@link RichText} instance has.\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._node.length;\n    }\n    /**\n     * Gets concatenated text without styles.\n     * @return {string} concatenated text\n     */\n\n  }, {\n    key: \"text\",\n    value: function text() {\n      var text = '';\n\n      for (var i = 0; i < this._node.length; i++) {\n        text += this.get(i).value();\n      }\n\n      return text;\n    }\n    /**\n     * Gets the instance with cell reference defined.\n     * @param {Cell} cell - Cell reference.\n     * @return {RichText} The instance with cell reference defined.\n     */\n\n  }, {\n    key: \"getInstanceWithCellRef\",\n    value: function getInstanceWithCellRef(cell) {\n      this._cell = cell;\n      return this;\n    }\n    /**\n     * Returns a deep copy of this instance.\n     * If cell reference is provided, it checks line separators and calls\n     * `cell.style('wrapText', true)` when needed.\n     * @param {Cell|undefined} [cell] - The cell reference.\n     * @return {RichText} A deep copied instance\n     */\n\n  }, {\n    key: \"copy\",\n    value: function copy(cell) {\n      var newRichText = new RichText(_.cloneDeep(this.toXml()));\n\n      if (cell && _.includes(this.text(), '\\n')) {\n        cell.style('wrapText', true);\n      }\n\n      return newRichText;\n    }\n    /**\n     * Gets the ith fragment of this {@link RichText} instance.\n     * @param {number} index - The index\n     * @return {RichTextFragment} A rich text fragment\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(index) {\n      return this._node[index];\n    }\n    /**\n     * Removes a rich text fragment. This instance will be mutated.\n     * @param {number} index - the index of the fragment to remove\n     * @return {RichText} the rich text instance\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      this._node.splice(index, 1);\n\n      this.removeUnsupportedNodes();\n      return this;\n    }\n    /**\n     * Adds a rich text fragment to the last or after the given index. This instance will be mutated.\n     * @param {string} text - the text\n     * @param {{}} [styles] - the styles js object, i.e. {fontSize: 12}\n     * @param {number|undefined|null} [index] - the index of the fragment to add\n     * @return {RichText} the rich text instance\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(text, styles, index) {\n      if (index === undefined || index === null) {\n        this._node.push(new RichTextFragment(text, styles, this));\n      } else {\n        this._node.splice(index, 0, new RichTextFragment(text, styles, this));\n      }\n\n      this.removeUnsupportedNodes();\n      return this;\n    }\n    /**\n     * Clears this rich text\n     * @return {RichText} the rich text instance\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._node = [];\n      this._remainingNodes = [];\n      this._cell = undefined;\n      return this;\n    }\n    /**\n     * Remove all unsupported nodes (phoneticPr, rPh for Japanese language).\n     * @return {undefined}\n     */\n\n  }, {\n    key: \"removeUnsupportedNodes\",\n    value: function removeUnsupportedNodes() {\n      this._remainingNodes = [];\n    }\n    /**\n     * Convert the rich text to an XML object.\n     * @returns {Array.<{}>} The XML form.\n     * @ignore\n     */\n\n  }, {\n    key: \"toXml\",\n    value: function toXml() {\n      var node = [];\n\n      for (var i = 0; i < this._node.length; i++) {\n        node.push(this._node[i].toXml());\n      }\n\n      return node.concat(this._remainingNodes);\n    }\n  }]);\n\n  return RichText;\n}(); // IE doesn't support function names so explicitly set it.\n\n\nif (!RichText.name) RichText.name = \"RichText\";\nmodule.exports = RichText;","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/xlsx-populate/lib/RichText.js"],"names":["_","require","RichTextFragment","RichText","node","_node","_cell","_remainingNodes","i","length","fragment","name","push","text","get","value","cell","newRichText","cloneDeep","toXml","includes","style","index","splice","removeUnsupportedNodes","styles","undefined","concat","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst _ = require(\"lodash\");\nconst RichTextFragment = require(\"./RichTextFragment\");\n\n/**\n * A RichText class that contains many {@link RichTextFragment}.\n */\nclass RichText {\n    /**\n     * Creates a new instance of RichText. If you get the instance by calling `Cell.value()`,\n     * adding a text contains line separator will trigger {@link Cell.style}('wrapText', true), which\n     * will make MS Excel show the new line. i.e. In MS Excel, Tap \"alt+Enter\" in a cell, the cell\n     * will set wrap text to true automatically.\n     *\n     * @param {undefined|null|Object} [node] - The node stored in the shared string\n     */\n    constructor(node) {\n        this._node = [];\n        this._cell = null;\n        this._remainingNodes = [];\n        if (node) {\n            for (let i = 0; i < node.length; i++) {\n                const fragment = node[i];\n                if (fragment.name === 'r') {\n                    this._node.push(new RichTextFragment(fragment, null, this));\n                } else {\n                    // special node, e.g. rPh, phoneticPr in Japanese language.\n                    this._remainingNodes.push(fragment);\n                }\n            }\n        }\n    }\n\n    /**\n     * Gets which cell this {@link RichText} instance belongs to.\n     * @return {Cell|undefined} The cell this instance belongs to.\n     */\n    get cell() {\n        return this._cell;\n    }\n\n    /**\n     * Gets the how many rich text fragment this {@link RichText} instance contains\n     * @return {number} The number of fragments this {@link RichText} instance has.\n     */\n    get length() {\n        return this._node.length;\n    }\n\n    /**\n     * Gets concatenated text without styles.\n     * @return {string} concatenated text\n     */\n    text() {\n        let text = '';\n        for (let i = 0; i < this._node.length; i++) {\n            text += this.get(i).value();\n        }\n        return text;\n    }\n\n    /**\n     * Gets the instance with cell reference defined.\n     * @param {Cell} cell - Cell reference.\n     * @return {RichText} The instance with cell reference defined.\n     */\n    getInstanceWithCellRef(cell) {\n        this._cell = cell;\n        return this;\n    }\n\n    /**\n     * Returns a deep copy of this instance.\n     * If cell reference is provided, it checks line separators and calls\n     * `cell.style('wrapText', true)` when needed.\n     * @param {Cell|undefined} [cell] - The cell reference.\n     * @return {RichText} A deep copied instance\n     */\n    copy(cell) {\n        const newRichText = new RichText(_.cloneDeep(this.toXml()));\n        if (cell && _.includes(this.text(), '\\n')) {\n            cell.style('wrapText', true);\n        }\n        return newRichText;\n    }\n\n    /**\n     * Gets the ith fragment of this {@link RichText} instance.\n     * @param {number} index - The index\n     * @return {RichTextFragment} A rich text fragment\n     */\n    get(index) {\n        return this._node[index];\n    }\n\n    /**\n     * Removes a rich text fragment. This instance will be mutated.\n     * @param {number} index - the index of the fragment to remove\n     * @return {RichText} the rich text instance\n     */\n    remove(index) {\n        this._node.splice(index, 1);\n        this.removeUnsupportedNodes();\n        return this;\n    }\n\n    /**\n     * Adds a rich text fragment to the last or after the given index. This instance will be mutated.\n     * @param {string} text - the text\n     * @param {{}} [styles] - the styles js object, i.e. {fontSize: 12}\n     * @param {number|undefined|null} [index] - the index of the fragment to add\n     * @return {RichText} the rich text instance\n     */\n    add(text, styles, index) {\n        if (index === undefined || index === null) {\n            this._node.push(new RichTextFragment(text, styles, this));\n        } else {\n            this._node.splice(index, 0, new RichTextFragment(text, styles, this));\n        }\n        this.removeUnsupportedNodes();\n        return this;\n    }\n\n    /**\n     * Clears this rich text\n     * @return {RichText} the rich text instance\n     */\n    clear() {\n        this._node = [];\n        this._remainingNodes = [];\n        this._cell = undefined;\n        return this;\n    }\n\n    /**\n     * Remove all unsupported nodes (phoneticPr, rPh for Japanese language).\n     * @return {undefined}\n     */\n    removeUnsupportedNodes() {\n        this._remainingNodes = [];\n    }\n\n    /**\n     * Convert the rich text to an XML object.\n     * @returns {Array.<{}>} The XML form.\n     * @ignore\n     */\n    toXml() {\n        const node = [];\n        for (let i = 0; i < this._node.length; i++) {\n            node.push(this._node[i].toXml());\n        }\n        return node.concat(this._remainingNodes);\n    }\n}\n\n// IE doesn't support function names so explicitly set it.\nif (!RichText.name) RichText.name = \"RichText\";\n\nmodule.exports = RichText;\n"]},"metadata":{},"sourceType":"script"}