{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1DataLog.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, Col, Divider, Row, DatePicker } from 'antd';\nimport React, { useState, useEffect } from 'react';\nimport { RealtimeData_Request } from '../../api';\nimport { C3Model, G2Model } from '../../DataRequest/DataModel';\nimport { DataSortRT } from '../../DataRequest/RealTimeRequestWrap';\nimport RealTimeGraphWrapper from '../Realtime/RealTimeGraphWrapper';\nimport RealTimeTableWrapper from '../Realtime/RealTimeTableWrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet C3DataModel = C3Model;\nlet G2DataModel = G2Model;\nlet BlankPage;\nlet LogValue = {\n  \"C3Table\": [],\n  \"G2Table\": [],\n  \"C3Graph\": [],\n  \"G2Graph\": []\n};\n\nconst Line1DataLog = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n  let DateTimeRange;\n  const {\n    RangePicker\n  } = DatePicker;\n\n  const DataRequest = async (label, site, page, line, HMIName, TableName) => {\n    const response = await RealtimeData_Request(label, site, page, line);\n    LogValue[TableName] = DataSortRT(response);\n    LogValue[HMIName] = LogValue[TableName];\n  };\n\n  const RenderNewData = () => {\n    DataRequest([], 'Polymerlink', '1', 'C3', 'C3HMI', \"C3Table\");\n    DataRequest([], 'Polymerlink', BlankPage, 'G2', 'G2HMI', \"G2Table\");\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1DataLog, \"TOtJj3Zjk9A8N3grQNDDe2GZezA=\");\n\n_c = Line1DataLog;\nexport default Line1DataLog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Line1DataLog\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1DataLog.jsx"],"names":["Button","Col","Divider","Row","DatePicker","React","useState","useEffect","RealtimeData_Request","C3Model","G2Model","DataSortRT","RealTimeGraphWrapper","RealTimeTableWrapper","C3DataModel","G2DataModel","BlankPage","LogValue","Line1DataLog","state","setState","count","DateTimeRange","RangePicker","DataRequest","label","site","page","line","HMIName","TableName","response","RenderNewData"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,OAAtB,EAA+BC,GAA/B,EAAoCC,UAApC,QAAsD,MAAtD;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,oBAAT,QAAqC,WAArC;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,6BAAjC;AACA,SAASC,UAAT,QAA2B,uCAA3B;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;;AAGA,IAAIC,WAAW,GAAGL,OAAlB;AACA,IAAIM,WAAW,GAAGL,OAAlB;AACA,IAAIM,SAAJ;AAEA,IAAIC,QAAQ,GAAG;AACX,aAAW,EADA;AAEX,aAAW,EAFA;AAGX,aAAW,EAHA;AAIX,aAAW;AAJA,CAAf;;AAOA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAEvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC;AAAEe,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAlC;AAEA,MAAIC,aAAJ;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAkBnB,UAAxB;;AAEA,QAAMoB,WAAW,GAAG,OAAOC,KAAP,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,EAAgCC,OAAhC,EAAyCC,SAAzC,KAAuD;AACvE,UAAMC,QAAQ,GAAG,MAAMvB,oBAAoB,CAACiB,KAAD,EAAQC,IAAR,EAAcC,IAAd,EAAoBC,IAApB,CAA3C;AACAX,IAAAA,QAAQ,CAACa,SAAD,CAAR,GAAsBnB,UAAU,CAACoB,QAAD,CAAhC;AACAd,IAAAA,QAAQ,CAACY,OAAD,CAAR,GAAoBZ,QAAQ,CAACa,SAAD,CAA5B;AACH,GAJD;;AAOA,QAAME,aAAa,GAAG,MAAM;AAExBR,IAAAA,WAAW,CAAC,EAAD,EAAK,aAAL,EAAoB,GAApB,EAAyB,IAAzB,EAA+B,OAA/B,EAAwC,SAAxC,CAAX;AACAA,IAAAA,WAAW,CAAC,EAAD,EAAK,aAAL,EAAoBR,SAApB,EAA+B,IAA/B,EAAqC,OAArC,EAA8C,SAA9C,CAAX;AAEAI,IAAAA,QAAQ,CAAC;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aAAgB;AAAEA,QAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,OAAhB;AAAA,KAAD,CAAR;AACH,GAND;;AAWA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAjCD;;GAAMH,Y;;KAAAA,Y;AAmCN,eAAeA,YAAf","sourcesContent":["import { Button, Col, Divider, Row, DatePicker } from 'antd'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { RealtimeData_Request } from '../../api'\r\nimport { C3Model, G2Model } from '../../DataRequest/DataModel'\r\nimport { DataSortRT } from '../../DataRequest/RealTimeRequestWrap'\r\nimport RealTimeGraphWrapper from '../Realtime/RealTimeGraphWrapper'\r\nimport RealTimeTableWrapper from '../Realtime/RealTimeTableWrapper'\r\n\r\n\r\nlet C3DataModel = C3Model\r\nlet G2DataModel = G2Model\r\nlet BlankPage\r\n\r\nlet LogValue = {\r\n    \"C3Table\": [],\r\n    \"G2Table\": [],\r\n    \"C3Graph\": [],\r\n    \"G2Graph\": [],\r\n}\r\n\r\nconst Line1DataLog = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    let DateTimeRange\r\n    const { RangePicker } = DatePicker;\r\n\r\n    const DataRequest = async (label, site, page, line, HMIName, TableName) => {\r\n        const response = await RealtimeData_Request(label, site, page, line)\r\n        LogValue[TableName] = DataSortRT(response)\r\n        LogValue[HMIName] = LogValue[TableName]\r\n    }\r\n\r\n\r\n    const RenderNewData = () => {\r\n\r\n        DataRequest([], 'Polymerlink', '1', 'C3', 'C3HMI', \"C3Table\")\r\n        DataRequest([], 'Polymerlink', BlankPage, 'G2', 'G2HMI', \"G2Table\")\r\n\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            \r\n       \r\n  \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Line1DataLog\r\n"]},"metadata":{},"sourceType":"module"}