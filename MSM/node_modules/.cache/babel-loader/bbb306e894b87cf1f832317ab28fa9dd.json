{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _ = require(\"lodash\");\n/**\n * Method argument handler. Used for overloading methods.\n * @private\n */\n\n\nvar ArgHandler = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance of ArgHandler.\n   * @param {string} name - The method name to use in error messages.\n   */\n  function ArgHandler(name) {\n    _classCallCheck(this, ArgHandler);\n\n    this._name = name;\n    this._cases = [];\n  }\n  /**\n   * Add a case.\n   * @param {string|Array.<string>} [types] - The type or types of arguments to match this case.\n   * @param {Function} handler - The function to call when this case is matched.\n   * @returns {ArgHandler} The handler for chaining.\n   */\n\n\n  _createClass(ArgHandler, [{\n    key: \"case\",\n    value: function _case(types, handler) {\n      if (arguments.length === 1) {\n        handler = types;\n        types = [];\n      }\n\n      if (!Array.isArray(types)) types = [types];\n\n      this._cases.push({\n        types: types,\n        handler: handler\n      });\n\n      return this;\n    }\n    /**\n     * Handle the method arguments by checking each case in order until one matches and then call its handler.\n     * @param {Arguments|Array.<*>} args - The method arguments.\n     * @returns {*} The result of the handler.\n     * @throws {Error} Throws if no case matches.\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle(args) {\n      for (var i = 0; i < this._cases.length; i++) {\n        var c = this._cases[i];\n\n        if (this._argsMatchTypes(args, c.types)) {\n          return c.handler.apply(null, args);\n        }\n      }\n\n      throw new Error(\"\".concat(this._name, \": Invalid arguments.\"));\n    }\n    /**\n     * Check if the arguments match the given types.\n     * @param {Arguments} args - The arguments.\n     * @param {Array.<string>} types - The types.\n     * @returns {boolean} True if matches, false otherwise.\n     * @throws {Error} Throws if unknown type.\n     * @private\n     */\n\n  }, {\n    key: \"_argsMatchTypes\",\n    value: function _argsMatchTypes(args, types) {\n      if (args.length !== types.length) return false;\n      return _.every(args, function (arg, i) {\n        var type = types[i];\n        if (type === '*') return true;\n        if (type === 'nil') return _.isNil(arg);\n        if (type === 'string') return typeof arg === \"string\";\n        if (type === 'boolean') return typeof arg === \"boolean\";\n        if (type === 'number') return typeof arg === \"number\";\n        if (type === 'integer') return typeof arg === \"number\" && _.isInteger(arg);\n        if (type === 'function') return typeof arg === \"function\";\n        if (type === 'array') return Array.isArray(arg);\n        if (type === 'date') return arg && arg.constructor === Date;\n        if (type === 'object') return arg && arg.constructor === Object;\n        if (arg && arg.constructor && arg.constructor.name === type) return true;\n        throw new Error(\"Unknown type: \".concat(type));\n      });\n    }\n  }]);\n\n  return ArgHandler;\n}();\n\nmodule.exports = ArgHandler;","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/xlsx-populate/lib/ArgHandler.js"],"names":["_","require","ArgHandler","name","_name","_cases","types","handler","arguments","length","Array","isArray","push","args","i","c","_argsMatchTypes","apply","Error","every","arg","type","isNil","isInteger","constructor","Date","Object","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst _ = require(\"lodash\");\n\n/**\n * Method argument handler. Used for overloading methods.\n * @private\n */\nclass ArgHandler {\n    /**\n     * Creates a new instance of ArgHandler.\n     * @param {string} name - The method name to use in error messages.\n     */\n    constructor(name) {\n        this._name = name;\n        this._cases = [];\n    }\n\n    /**\n     * Add a case.\n     * @param {string|Array.<string>} [types] - The type or types of arguments to match this case.\n     * @param {Function} handler - The function to call when this case is matched.\n     * @returns {ArgHandler} The handler for chaining.\n     */\n    case(types, handler) {\n        if (arguments.length === 1) {\n            handler = types;\n            types = [];\n        }\n\n        if (!Array.isArray(types)) types = [types];\n        this._cases.push({ types, handler });\n        return this;\n    }\n\n    /**\n     * Handle the method arguments by checking each case in order until one matches and then call its handler.\n     * @param {Arguments|Array.<*>} args - The method arguments.\n     * @returns {*} The result of the handler.\n     * @throws {Error} Throws if no case matches.\n     */\n    handle(args) {\n        for (let i = 0; i < this._cases.length; i++) {\n            const c = this._cases[i];\n            if (this._argsMatchTypes(args, c.types)) {\n                return c.handler.apply(null, args);\n            }\n        }\n\n        throw new Error(`${this._name}: Invalid arguments.`);\n    }\n\n    /**\n     * Check if the arguments match the given types.\n     * @param {Arguments} args - The arguments.\n     * @param {Array.<string>} types - The types.\n     * @returns {boolean} True if matches, false otherwise.\n     * @throws {Error} Throws if unknown type.\n     * @private\n     */\n    _argsMatchTypes(args, types) {\n        if (args.length !== types.length) return false;\n\n        return _.every(args, (arg, i) => {\n            const type = types[i];\n\n            if (type === '*') return true;\n            if (type === 'nil') return _.isNil(arg);\n            if (type === 'string') return typeof arg === \"string\";\n            if (type === 'boolean') return typeof arg === \"boolean\";\n            if (type === 'number') return typeof arg === \"number\";\n            if (type === 'integer') return typeof arg === \"number\" && _.isInteger(arg);\n            if (type === 'function') return typeof arg === \"function\";\n            if (type === 'array') return Array.isArray(arg);\n            if (type === 'date') return arg && arg.constructor === Date;\n            if (type === 'object') return arg && arg.constructor === Object;\n            if (arg && arg.constructor && arg.constructor.name === type) return true;\n\n            throw new Error(`Unknown type: ${type}`);\n        });\n    }\n}\n\nmodule.exports = ArgHandler;\n"]},"metadata":{},"sourceType":"script"}