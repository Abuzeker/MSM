{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1Report.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Col, DatePicker, Descriptions, Divider, PageHeader, Row, Table } from 'antd';\nimport { logdata_request } from '../../api';\nimport { DataSortTime, GetDateTime, LogDataMappingTime, SetDateRange, TableColumbPDF, TableColumbTimeAsRow } from '../../DataRequest/LogDataRequestWrap';\nimport { C3Model } from '../../DataRequest/DataModel';\nimport { generateData } from '../../utils/PdfGenerate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": []\n};\nconst Columb = TableColumbTimeAsRow();\n\nconst Line1Report = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    let data = DataSortTime(response);\n    LogValue['LogC3'] = LogDataMappingTime(C3Model, data);\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  };\n\n  const SetTimeRange = value => {\n    const DateRange = SetDateRange(value);\n    UpdateTableData([], DateRange[0], DateRange[1], 'Polymerlink', 'C3', '1');\n  };\n\n  const generatePDF = () => {\n    let headers = TableColumbPDF();\n    generateData(headers, LogValue['LogC3']);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      onChange: SetTimeRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: generatePDF,\n      children: \" export \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        columns: Columb,\n        dataSource: LogValue['LogC3'],\n        bordered: true,\n        scroll: {\n          x: 2000,\n          y: 500\n        },\n        pagination: false,\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n      onChange: SetTimeRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: generatePDF,\n      children: \" export \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        columns: Columb,\n        dataSource: LogValue['LogC3'],\n        bordered: true,\n        scroll: {\n          x: 2000,\n          y: 500\n        },\n        pagination: false,\n        size: \"small\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1Report, \"TOtJj3Zjk9A8N3grQNDDe2GZezA=\");\n\n_c = Line1Report;\nexport default Line1Report;\n\nvar _c;\n\n$RefreshReg$(_c, \"Line1Report\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1Report.jsx"],"names":["React","useState","useEffect","Button","Col","DatePicker","Descriptions","Divider","PageHeader","Row","Table","logdata_request","DataSortTime","GetDateTime","LogDataMappingTime","SetDateRange","TableColumbPDF","TableColumbTimeAsRow","C3Model","generateData","LogValue","Columb","Line1Report","state","setState","count","UpdateTableData","Parameter","StartTime","EndTime","Site","Line","Page","response","data","SetTimeRange","value","DateRange","generatePDF","headers","x","y"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Button, Col, DatePicker, Descriptions, Divider, PageHeader, Row, Table } from 'antd'\r\nimport { logdata_request } from '../../api';\r\nimport { DataSortTime, GetDateTime, LogDataMappingTime, SetDateRange, TableColumbPDF, TableColumbTimeAsRow } from '../../DataRequest/LogDataRequestWrap';\r\nimport { C3Model } from '../../DataRequest/DataModel';\r\nimport { generateData } from '../../utils/PdfGenerate';\r\n\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n}\r\n\r\nconst Columb = TableColumbTimeAsRow()\r\n\r\nconst Line1Report = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        let data = DataSortTime(response)\r\n        LogValue['LogC3'] = LogDataMappingTime(C3Model, data)\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const SetTimeRange = (value) => {\r\n        const DateRange = SetDateRange(value)\r\n        UpdateTableData([], DateRange[0], DateRange[1], 'Polymerlink', 'C3', '1')\r\n    }\r\n\r\n    const generatePDF = () => {\r\n        let headers = TableColumbPDF()\r\n        generateData(headers, LogValue['LogC3'])\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <DatePicker onChange={SetTimeRange} />\r\n            <Button onClick={generatePDF}> export </Button>\r\n            <div >\r\n                <Table columns={Columb} dataSource={LogValue['LogC3']} bordered scroll={{ x: 2000, y: 500 }} pagination={false} size=\"small\" />\r\n            </div>\r\n\r\n            <DatePicker onChange={SetTimeRange} />\r\n            <Button onClick={generatePDF}> export </Button>\r\n            <div>\r\n                <Table columns={Columb} dataSource={LogValue['LogC3']} bordered scroll={{ x: 2000, y: 500 }} pagination={false} size=\"small\" />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Line1Report\r\n"]},"metadata":{},"sourceType":"module"}