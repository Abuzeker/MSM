{"ast":null,"code":"import React from 'react';\nimport { RealtimeData_Request } from '../api';\nimport moment from 'moment';\nlet responseData = [];\nexport const DataRequest = async (label, site, page, line) => {\n  const response = await RealtimeData_Request(label, site, page, line);\n\n  if (response.success !== false) {\n    const data = response.Data;\n    let DataReturn = data.map(obj => {\n      let cobj = [];\n      let ar0 = moment(obj.fields.LastChange).utc(true).format('YYYY-MM-DD HH:mm:ss');\n      cobj = {\n        'time': ar0,\n        'Label': obj.fields.Label,\n        'Value': obj.fields.Value,\n        'Line': obj.fields.Line,\n        'key': obj.fields.Label,\n        'Page': obj.fields.Page\n      };\n      return cobj;\n    });\n    responseData[0] = DataReturn;\n    return response.data;\n  } else {\n    console.log('Data Request Error');\n  }\n};\n_c = DataRequest;\nexport const RealTimeRequestWrap = props => {\n  return responseData[0];\n};\n_c2 = RealTimeRequestWrap;\nexport const DataSort = response => {\n  if (response.success !== false) {\n    const data = response.Data;\n    let DataReturn = data.map(obj => {\n      let cobj = [];\n      let ar0 = moment(obj.fields.LastChange).utc(true).format('YYYY-MM-DD HH:mm:ss');\n      cobj = {\n        'time': ar0,\n        'Label': obj.fields.Label,\n        'Value': obj.fields.Value,\n        'Line': obj.fields.Line,\n        'key': obj.fields.Label,\n        'Page': obj.fields.Page\n      };\n      return cobj;\n    });\n    return DataReturn;\n  } else {\n    console.log('Data Request Error');\n  }\n};\n_c3 = DataSort;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DataRequest\");\n$RefreshReg$(_c2, \"RealTimeRequestWrap\");\n$RefreshReg$(_c3, \"DataSort\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/DataRequest/RealTimeRequestWrap.js"],"names":["React","RealtimeData_Request","moment","responseData","DataRequest","label","site","page","line","response","success","data","Data","DataReturn","map","obj","cobj","ar0","fields","LastChange","utc","format","Label","Value","Line","Page","console","log","RealTimeRequestWrap","props","DataSort"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,oBAAT,QAAqC,QAArC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,IAAIC,YAAY,GAAG,EAAnB;AAGA,OAAO,MAAMC,WAAW,GAAG,OAAOC,KAAP,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,IAA1B,KAAmC;AAE1D,QAAMC,QAAQ,GAAG,MAAMR,oBAAoB,CAACI,KAAD,EAAQC,IAAR,EAAcC,IAAd,EAAoBC,IAApB,CAA3C;;AAEA,MAAIC,QAAQ,CAACC,OAAT,KAAqB,KAAzB,EAAgC;AAC5B,UAAMC,IAAI,GAAGF,QAAQ,CAACG,IAAtB;AAEA,QAAIC,UAAU,GAAGF,IAAI,CAACG,GAAL,CAASC,GAAG,IAAI;AAC7B,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIC,GAAG,GAAGf,MAAM,CAACa,GAAG,CAACG,MAAJ,CAAWC,UAAZ,CAAN,CAA8BC,GAA9B,CAAkC,IAAlC,EAAwCC,MAAxC,CAA+C,qBAA/C,CAAV;AAEAL,MAAAA,IAAI,GAAG;AACH,gBAAQC,GADL;AAEH,iBAASF,GAAG,CAACG,MAAJ,CAAWI,KAFjB;AAGH,iBAASP,GAAG,CAACG,MAAJ,CAAWK,KAHjB;AAIH,gBAAQR,GAAG,CAACG,MAAJ,CAAWM,IAJhB;AAKH,eAAOT,GAAG,CAACG,MAAJ,CAAWI,KALf;AAMH,gBAAQP,GAAG,CAACG,MAAJ,CAAWO;AANhB,OAAP;AAQA,aAAOT,IAAP;AACH,KAbgB,CAAjB;AAcAb,IAAAA,YAAY,CAAC,CAAD,CAAZ,GAAkBU,UAAlB;AACA,WAAOJ,QAAQ,CAACE,IAAhB;AACH,GAnBD,MAoBK;AACDe,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;AACJ,CA3BM;KAAMvB,W;AA6Bb,OAAO,MAAMwB,mBAAmB,GAAIC,KAAD,IAAW;AAE1C,SAAO1B,YAAY,CAAC,CAAD,CAAnB;AACH,CAHM;MAAMyB,mB;AAKb,OAAO,MAAME,QAAQ,GAAIrB,QAAD,IAAc;AAElC,MAAIA,QAAQ,CAACC,OAAT,KAAqB,KAAzB,EAAgC;AAC5B,UAAMC,IAAI,GAAGF,QAAQ,CAACG,IAAtB;AAEA,QAAIC,UAAU,GAAGF,IAAI,CAACG,GAAL,CAASC,GAAG,IAAI;AAC7B,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIC,GAAG,GAAGf,MAAM,CAACa,GAAG,CAACG,MAAJ,CAAWC,UAAZ,CAAN,CAA8BC,GAA9B,CAAkC,IAAlC,EAAwCC,MAAxC,CAA+C,qBAA/C,CAAV;AAEAL,MAAAA,IAAI,GAAG;AACH,gBAAQC,GADL;AAEH,iBAASF,GAAG,CAACG,MAAJ,CAAWI,KAFjB;AAGH,iBAASP,GAAG,CAACG,MAAJ,CAAWK,KAHjB;AAIH,gBAAQR,GAAG,CAACG,MAAJ,CAAWM,IAJhB;AAKH,eAAOT,GAAG,CAACG,MAAJ,CAAWI,KALf;AAMH,gBAAQP,GAAG,CAACG,MAAJ,CAAWO;AANhB,OAAP;AAQA,aAAOT,IAAP;AACH,KAbgB,CAAjB;AAcA,WAAOH,UAAP;AACH,GAlBD,MAmBK;AACDa,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;AACJ,CAxBM;MAAMG,Q","sourcesContent":["import React from 'react'\r\nimport { RealtimeData_Request } from '../api'\r\nimport moment from 'moment';\r\n\r\nlet responseData = []\r\n\r\n\r\nexport const DataRequest = async (label, site, page, line) => {\r\n\r\n    const response = await RealtimeData_Request(label, site, page, line)\r\n\r\n    if (response.success !== false) {\r\n        const data = response.Data\r\n\r\n        let DataReturn = data.map(obj => {\r\n            let cobj = []\r\n            let ar0 = moment(obj.fields.LastChange).utc(true).format('YYYY-MM-DD HH:mm:ss')\r\n\r\n            cobj = {\r\n                'time': ar0,\r\n                'Label': obj.fields.Label,\r\n                'Value': obj.fields.Value,\r\n                'Line': obj.fields.Line,\r\n                'key': obj.fields.Label,\r\n                'Page': obj.fields.Page,\r\n            }\r\n            return cobj\r\n        })\r\n        responseData[0] = DataReturn\r\n        return response.data\r\n    }\r\n    else {\r\n        console.log('Data Request Error');\r\n    }\r\n}\r\n\r\nexport const RealTimeRequestWrap = (props) => {\r\n\r\n    return responseData[0]\r\n}\r\n\r\nexport const DataSort = (response) => {\r\n\r\n    if (response.success !== false) {\r\n        const data = response.Data\r\n\r\n        let DataReturn = data.map(obj => {\r\n            let cobj = []\r\n            let ar0 = moment(obj.fields.LastChange).utc(true).format('YYYY-MM-DD HH:mm:ss')\r\n\r\n            cobj = {\r\n                'time': ar0,\r\n                'Label': obj.fields.Label,\r\n                'Value': obj.fields.Value,\r\n                'Line': obj.fields.Line,\r\n                'key': obj.fields.Label,\r\n                'Page': obj.fields.Page,\r\n            }\r\n            return cobj\r\n        })\r\n        return DataReturn\r\n    }\r\n    else {\r\n        console.log('Data Request Error');\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}