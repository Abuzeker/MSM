{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1Report.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Col, DatePicker, Descriptions, Divider, PageHeader, Row, Table } from 'antd';\nimport { logdata_request } from '../../api';\nimport { DataSortTime, GetDateTime, LogDataMappingTime, SetDateRange, TableColumbPDF, TableColumbTimeAsRow } from '../../DataRequest/LogDataRequestWrap';\nimport { C3Model } from '../../DataRequest/DataModel';\nimport { GeneratePDF } from '../../utils/PdfGenerate';\nimport TimeTableWrapper from '../Report/TimeTableWrapper';\nimport ReportWrapper from '../Report/ReportWrapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": []\n};\nconst Columb = TableColumbTimeAsRow();\n\nconst Line1Report = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    let data = DataSortTime(response);\n    LogValue['LogC3'] = LogDataMappingTime(C3Model, data);\n    setState(_ref => {\n      let {\n        count\n      } = _ref;\n      return {\n        count: count + 1\n      };\n    });\n  }; // const SetTimeRange = (value) => {\n  //     const DateRange = SetDateRange(value)\n  //     UpdateTableData([], DateRange[0], DateRange[1], 'Polymerlink', 'C3', '1')\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ReportWrapper, {\n      SetTimeRangeCallBack: UpdateTableData,\n      LogValue: LogValue['LogC3'],\n      Columb: Columb,\n      site: 'C3',\n      page: '1'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1Report, \"TOtJj3Zjk9A8N3grQNDDe2GZezA=\");\n\n_c = Line1Report;\nexport default Line1Report;\n\nvar _c;\n\n$RefreshReg$(_c, \"Line1Report\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1Report.jsx"],"names":["React","useState","useEffect","Button","Col","DatePicker","Descriptions","Divider","PageHeader","Row","Table","logdata_request","DataSortTime","GetDateTime","LogDataMappingTime","SetDateRange","TableColumbPDF","TableColumbTimeAsRow","C3Model","GeneratePDF","TimeTableWrapper","ReportWrapper","LogValue","Columb","Line1Report","state","setState","count","UpdateTableData","Parameter","StartTime","EndTime","Site","Line","Page","response","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,UAAtB,EAAkCC,YAAlC,EAAgDC,OAAhD,EAAyDC,UAAzD,EAAqEC,GAArE,EAA0EC,KAA1E,QAAuF,MAAvF;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,kBAApC,EAAwDC,YAAxD,EAAsEC,cAAtE,EAAsFC,oBAAtF,QAAkH,sCAAlH;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;;AAGA,IAAIC,QAAQ,GAAG;AACX,WAAS,EADE;AAEX,WAAS;AAFE,CAAf;AAKA,MAAMC,MAAM,GAAGN,oBAAoB,EAAnC;;AAEA,MAAMO,WAAW,GAAG,MAAM;AAAA;;AAEtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC;AAAE0B,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAlC;;AAEA,QAAMC,eAAe,GAAG,OAAOC,SAAP,EAAkBC,SAAlB,EAA6BC,OAA7B,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkDC,IAAlD,KAA2D;AAC/E,UAAMC,QAAQ,GAAG,MAAMxB,eAAe,CAACkB,SAAD,EAAYC,SAAZ,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4CC,IAA5C,CAAtC;AACA,QAAIE,IAAI,GAAGxB,YAAY,CAACuB,QAAD,CAAvB;AACAb,IAAAA,QAAQ,CAAC,OAAD,CAAR,GAAoBR,kBAAkB,CAACI,OAAD,EAAUkB,IAAV,CAAtC;AACAV,IAAAA,QAAQ,CAAC;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aAAgB;AAAEA,QAAAA,KAAK,EAAEA,KAAK,GAAG;AAAjB,OAAhB;AAAA,KAAD,CAAR;AACH,GALD,CAJsB,CAWtB;AACA;AACA;AACA;;;AAEA,sBACI;AAAA,2BACI,QAAC,aAAD;AAAe,MAAA,oBAAoB,EAAEC,eAArC;AAAsD,MAAA,QAAQ,EAAEN,QAAQ,CAAC,OAAD,CAAxE;AAAmF,MAAA,MAAM,EAAEC,MAA3F;AAAmG,MAAA,IAAI,EAAE,IAAzG;AAA+G,MAAA,IAAI,EAAE;AAArH;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAvBD;;GAAMC,W;;KAAAA,W;AAyBN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Button, Col, DatePicker, Descriptions, Divider, PageHeader, Row, Table } from 'antd'\r\nimport { logdata_request } from '../../api';\r\nimport { DataSortTime, GetDateTime, LogDataMappingTime, SetDateRange, TableColumbPDF, TableColumbTimeAsRow } from '../../DataRequest/LogDataRequestWrap';\r\nimport { C3Model } from '../../DataRequest/DataModel';\r\nimport { GeneratePDF } from '../../utils/PdfGenerate';\r\nimport TimeTableWrapper from '../Report/TimeTableWrapper';\r\nimport ReportWrapper from '../Report/ReportWrapper';\r\n\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n}\r\n\r\nconst Columb = TableColumbTimeAsRow()\r\n\r\nconst Line1Report = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        let data = DataSortTime(response)\r\n        LogValue['LogC3'] = LogDataMappingTime(C3Model, data)\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    // const SetTimeRange = (value) => {\r\n    //     const DateRange = SetDateRange(value)\r\n    //     UpdateTableData([], DateRange[0], DateRange[1], 'Polymerlink', 'C3', '1')\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <ReportWrapper SetTimeRangeCallBack={UpdateTableData} LogValue={LogValue['LogC3']} Columb={Columb} site={'C3'} page={'1'}/>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Line1Report\r\n"]},"metadata":{},"sourceType":"module"}