{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\TestPage\\\\Testpage1.jsx\";\nimport React from 'react';\nimport { Page, Text, View, Document, StyleSheet, ReactPDF, PDFDownloadLink } from '@react-pdf/renderer';\nimport { Button, Table, Tabs } from 'antd';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport Svgexporttest from './Svgexporttest';\nimport Excel from 'exceljs';\nimport { saveAs } from 'file-saver'; // const columns = [\n//     {\n//         title: 'Full Name',\n//         width: 100,\n//         dataIndex: 'name',\n//         key: 'name',\n//         fixed: 'left',\n//     },\n//     {\n//         title: 'Age',\n//         width: 100,\n//         dataIndex: 'age',\n//         key: 'age',\n//         fixed: 'left',\n//     },\n//     {\n//         title: 'Column 1',\n//         dataIndex: 'address',\n//         key: '1',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 2',\n//         dataIndex: 'address',\n//         key: '2',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 3',\n//         dataIndex: 'address',\n//         key: '3',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 4',\n//         dataIndex: 'address',\n//         key: '4',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 5',\n//         dataIndex: 'address',\n//         key: '5',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 6',\n//         dataIndex: 'address',\n//         key: '6',\n//         width: 150,\n//     },\n//     {\n//         title: 'Column 7',\n//         dataIndex: 'address',\n//         key: '7',\n//         width: 150,\n//     },\n//     { title: 'Column 8', dataIndex: 'address', key: '8' },\n//     {\n//         title: 'Action',\n//         key: 'operation',\n//         fixed: 'right',\n//         width: 100,\n//         render: () => <a>action</a>,\n//     },\n// ];\n// const data = [];\n// for (let i = 0; i < 100; i++) {\n//     data.push({\n//         key: i,\n//         name: `Edrward ${i}`,\n//         age: 32,\n//         address: `London Park no. ${i}`,\n//     });\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Testpage1 = () => {\n  const WriteExcelCell = () => {\n    function s2ab(s) {\n      var buf = new ArrayBuffer(s.length);\n      var view = new Uint8Array(buf);\n\n      for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\n\n      return buf;\n    }\n\n    let test = [['11', '11', '11', '11', '11'], ['12', '12', '12', '12', '12']];\n    fetch(\"ExtruderSheet.xlsx\").then(res => res.arrayBuffer()).then(ab => {\n      const wb = XLSX.read(ab, {\n        type: \"string\"\n      });\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      XLSX.utils.sheet_add_aoa(ws, test, {\n        origin: 'O6'\n      });\n      let wbout = XLSX.write(wb, {\n        bookType: 'xlsx',\n        type: 'binary'\n      });\n      console.log('Done');\n      saveAs(new Blob([s2ab(wbout)], {\n        type: \"application/octet-stream\"\n      }), 'test.xlsx');\n    });\n  };\n\n  const TestEcelHandler = () => {\n    var workbook = new Excel.Workbook();\n    workbook.xlsx.readFile(\"ExtruderSheet.xlsx\").then(function () {\n      var worksheet = workbook.getWorksheet(\"Sheet1\");\n      worksheet.eachRow({\n        includeEmpty: true\n      }, function (row, rowNumber) {\n        console.log(\"Row \" + rowNumber + \" = \" + JSON.stringify(row.values));\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: TestEcelHandler,\n      children: \"capture\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Testpage1;\nexport default Testpage1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Testpage1\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/TestPage/Testpage1.jsx"],"names":["React","Page","Text","View","Document","StyleSheet","ReactPDF","PDFDownloadLink","Button","Table","Tabs","html2canvas","jsPDF","Svgexporttest","Excel","saveAs","Testpage1","WriteExcelCell","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","test","fetch","then","res","arrayBuffer","ab","wb","XLSX","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_add_aoa","origin","wbout","write","bookType","console","log","Blob","TestEcelHandler","workbook","Workbook","xlsx","readFile","worksheet","getWorksheet","eachRow","includeEmpty","row","rowNumber","JSON","stringify","values"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Page, Text, View, Document, StyleSheet, ReactPDF, PDFDownloadLink } from '@react-pdf/renderer';\r\nimport { Button, Table, Tabs } from 'antd';\r\nimport html2canvas from 'html2canvas'\r\nimport jsPDF from 'jspdf'\r\nimport Svgexporttest from './Svgexporttest';\r\nimport Excel from 'exceljs'\r\nimport { saveAs } from 'file-saver';\r\n\r\n\r\n// const columns = [\r\n//     {\r\n//         title: 'Full Name',\r\n//         width: 100,\r\n//         dataIndex: 'name',\r\n//         key: 'name',\r\n//         fixed: 'left',\r\n//     },\r\n//     {\r\n//         title: 'Age',\r\n//         width: 100,\r\n//         dataIndex: 'age',\r\n//         key: 'age',\r\n//         fixed: 'left',\r\n//     },\r\n//     {\r\n//         title: 'Column 1',\r\n//         dataIndex: 'address',\r\n//         key: '1',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 2',\r\n//         dataIndex: 'address',\r\n//         key: '2',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 3',\r\n//         dataIndex: 'address',\r\n//         key: '3',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 4',\r\n//         dataIndex: 'address',\r\n//         key: '4',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 5',\r\n//         dataIndex: 'address',\r\n//         key: '5',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 6',\r\n//         dataIndex: 'address',\r\n//         key: '6',\r\n//         width: 150,\r\n//     },\r\n//     {\r\n//         title: 'Column 7',\r\n//         dataIndex: 'address',\r\n//         key: '7',\r\n//         width: 150,\r\n//     },\r\n//     { title: 'Column 8', dataIndex: 'address', key: '8' },\r\n//     {\r\n//         title: 'Action',\r\n//         key: 'operation',\r\n//         fixed: 'right',\r\n//         width: 100,\r\n//         render: () => <a>action</a>,\r\n//     },\r\n// ];\r\n\r\n// const data = [];\r\n// for (let i = 0; i < 100; i++) {\r\n//     data.push({\r\n//         key: i,\r\n//         name: `Edrward ${i}`,\r\n//         age: 32,\r\n//         address: `London Park no. ${i}`,\r\n//     });\r\n// }\r\n\r\nconst Testpage1 = () => {\r\n\r\n    const WriteExcelCell = () => {\r\n\r\n        function s2ab(s) {\r\n\r\n            var buf = new ArrayBuffer(s.length);\r\n            var view = new Uint8Array(buf);\r\n            for (var i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;\r\n            return buf;\r\n\r\n        }\r\n\r\n        let test = [\r\n            [\r\n                '11', '11', '11', '11', '11'\r\n            ],\r\n            [\r\n                '12', '12', '12', '12', '12'\r\n            ]\r\n        ]\r\n\r\n        fetch(\"ExtruderSheet.xlsx\")\r\n            .then(res => res.arrayBuffer())\r\n            .then(ab => {\r\n                const wb = XLSX.read(ab, { type: \"string\" });\r\n                const wsname = wb.SheetNames[0];\r\n                const ws = wb.Sheets[wsname];\r\n\r\n                XLSX.utils.sheet_add_aoa(ws, test, { origin: 'O6' });\r\n\r\n                let wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'binary' });\r\n                console.log('Done');\r\n\r\n                saveAs(new Blob([s2ab(wbout)], { type: \"application/octet-stream\" }), 'test.xlsx');\r\n\r\n            })\r\n    }\r\n\r\n    const TestEcelHandler = () => {\r\n\r\n        var workbook = new Excel.Workbook();\r\n        workbook.xlsx.readFile(\"ExtruderSheet.xlsx\")\r\n            .then(function () {\r\n                var worksheet = workbook.getWorksheet(\"Sheet1\");\r\n                worksheet.eachRow({ includeEmpty: true }, function (row, rowNumber) {\r\n                    console.log(\"Row \" + rowNumber + \" = \" + JSON.stringify(row.values));\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={TestEcelHandler}>\r\n                capture\r\n            </Button>\r\n            {/* \r\n            <div id='capture' style={{ width: '100%', height: 600, borderRadius: 15, }}>\r\n            </div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Testpage1\r\n"]},"metadata":{},"sourceType":"module"}