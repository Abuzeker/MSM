{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1Report.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Col, DatePicker, Divider, Row } from 'antd';\nimport { logdata_request } from '../../api';\nimport { DataSortTime, GetDateTime, LogDataMappingTime, SetDateRange } from '../../DataRequest/LogDataRequestWrap';\nimport { C3Model } from '../../DataRequest/DataModel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": []\n};\nconst {\n  RangePicker\n} = DatePicker;\n\nconst Line1Report = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n\n  const TestGet = () => {\n    let DateTimeRange = GetDateTime(1);\n    UpdateTableData([], DateTimeRange[0], DateTimeRange[1], 'Polymerlink', 'C3', '1');\n  };\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    console.log(response);\n    LogValue['LogC3'] = LogDataMappingTime(C3Model, DataSortTime(response));\n    console.log(LogValue['LogC3']);\n  };\n\n  const SetTimeRange = value => {\n    console.log(value);\n    const DateRange = SetDateRange(value);\n    console.log(DateRange); //UpdateTableData([], DateRange[0], DateRange[1], 'Polymerlink', 'C3', '1')\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      onChange: SetTimeRange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: TestGet,\n      children: \" test \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1Report, \"TOtJj3Zjk9A8N3grQNDDe2GZezA=\");\n\n_c = Line1Report;\nexport default Line1Report;\n\nvar _c;\n\n$RefreshReg$(_c, \"Line1Report\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1Report.jsx"],"names":["React","useState","useEffect","Button","Col","DatePicker","Divider","Row","logdata_request","DataSortTime","GetDateTime","LogDataMappingTime","SetDateRange","C3Model","LogValue","RangePicker","Line1Report","state","setState","count","TestGet","DateTimeRange","UpdateTableData","Parameter","StartTime","EndTime","Site","Line","Page","response","console","log","SetTimeRange","value","DateRange"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,UAAtB,EAAkCC,OAAlC,EAA2CC,GAA3C,QAAsD,MAAtD;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,kBAApC,EAAwDC,YAAxD,QAA4E,sCAA5E;AACA,SAASC,OAAT,QAAwB,6BAAxB;;AAEA,IAAIC,QAAQ,GAAG;AACX,WAAS,EADE;AAEX,WAAS;AAFE,CAAf;AAKA,MAAM;AAAEC,EAAAA;AAAF,IAAkBV,UAAxB;;AAEA,MAAMW,WAAW,GAAG,MAAM;AAAA;;AAEtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC;AAAEkB,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAlC;;AAEA,QAAMC,OAAO,GAAG,MAAM;AAClB,QAAIC,aAAa,GAAGX,WAAW,CAAC,CAAD,CAA/B;AACAY,IAAAA,eAAe,CAAC,EAAD,EAAKD,aAAa,CAAC,CAAD,CAAlB,EAAuBA,aAAa,CAAC,CAAD,CAApC,EAAyC,aAAzC,EAAwD,IAAxD,EAA8D,GAA9D,CAAf;AACH,GAHD;;AAMA,QAAMC,eAAe,GAAG,OAAOC,SAAP,EAAkBC,SAAlB,EAA6BC,OAA7B,EAAsCC,IAAtC,EAA4CC,IAA5C,EAAkDC,IAAlD,KAA2D;AAC/E,UAAMC,QAAQ,GAAG,MAAMrB,eAAe,CAACe,SAAD,EAAYC,SAAZ,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4CC,IAA5C,CAAtC;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAf,IAAAA,QAAQ,CAAC,OAAD,CAAR,GAAoBH,kBAAkB,CAACE,OAAD,EAAUJ,YAAY,CAACoB,QAAD,CAAtB,CAAtC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAQ,CAAC,OAAD,CAApB;AACH,GALD;;AAOA,QAAMkB,YAAY,GAAIC,KAAD,IAAU;AAC3BH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,UAAMC,SAAS,GAAGtB,YAAY,CAACqB,KAAD,CAA9B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYG,SAAZ,EAH2B,CAI3B;AACH,GALD;;AAQA,sBACI;AAAA,4BAEI,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAEF;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEZ,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAnCD;;GAAMJ,W;;KAAAA,W;AAqCN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Button, Col, DatePicker, Divider, Row } from 'antd'\r\nimport { logdata_request } from '../../api';\r\nimport { DataSortTime, GetDateTime, LogDataMappingTime, SetDateRange } from '../../DataRequest/LogDataRequestWrap';\r\nimport { C3Model } from '../../DataRequest/DataModel';\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n}\r\n\r\nconst { RangePicker } = DatePicker;\r\n\r\nconst Line1Report = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n\r\n    const TestGet = () => {\r\n        let DateTimeRange = GetDateTime(1)\r\n        UpdateTableData([], DateTimeRange[0], DateTimeRange[1], 'Polymerlink', 'C3', '1')\r\n    }\r\n\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        console.log(response);\r\n        LogValue['LogC3'] = LogDataMappingTime(C3Model, DataSortTime(response))\r\n        console.log(LogValue['LogC3']);\r\n    }\r\n\r\n    const SetTimeRange = (value) =>{\r\n        console.log(value);\r\n        const DateRange = SetDateRange(value)\r\n        console.log(DateRange);\r\n        //UpdateTableData([], DateRange[0], DateRange[1], 'Polymerlink', 'C3', '1')\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <DatePicker onChange={SetTimeRange} />\r\n\r\n            <Button onClick={TestGet}> test </Button>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Line1Report\r\n"]},"metadata":{},"sourceType":"module"}