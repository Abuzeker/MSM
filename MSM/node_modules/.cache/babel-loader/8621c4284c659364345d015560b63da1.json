{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ArgHandler = require(\"./ArgHandler\");\n\nvar addressConverter = require(\"./addressConverter\");\n/**\n * A range of cells.\n */\n\n\nvar Range = /*#__PURE__*/function () {\n  // /**\n  //  * Creates a new instance of Range.\n  //  * @param {Cell} startCell - The start cell.\n  //  * @param {Cell} endCell - The end cell.\n  //  */\n  function Range(startCell, endCell) {\n    _classCallCheck(this, Range);\n\n    this._startCell = startCell;\n    this._endCell = endCell;\n\n    this._findRangeExtent(startCell, endCell);\n  }\n  /**\n   * Get the address of the range.\n   * @param {{}} [opts] - Options\n   * @param {boolean} [opts.includeSheetName] - Include the sheet name in the address.\n   * @param {boolean} [opts.startRowAnchored] - Anchor the start row.\n   * @param {boolean} [opts.startColumnAnchored] - Anchor the start column.\n   * @param {boolean} [opts.endRowAnchored] - Anchor the end row.\n   * @param {boolean} [opts.endColumnAnchored] - Anchor the end column.\n   * @param {boolean} [opts.anchored] - Anchor all row and columns.\n   * @returns {string} The address.\n   */\n\n\n  _createClass(Range, [{\n    key: \"address\",\n    value: function address(opts) {\n      return addressConverter.toAddress({\n        type: 'range',\n        startRowNumber: this.startCell().rowNumber(),\n        startRowAnchored: opts && (opts.startRowAnchored || opts.anchored),\n        startColumnName: this.startCell().columnName(),\n        startColumnAnchored: opts && (opts.startColumnAnchored || opts.anchored),\n        endRowNumber: this.endCell().rowNumber(),\n        endRowAnchored: opts && (opts.endRowAnchored || opts.anchored),\n        endColumnName: this.endCell().columnName(),\n        endColumnAnchored: opts && (opts.endColumnAnchored || opts.anchored),\n        sheetName: opts && opts.includeSheetName && this.sheet().name()\n      });\n    }\n    /**\n     * Gets a cell within the range.\n     * @param {number} ri - Row index relative to the top-left corner of the range (0-based).\n     * @param {number} ci - Column index relative to the top-left corner of the range (0-based).\n     * @returns {Cell} The cell.\n     */\n\n  }, {\n    key: \"cell\",\n    value: function cell(ri, ci) {\n      return this.sheet().cell(this._minRowNumber + ri, this._minColumnNumber + ci);\n    }\n    /**\n     * Sets sheet autoFilter to this range.\n     * @returns {Range} This range.\n     */\n\n  }, {\n    key: \"autoFilter\",\n    value: function autoFilter() {\n      this.sheet().autoFilter(this);\n      return this;\n    }\n    /**\n     * Get the cells in the range as a 2D array.\n     * @returns {Array.<Array.<Cell>>} The cells.\n     */\n\n  }, {\n    key: \"cells\",\n    value: function cells() {\n      return this.map(function (cell) {\n        return cell;\n      });\n    }\n    /**\n     * Clear the contents of all the cells in the range.\n     * @returns {Range} The range.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.value(undefined);\n    }\n    /**\n     * Get the end cell of the range.\n     * @returns {Cell} The end cell.\n     */\n\n  }, {\n    key: \"endCell\",\n    value: function endCell() {\n      return this._endCell;\n    }\n    /**\n     * Callback used by forEach.\n     * @callback Range~forEachCallback\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {undefined}\n     */\n\n    /**\n     * Call a function for each cell in the range. Goes by row then column.\n     * @param {Range~forEachCallback} callback - Function called for each cell in the range.\n     * @returns {Range} The range.\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      for (var ri = 0; ri < this._numRows; ri++) {\n        for (var ci = 0; ci < this._numColumns; ci++) {\n          callback(this.cell(ri, ci), ri, ci, this);\n        }\n      }\n\n      return this;\n    }\n    /**\n     * Gets the shared formula in the start cell (assuming it's the source of the shared formula).\n     * @returns {string|undefined} The shared formula.\n     */\n\n    /**\n    * Sets the shared formula in the range. The formula will be translated for each cell.\n    * @param {string} formula - The formula to set.\n    * @returns {Range} The range.\n    */\n\n  }, {\n    key: \"formula\",\n    value: function formula() {\n      var _this = this;\n\n      return new ArgHandler(\"Range.formula\").case(function () {\n        return _this.startCell().getSharedRefFormula();\n      }).case('string', function (formula) {\n        var sharedFormulaId = _this.sheet().incrementMaxSharedFormulaId();\n\n        _this.forEach(function (cell, ri, ci) {\n          if (ri === 0 && ci === 0) {\n            cell.setSharedFormula(sharedFormulaId, formula, _this.address());\n          } else {\n            cell.setSharedFormula(sharedFormulaId);\n          }\n        });\n\n        return _this;\n      }).handle(arguments);\n    }\n    /**\n     * Callback used by map.\n     * @callback Range~mapCallback\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {*} The value to map to.\n     */\n\n    /**\n     * Creates a 2D array of values by running each cell through a callback.\n     * @param {Range~mapCallback} callback - Function called for each cell in the range.\n     * @returns {Array.<Array.<*>>} The 2D array of return values.\n     */\n\n  }, {\n    key: \"map\",\n    value: function map(callback) {\n      var _this2 = this;\n\n      var result = [];\n      this.forEach(function (cell, ri, ci) {\n        if (!result[ri]) result[ri] = [];\n        result[ri][ci] = callback(cell, ri, ci, _this2);\n      });\n      return result;\n    }\n    /**\n     * Gets a value indicating whether the cells in the range are merged.\n     * @returns {boolean} The value.\n     */\n\n    /**\n    * Sets a value indicating whether the cells in the range should be merged.\n    * @param {boolean} merged - True to merge, false to unmerge.\n    * @returns {Range} The range.\n    */\n\n  }, {\n    key: \"merged\",\n    value: function merged(_merged) {\n      var _this3 = this;\n\n      return new ArgHandler('Range.merged').case(function () {\n        return _this3.sheet().merged(_this3.address());\n      }).case('*', function (merged) {\n        _this3.sheet().merged(_this3.address(), merged);\n\n        return _this3;\n      }).handle(arguments);\n    }\n    /**\n     * Gets the data validation object attached to the Range.\n     * @returns {object|undefined} The data validation object or undefined if not set.\n     */\n\n    /**\n    * Set or clear the data validation object of the entire range.\n    * @param {object|undefined} dataValidation - Object or null to clear.\n    * @returns {Range} The range.\n    */\n\n  }, {\n    key: \"dataValidation\",\n    value: function dataValidation() {\n      var _this4 = this;\n\n      return new ArgHandler('Range.dataValidation').case(function () {\n        return _this4.sheet().dataValidation(_this4.address());\n      }).case('boolean', function (obj) {\n        return _this4.sheet().dataValidation(_this4.address(), obj);\n      }).case('*', function (obj) {\n        _this4.sheet().dataValidation(_this4.address(), obj);\n\n        return _this4;\n      }).handle(arguments);\n    }\n    /**\n     * Callback used by reduce.\n     * @callback Range~reduceCallback\n     * @param {*} accumulator - The accumulated value.\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {*} The value to map to.\n     */\n\n    /**\n     * Reduces the range to a single value accumulated from the result of a function called for each cell.\n     * @param {Range~reduceCallback} callback - Function called for each cell in the range.\n     * @param {*} [initialValue] - The initial value.\n     * @returns {*} The accumulated value.\n     */\n\n  }, {\n    key: \"reduce\",\n    value: function reduce(callback, initialValue) {\n      var _this5 = this;\n\n      var accumulator = initialValue;\n      this.forEach(function (cell, ri, ci) {\n        accumulator = callback(accumulator, cell, ri, ci, _this5);\n      });\n      return accumulator;\n    }\n    /**\n     * Gets the parent sheet of the range.\n     * @returns {Sheet} The parent sheet.\n     */\n\n  }, {\n    key: \"sheet\",\n    value: function sheet() {\n      return this.startCell().sheet();\n    }\n    /**\n     * Gets the start cell of the range.\n     * @returns {Cell} The start cell.\n     */\n\n  }, {\n    key: \"startCell\",\n    value: function startCell() {\n      return this._startCell;\n    }\n    /**\n     * Gets a single style for each cell.\n     * @param {string} name - The name of the style.\n     * @returns {Array.<Array.<*>>} 2D array of style values.\n     */\n\n    /**\n    * Gets multiple styles for each cell.\n    * @param {Array.<string>} names - The names of the styles.\n    * @returns {Object.<string, Array.<Array.<*>>>} Object whose keys are style names and values are 2D arrays of style values.\n    */\n\n    /**\n    * Set the style in each cell to the result of a function called for each.\n    * @param {string} name - The name of the style.\n    * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n    * @returns {Range} The range.\n    */\n\n    /**\n    * Sets the style in each cell to the corresponding value in the given 2D array of values.\n    * @param {string} name - The name of the style.\n    * @param {Array.<Array.<*>>} values - The style values to set.\n    * @returns {Range} The range.\n    */\n\n    /**\n    * Set the style of all cells in the range to a single style value.\n    * @param {string} name - The name of the style.\n    * @param {*} value - The value to set.\n    * @returns {Range} The range.\n    */\n\n    /**\n    * Set multiple styles for the cells in the range.\n    * @param {object.<string,Range~mapCallback|Array.<Array.<*>>|*>} styles - Object whose keys are style names and values are either function callbacks, 2D arrays of style values, or a single value for all the cells.\n    * @returns {Range} The range.\n    */\n\n    /**\n    * Sets to a specific style\n    * @param {Style} style - Style object given from stylesheet.createStyle\n    * @returns {Range} The range.\n    */\n\n  }, {\n    key: \"style\",\n    value: function style() {\n      var _this6 = this;\n\n      return new ArgHandler(\"Range.style\").case('string', function (name) {\n        // Get single value\n        return _this6.map(function (cell) {\n          return cell.style(name);\n        });\n      }).case('array', function (names) {\n        // Get list of values\n        var values = {};\n        names.forEach(function (name) {\n          values[name] = _this6.style(name);\n        });\n        return values;\n      }).case(['string', 'function'], function (name, callback) {\n        // Set a single value for the cells to the result of a function\n        return _this6.forEach(function (cell, ri, ci) {\n          cell.style(name, callback(cell, ri, ci, _this6));\n        });\n      }).case(['string', 'array'], function (name, values) {\n        // Set a single value for the cells using an array of matching dimension\n        return _this6.forEach(function (cell, ri, ci) {\n          if (values[ri] && values[ri][ci] !== undefined) {\n            cell.style(name, values[ri][ci]);\n          }\n        });\n      }).case(['string', '*'], function (name, value) {\n        // Set a single value for all cells to a single value\n        return _this6.forEach(function (cell) {\n          return cell.style(name, value);\n        });\n      }).case('object', function (nameValues) {\n        // Object of key value pairs to set\n        for (var name in nameValues) {\n          if (!nameValues.hasOwnProperty(name)) continue;\n          var value = nameValues[name];\n\n          _this6.style(name, value);\n        }\n\n        return _this6;\n      }).case('Style', function (style) {\n        _this6._style = style;\n        return _this6.forEach(function (cell) {\n          return cell.style(style);\n        });\n      }).handle(arguments);\n    }\n    /**\n     * Callback used by tap.\n     * @callback Range~tapCallback\n     * @param {Range} range - The range.\n     * @returns {undefined}\n     */\n\n    /**\n     * Invoke a callback on the range and return the range. Useful for method chaining.\n     * @param {Range~tapCallback} callback - The callback function.\n     * @returns {Range} The range.\n     */\n\n  }, {\n    key: \"tap\",\n    value: function tap(callback) {\n      callback(this);\n      return this;\n    }\n    /**\n     * Callback used by thru.\n     * @callback Range~thruCallback\n     * @param {Range} range - The range.\n     * @returns {*} The value to return from thru.\n     */\n\n    /**\n     * Invoke a callback on the range and return the value provided by the callback. Useful for method chaining.\n     * @param {Range~thruCallback} callback - The callback function.\n     * @returns {*} The return value of the callback.\n     */\n\n  }, {\n    key: \"thru\",\n    value: function thru(callback) {\n      return callback(this);\n    }\n    /**\n     * Get the values of each cell in the range as a 2D array.\n     * @returns {Array.<Array.<*>>} The values.\n     */\n\n    /**\n    * Set the values in each cell to the result of a function called for each.\n    * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n    * @returns {Range} The range.\n    */\n\n    /**\n    * Sets the value in each cell to the corresponding value in the given 2D array of values.\n    * @param {Array.<Array.<*>>} values - The values to set.\n    * @returns {Range} The range.\n    */\n\n    /**\n    * Set the value of all cells in the range to a single value.\n    * @param {*} value - The value to set.\n    * @returns {Range} The range.\n    */\n\n  }, {\n    key: \"value\",\n    value: function value() {\n      var _this7 = this;\n\n      return new ArgHandler(\"Range.value\").case(function () {\n        // Get values\n        return _this7.map(function (cell) {\n          return cell.value();\n        });\n      }).case('function', function (callback) {\n        // Set a value for the cells to the result of a function\n        return _this7.forEach(function (cell, ri, ci) {\n          cell.value(callback(cell, ri, ci, _this7));\n        });\n      }).case('array', function (values) {\n        // Set value for the cells using an array of matching dimension\n        return _this7.forEach(function (cell, ri, ci) {\n          if (values[ri] && values[ri][ci] !== undefined) {\n            cell.value(values[ri][ci]);\n          }\n        });\n      }).case('*', function (value) {\n        // Set the value for all cells to a single value\n        return _this7.forEach(function (cell) {\n          return cell.value(value);\n        });\n      }).handle(arguments);\n    }\n    /**\n     * Gets the parent workbook.\n     * @returns {Workbook} The parent workbook.\n     */\n\n  }, {\n    key: \"workbook\",\n    value: function workbook() {\n      return this.sheet().workbook();\n    }\n    /**\n     * Find the extent of the range.\n     * @returns {undefined}\n     * @private\n     */\n\n  }, {\n    key: \"_findRangeExtent\",\n    value: function _findRangeExtent() {\n      this._minRowNumber = Math.min(this._startCell.rowNumber(), this._endCell.rowNumber());\n      this._maxRowNumber = Math.max(this._startCell.rowNumber(), this._endCell.rowNumber());\n      this._minColumnNumber = Math.min(this._startCell.columnNumber(), this._endCell.columnNumber());\n      this._maxColumnNumber = Math.max(this._startCell.columnNumber(), this._endCell.columnNumber());\n      this._numRows = this._maxRowNumber - this._minRowNumber + 1;\n      this._numColumns = this._maxColumnNumber - this._minColumnNumber + 1;\n    }\n  }]);\n\n  return Range;\n}();\n\nmodule.exports = Range;","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/xlsx-populate/lib/Range.js"],"names":["ArgHandler","require","addressConverter","Range","startCell","endCell","_startCell","_endCell","_findRangeExtent","opts","toAddress","type","startRowNumber","rowNumber","startRowAnchored","anchored","startColumnName","columnName","startColumnAnchored","endRowNumber","endRowAnchored","endColumnName","endColumnAnchored","sheetName","includeSheetName","sheet","name","ri","ci","cell","_minRowNumber","_minColumnNumber","autoFilter","map","value","undefined","callback","_numRows","_numColumns","case","getSharedRefFormula","formula","sharedFormulaId","incrementMaxSharedFormulaId","forEach","setSharedFormula","address","handle","arguments","result","merged","dataValidation","obj","initialValue","accumulator","style","names","values","nameValues","hasOwnProperty","_style","workbook","Math","min","_maxRowNumber","max","columnNumber","_maxColumnNumber","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst addressConverter = require(\"./addressConverter\");\n\n/**\n * A range of cells.\n */\nclass Range {\n    // /**\n    //  * Creates a new instance of Range.\n    //  * @param {Cell} startCell - The start cell.\n    //  * @param {Cell} endCell - The end cell.\n    //  */\n    constructor(startCell, endCell) {\n        this._startCell = startCell;\n        this._endCell = endCell;\n        this._findRangeExtent(startCell, endCell);\n    }\n\n    /**\n     * Get the address of the range.\n     * @param {{}} [opts] - Options\n     * @param {boolean} [opts.includeSheetName] - Include the sheet name in the address.\n     * @param {boolean} [opts.startRowAnchored] - Anchor the start row.\n     * @param {boolean} [opts.startColumnAnchored] - Anchor the start column.\n     * @param {boolean} [opts.endRowAnchored] - Anchor the end row.\n     * @param {boolean} [opts.endColumnAnchored] - Anchor the end column.\n     * @param {boolean} [opts.anchored] - Anchor all row and columns.\n     * @returns {string} The address.\n     */\n    address(opts) {\n        return addressConverter.toAddress({\n            type: 'range',\n            startRowNumber: this.startCell().rowNumber(),\n            startRowAnchored: opts && (opts.startRowAnchored || opts.anchored),\n            startColumnName: this.startCell().columnName(),\n            startColumnAnchored: opts && (opts.startColumnAnchored || opts.anchored),\n            endRowNumber: this.endCell().rowNumber(),\n            endRowAnchored: opts && (opts.endRowAnchored || opts.anchored),\n            endColumnName: this.endCell().columnName(),\n            endColumnAnchored: opts && (opts.endColumnAnchored || opts.anchored),\n            sheetName: opts && opts.includeSheetName && this.sheet().name()\n        });\n    }\n\n    /**\n     * Gets a cell within the range.\n     * @param {number} ri - Row index relative to the top-left corner of the range (0-based).\n     * @param {number} ci - Column index relative to the top-left corner of the range (0-based).\n     * @returns {Cell} The cell.\n     */\n    cell(ri, ci) {\n        return this.sheet().cell(this._minRowNumber + ri, this._minColumnNumber + ci);\n    }\n\n    /**\n     * Sets sheet autoFilter to this range.\n     * @returns {Range} This range.\n     */\n    autoFilter() {\n        this.sheet().autoFilter(this);\n\n        return this;\n    }\n\n    /**\n     * Get the cells in the range as a 2D array.\n     * @returns {Array.<Array.<Cell>>} The cells.\n     */\n    cells() {\n        return this.map(cell => cell);\n    }\n\n    /**\n     * Clear the contents of all the cells in the range.\n     * @returns {Range} The range.\n     */\n    clear() {\n        return this.value(undefined);\n    }\n\n    /**\n     * Get the end cell of the range.\n     * @returns {Cell} The end cell.\n     */\n    endCell() {\n        return this._endCell;\n    }\n\n    /**\n     * Callback used by forEach.\n     * @callback Range~forEachCallback\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {undefined}\n     */\n    /**\n     * Call a function for each cell in the range. Goes by row then column.\n     * @param {Range~forEachCallback} callback - Function called for each cell in the range.\n     * @returns {Range} The range.\n     */\n    forEach(callback) {\n        for (let ri = 0; ri < this._numRows; ri++) {\n            for (let ci = 0; ci < this._numColumns; ci++) {\n                callback(this.cell(ri, ci), ri, ci, this);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Gets the shared formula in the start cell (assuming it's the source of the shared formula).\n     * @returns {string|undefined} The shared formula.\n     *//**\n     * Sets the shared formula in the range. The formula will be translated for each cell.\n     * @param {string} formula - The formula to set.\n     * @returns {Range} The range.\n     */\n    formula() {\n        return new ArgHandler(\"Range.formula\")\n            .case(() => {\n                return this.startCell().getSharedRefFormula();\n            })\n            .case('string', formula => {\n                const sharedFormulaId = this.sheet().incrementMaxSharedFormulaId();\n                this.forEach((cell, ri, ci) => {\n                    if (ri === 0 && ci === 0) {\n                        cell.setSharedFormula(sharedFormulaId, formula, this.address());\n                    } else {\n                        cell.setSharedFormula(sharedFormulaId);\n                    }\n                });\n\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Callback used by map.\n     * @callback Range~mapCallback\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {*} The value to map to.\n     */\n    /**\n     * Creates a 2D array of values by running each cell through a callback.\n     * @param {Range~mapCallback} callback - Function called for each cell in the range.\n     * @returns {Array.<Array.<*>>} The 2D array of return values.\n     */\n    map(callback) {\n        const result = [];\n        this.forEach((cell, ri, ci) => {\n            if (!result[ri]) result[ri] = [];\n            result[ri][ci] = callback(cell, ri, ci, this);\n        });\n\n        return result;\n    }\n\n    /**\n     * Gets a value indicating whether the cells in the range are merged.\n     * @returns {boolean} The value.\n     *//**\n     * Sets a value indicating whether the cells in the range should be merged.\n     * @param {boolean} merged - True to merge, false to unmerge.\n     * @returns {Range} The range.\n     */\n    merged(merged) {\n        return new ArgHandler('Range.merged')\n            .case(() => {\n                return this.sheet().merged(this.address());\n            })\n            .case('*', merged => {\n                this.sheet().merged(this.address(), merged);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the data validation object attached to the Range.\n     * @returns {object|undefined} The data validation object or undefined if not set.\n     *//**\n     * Set or clear the data validation object of the entire range.\n     * @param {object|undefined} dataValidation - Object or null to clear.\n     * @returns {Range} The range.\n     */\n    dataValidation() {\n        return new ArgHandler('Range.dataValidation')\n            .case(() => {\n                return this.sheet().dataValidation(this.address());\n            })\n            .case('boolean', obj => {\n                return this.sheet().dataValidation(this.address(), obj);\n            })\n            .case('*', obj => {\n                this.sheet().dataValidation(this.address(), obj);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Callback used by reduce.\n     * @callback Range~reduceCallback\n     * @param {*} accumulator - The accumulated value.\n     * @param {Cell} cell - The cell.\n     * @param {number} ri - The relative row index.\n     * @param {number} ci - The relative column index.\n     * @param {Range} range - The range.\n     * @returns {*} The value to map to.\n     */\n    /**\n     * Reduces the range to a single value accumulated from the result of a function called for each cell.\n     * @param {Range~reduceCallback} callback - Function called for each cell in the range.\n     * @param {*} [initialValue] - The initial value.\n     * @returns {*} The accumulated value.\n     */\n    reduce(callback, initialValue) {\n        let accumulator = initialValue;\n        this.forEach((cell, ri, ci) => {\n            accumulator = callback(accumulator, cell, ri, ci, this);\n        });\n\n        return accumulator;\n    }\n\n    /**\n     * Gets the parent sheet of the range.\n     * @returns {Sheet} The parent sheet.\n     */\n    sheet() {\n        return this.startCell().sheet();\n    }\n\n    /**\n     * Gets the start cell of the range.\n     * @returns {Cell} The start cell.\n     */\n    startCell() {\n        return this._startCell;\n    }\n\n    /**\n     * Gets a single style for each cell.\n     * @param {string} name - The name of the style.\n     * @returns {Array.<Array.<*>>} 2D array of style values.\n     *//**\n     * Gets multiple styles for each cell.\n     * @param {Array.<string>} names - The names of the styles.\n     * @returns {Object.<string, Array.<Array.<*>>>} Object whose keys are style names and values are 2D arrays of style values.\n     *//**\n     * Set the style in each cell to the result of a function called for each.\n     * @param {string} name - The name of the style.\n     * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n     * @returns {Range} The range.\n     *//**\n     * Sets the style in each cell to the corresponding value in the given 2D array of values.\n     * @param {string} name - The name of the style.\n     * @param {Array.<Array.<*>>} values - The style values to set.\n     * @returns {Range} The range.\n     *//**\n     * Set the style of all cells in the range to a single style value.\n     * @param {string} name - The name of the style.\n     * @param {*} value - The value to set.\n     * @returns {Range} The range.\n     *//**\n     * Set multiple styles for the cells in the range.\n     * @param {object.<string,Range~mapCallback|Array.<Array.<*>>|*>} styles - Object whose keys are style names and values are either function callbacks, 2D arrays of style values, or a single value for all the cells.\n     * @returns {Range} The range.\n     *//**\n\t * Sets to a specific style\n\t * @param {Style} style - Style object given from stylesheet.createStyle\n\t * @returns {Range} The range.\n\t */\n    style() {\n        return new ArgHandler(\"Range.style\")\n            .case('string', name => {\n                // Get single value\n                return this.map(cell => cell.style(name));\n            })\n            .case('array', names => {\n                // Get list of values\n                const values = {};\n                names.forEach(name => {\n                    values[name] = this.style(name);\n                });\n\n                return values;\n            })\n            .case(['string', 'function'], (name, callback) => {\n                // Set a single value for the cells to the result of a function\n                return this.forEach((cell, ri, ci) => {\n                    cell.style(name, callback(cell, ri, ci, this));\n                });\n            })\n            .case(['string', 'array'], (name, values) => {\n                // Set a single value for the cells using an array of matching dimension\n                return this.forEach((cell, ri, ci) => {\n                    if (values[ri] && values[ri][ci] !== undefined) {\n                        cell.style(name, values[ri][ci]);\n                    }\n                });\n            })\n            .case(['string', '*'], (name, value) => {\n                // Set a single value for all cells to a single value\n                return this.forEach(cell => cell.style(name, value));\n            })\n            .case('object', nameValues => {\n                // Object of key value pairs to set\n                for (const name in nameValues) {\n                    if (!nameValues.hasOwnProperty(name)) continue;\n                    const value = nameValues[name];\n                    this.style(name, value);\n                }\n\n                return this;\n            })\n            .case('Style', style => {\n                this._style = style;\n                return this.forEach(cell => cell.style(style));\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Callback used by tap.\n     * @callback Range~tapCallback\n     * @param {Range} range - The range.\n     * @returns {undefined}\n     */\n    /**\n     * Invoke a callback on the range and return the range. Useful for method chaining.\n     * @param {Range~tapCallback} callback - The callback function.\n     * @returns {Range} The range.\n     */\n    tap(callback) {\n        callback(this);\n        return this;\n    }\n\n    /**\n     * Callback used by thru.\n     * @callback Range~thruCallback\n     * @param {Range} range - The range.\n     * @returns {*} The value to return from thru.\n     */\n    /**\n     * Invoke a callback on the range and return the value provided by the callback. Useful for method chaining.\n     * @param {Range~thruCallback} callback - The callback function.\n     * @returns {*} The return value of the callback.\n     */\n    thru(callback) {\n        return callback(this);\n    }\n\n    /**\n     * Get the values of each cell in the range as a 2D array.\n     * @returns {Array.<Array.<*>>} The values.\n     *//**\n     * Set the values in each cell to the result of a function called for each.\n     * @param {Range~mapCallback} callback - The callback to provide value for the cell.\n     * @returns {Range} The range.\n     *//**\n     * Sets the value in each cell to the corresponding value in the given 2D array of values.\n     * @param {Array.<Array.<*>>} values - The values to set.\n     * @returns {Range} The range.\n     *//**\n     * Set the value of all cells in the range to a single value.\n     * @param {*} value - The value to set.\n     * @returns {Range} The range.\n     */\n    value() {\n        return new ArgHandler(\"Range.value\")\n            .case(() => {\n                // Get values\n                return this.map(cell => cell.value());\n            })\n            .case('function', callback => {\n                // Set a value for the cells to the result of a function\n                return this.forEach((cell, ri, ci) => {\n                    cell.value(callback(cell, ri, ci, this));\n                });\n            })\n            .case('array', values => {\n                // Set value for the cells using an array of matching dimension\n                return this.forEach((cell, ri, ci) => {\n                    if (values[ri] && values[ri][ci] !== undefined) {\n                        cell.value(values[ri][ci]);\n                    }\n                });\n            })\n            .case('*', value => {\n                // Set the value for all cells to a single value\n                return this.forEach(cell => cell.value(value));\n            })\n            .handle(arguments);\n    }\n\n    /**\n     * Gets the parent workbook.\n     * @returns {Workbook} The parent workbook.\n     */\n    workbook() {\n        return this.sheet().workbook();\n    }\n\n    /**\n     * Find the extent of the range.\n     * @returns {undefined}\n     * @private\n     */\n    _findRangeExtent() {\n        this._minRowNumber = Math.min(this._startCell.rowNumber(), this._endCell.rowNumber());\n        this._maxRowNumber = Math.max(this._startCell.rowNumber(), this._endCell.rowNumber());\n        this._minColumnNumber = Math.min(this._startCell.columnNumber(), this._endCell.columnNumber());\n        this._maxColumnNumber = Math.max(this._startCell.columnNumber(), this._endCell.columnNumber());\n        this._numRows = this._maxRowNumber - this._minRowNumber + 1;\n        this._numColumns = this._maxColumnNumber - this._minColumnNumber + 1;\n    }\n}\n\nmodule.exports = Range;\n"]},"metadata":{},"sourceType":"script"}