{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tzika\\\\Desktop\\\\Polymerlink-Front\\\\polymerlink-2\\\\src\\\\pages\\\\Line1\\\\Line1ReportC3.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { DeleteJob, logdata_request, ReadJob, WriteJob } from '../../api';\nimport { DataSortTime, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob, SortToArrayExcel, ExportExcelWorkBook, FilterByName, FilterOutExcessTime, TimeInterval, GetDateTime, TableColumbJobtest, DataSortTimeMcG } from '../../DataRequest/LogDataRequestWrap';\nimport { C3Model, C3ModelMap, G2Model, JobModel, McGuire } from '../../DataRequest/DataModel';\nimport NameTableWrapper from '../Report/NameTableWrapper';\nimport ReportWrapper from '../Report/ReportWrapper';\nimport { Button, message, Card } from 'antd';\nimport ReportListWrapper from '../Report/ReportListWrapper';\nimport moment from 'moment';\nimport { Area } from '@antv/g2plot';\nimport ReportGraph from '../Report/ReportGraph';\nimport EditReportForm from '../Report/EditReportForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet line;\nlet LogValue = {\n  \"LogC3\": [],\n  \"LogG2\": [],\n  \"TimingData\": []\n};\nlet ReportList = {\n  \"C3ReportList\": [],\n  \"G2ReportList\": []\n};\nlet JobDetailRecord = {\n  datetimeStart: '',\n  datetimeEnd: '',\n  site: '',\n  line: '',\n  BufferName: ''\n};\nlet ReportAnalysis = {\n  TotalPeriod: '',\n  RunPeriod: '',\n  ExpectedRate: '',\n  ActualRate: '',\n  ExpectedProduct: '',\n  ActualProduct: '',\n  EffectiveTime: '',\n  RateEfficiency: '',\n  Effciency: ''\n};\nlet Cell = [\"A2\", \"E2\", \"I2\", \"K2\", \"O2\"];\nlet EditJobData = {};\nlet TotalJobDuration;\nlet ReportInfoC3 = {};\nlet BlankPage = 1;\nconst ColumbC3 = TableColumbLabelAsRow(C3ModelMap);\n_c = ColumbC3;\n\nconst Line1Report = () => {\n  _s();\n\n  const [state, setState] = useState({\n    count: 0\n  });\n  const [Edit, setEdit] = useState(false);\n  useEffect(() => {\n    let period = GetDateTime(14, 14);\n    RequestJob([], period[0], period[1], 'PolymerLink', 'C3', 'C3ReportList');\n    return () => {};\n  }, []);\n\n  const EditJobSheet = RowData => {\n    setEdit(true);\n    EditJobData = RowData;\n    console.log(EditJobData);\n  };\n\n  const CloseEditJobSheet = () => {\n    setEdit(false); // console.log(RowData);\n  };\n\n  const JobDeleteHandler = async (jobnumber, line, page) => {\n    const response = await DeleteJob(jobnumber['Job No'], line, page);\n\n    if (response.success === true) {\n      message.success(`Job ${jobnumber['Job No']} Deleted`);\n      RequestJob([], JobDetailRecord.datetimeStart, JobDetailRecord.datetimeEnd, JobDetailRecord.site, JobDetailRecord.line, JobDetailRecord.BufferName);\n    } else {\n      message.error(`Unable to Delete Job ${jobnumber['Job No']}`);\n    }\n  };\n\n  const DataRequestC3 = row => {\n    let TimeRange = [];\n    TimeRange[0] = moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    TimeRange[1] = moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\";\n    ReportInfoC3.Info1 = row['Job No'];\n    ReportInfoC3.Info2 = row['Start Time'];\n    ReportInfoC3.Info3 = row['End Time'];\n    ReportInfoC3.Info4 = row['Color'];\n    ReportInfoC3.Info5 = row['Grade'];\n    ReportInfoC3.Info6 = row['Actual Product'];\n    ReportInfoC3.Info7 = row['Estimated Rate'];\n    UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'C3', BlankPage, 'LogC3', C3ModelMap);\n  };\n\n  const ColumbJobC3 = TableColumbJobtest(JobModel, DataRequestC3, JobDeleteHandler, EditJobSheet, 'C3', BlankPage, 'View', 'Delete', 'Edit');\n\n  const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\n    const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page);\n    let data = DataSortTime(response);\n    let Runtime,\n        RuntimeCounter = 0;\n    LogValue[BufferName] = LogDataMappingName(Model, data);\n    let FeederState = FilterByName('Feeder Speed', LogValue[BufferName]);\n    LogValue['TimingData'] = FeederState;\n    FeederState.forEach(element => {\n      if (element.State === 1) {\n        RuntimeCounter++;\n      }\n    });\n    let SecondRuntime = RuntimeCounter * 600;\n    let DayRuntime = parseInt(SecondRuntime / 86400);\n    let HourRuntime = parseInt(SecondRuntime / 3600) - DayRuntime * 24;\n    let MinutesRuntime = parseInt(SecondRuntime / 60) - DayRuntime * 1440 - HourRuntime * 60;\n    LogValue[BufferName] = FilterOutExcessTime(LogValue[BufferName]);\n    let duration = TimeInterval(ReportInfoC3.Info2, ReportInfoC3.Info3);\n    TotalJobDuration = duration;\n    let TotalPeriodSecond = TotalJobDuration.Day * 86400 + TotalJobDuration.Hours * 3600 + TotalJobDuration.Minutes * 60;\n    ReportAnalysis.TotalPeriod = `${TotalJobDuration.Day} Days ${TotalJobDuration.Hours} Hours  ${TotalJobDuration.Minutes} Minutes`;\n    ReportAnalysis.RunPeriod = `${DayRuntime} Days ${HourRuntime} Hours  ${MinutesRuntime} Minutes`;\n    ReportAnalysis.ActualProduct = ReportInfoC3.Info6;\n    ReportAnalysis.ExpectedRate = ReportInfoC3.Info7;\n    ReportAnalysis.ActualRate = (ReportAnalysis.ActualProduct / (TotalJobDuration.Day * 24 + TotalJobDuration.Hours + TotalJobDuration.Minutes / 60)).toFixed(2);\n    ReportAnalysis.ExpectedProduct = ReportAnalysis.ExpectedRate * (TotalJobDuration.Day * 24 + TotalJobDuration.Hours + TotalJobDuration.Minutes / 60);\n    ReportAnalysis.EffectiveTime = (SecondRuntime / TotalPeriodSecond * 100).toFixed(2);\n    ReportAnalysis.RateEfficiency = (ReportAnalysis.ActualRate / ReportAnalysis.ExpectedRate * 100).toFixed(2);\n    ReportAnalysis.Effciency = (ReportAnalysis.ActualProduct / ReportAnalysis.ExpectedProduct * 100).toFixed(2);\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  const AvgAppend = data => {\n    let ComAvg;\n    const type = ['FINAL_DISP_TOTAL'];\n    let ComTotal = 0,\n        totalnumber,\n        i = 0;\n    let buf = Object.keys(data);\n    console.log(data);\n    type.forEach(element => {\n      data.forEach(element2 => {\n        console.log(element2[element]);\n\n        if (element2[element] !== undefined) {\n          let NumberBuf = parseFloat(element2[element]);\n          ComTotal = NumberBuf + ComTotal;\n        }\n      });\n      ComAvg = parseFloat(ComTotal / 1000).toFixed(2);\n      ComTotal = 0;\n      i++;\n    });\n    console.log(ComAvg);\n    return ComAvg;\n  };\n\n  const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\n    // console.log(info)\n    // console.log(datetimeStart);\n    // console.log(datetimeEnd);\n    const response2 = await logdata_request(['FINAL_DISP_TOTAL'], datetimeStart, datetimeEnd, 'PolymerLink', 'Maguire C3', '1');\n    console.log(response2);\n    let data = LogDataMappingName(McGuire, DataSortTimeMcG(response2));\n    let AvgTotal = AvgAppend(data);\n    info.info5 = AvgTotal;\n    console.log(AvgTotal);\n    const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line);\n\n    if (response.success === true) {\n      message.success('Create Success !');\n      let period = GetDateTime(14, 14);\n      RequestJob([], period[0], period[1], 'PolymerLink', 'C3', 'C3ReportList');\n    } // CloseEditJobSheet()\n\n  };\n\n  const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\n    JobDetailRecord.datetimeStart = datetimeStart;\n    JobDetailRecord.datetimeEnd = datetimeEnd;\n    JobDetailRecord.site = site;\n    JobDetailRecord.line = line;\n    JobDetailRecord.BufferName = BufferName;\n    const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line);\n    let data = ReportSort(response);\n    ReportList[BufferName] = data;\n    console.log(data);\n    setState(({\n      count\n    }) => ({\n      count: count + 1\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ReportWrapper, {\n      CreateJobCallBack: CreateJob,\n      site: 'Polymerlink',\n      line: 'C3'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportListWrapper, {\n      ReportListCallBack: RequestJob,\n      site: 'Polymerlink',\n      line: 'C3',\n      ReportList: ReportList['C3ReportList'],\n      Columb: ColumbJobC3,\n      BufferName: \"C3ReportList\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NameTableWrapper, {\n      SetTimeRangeCallBack: UpdateTableData,\n      LogValue: LogValue['LogC3'],\n      Columb: ColumbC3,\n      site: 'C3',\n      page: '1',\n      BufferName: \"LogC3\",\n      Model: C3ModelMap,\n      JobInfo: ReportInfoC3,\n      FileName: 'ExtruderSheet.xlsx',\n      startingColumb: 'A',\n      startingRow: 7,\n      EndingColumb: 'R',\n      EndingRow: 7,\n      Cell: Cell\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReportGraph, {\n      ReportAnalysis: ReportAnalysis,\n      RunningStep: LogValue['TimingData']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EditReportForm, {\n      Visibility: Edit,\n      callbackClose: CloseEditJobSheet,\n      InfoData: EditJobData,\n      CreateJobCallBack: CreateJob,\n      site: 'Polymerlink',\n      line: 'C3'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Line1Report, \"J0Zs4IOUrZKvM7zUeIbnj40FOcU=\");\n\n_c2 = Line1Report;\nexport default Line1Report;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ColumbC3\");\n$RefreshReg$(_c2, \"Line1Report\");","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/src/pages/Line1/Line1ReportC3.jsx"],"names":["React","useState","useEffect","DeleteJob","logdata_request","ReadJob","WriteJob","DataSortTime","TableColumbLabelAsRow","LogDataMappingName","ReportSort","TableColumbJob","SortToArrayExcel","ExportExcelWorkBook","FilterByName","FilterOutExcessTime","TimeInterval","GetDateTime","TableColumbJobtest","DataSortTimeMcG","C3Model","C3ModelMap","G2Model","JobModel","McGuire","NameTableWrapper","ReportWrapper","Button","message","Card","ReportListWrapper","moment","Area","ReportGraph","EditReportForm","line","LogValue","ReportList","JobDetailRecord","datetimeStart","datetimeEnd","site","BufferName","ReportAnalysis","TotalPeriod","RunPeriod","ExpectedRate","ActualRate","ExpectedProduct","ActualProduct","EffectiveTime","RateEfficiency","Effciency","Cell","EditJobData","TotalJobDuration","ReportInfoC3","BlankPage","ColumbC3","Line1Report","state","setState","count","Edit","setEdit","period","RequestJob","EditJobSheet","RowData","console","log","CloseEditJobSheet","JobDeleteHandler","jobnumber","page","response","success","error","DataRequestC3","row","TimeRange","toISOString","split","Info1","Info2","Info3","Info4","Info5","Info6","Info7","UpdateTableData","ColumbJobC3","Parameter","StartTime","EndTime","Site","Line","Page","Model","data","Runtime","RuntimeCounter","FeederState","forEach","element","State","SecondRuntime","DayRuntime","parseInt","HourRuntime","MinutesRuntime","duration","TotalPeriodSecond","Day","Hours","Minutes","toFixed","AvgAppend","ComAvg","type","ComTotal","totalnumber","i","buf","Object","keys","element2","undefined","NumberBuf","parseFloat","CreateJob","info","response2","AvgTotal","info5"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { DeleteJob, logdata_request, ReadJob, WriteJob } from '../../api';\r\nimport { DataSortTime, TableColumbLabelAsRow, LogDataMappingName, ReportSort, TableColumbJob, SortToArrayExcel, ExportExcelWorkBook, FilterByName, FilterOutExcessTime, TimeInterval, GetDateTime, TableColumbJobtest, DataSortTimeMcG } from '../../DataRequest/LogDataRequestWrap';\r\nimport { C3Model, C3ModelMap, G2Model, JobModel, McGuire } from '../../DataRequest/DataModel';\r\nimport NameTableWrapper from '../Report/NameTableWrapper';\r\nimport ReportWrapper from '../Report/ReportWrapper';\r\nimport { Button, message, Card } from 'antd';\r\nimport ReportListWrapper from '../Report/ReportListWrapper';\r\nimport moment from 'moment';\r\nimport { Area } from '@antv/g2plot';\r\nimport ReportGraph from '../Report/ReportGraph';\r\nimport EditReportForm from '../Report/EditReportForm';\r\nlet line\r\n\r\nlet LogValue = {\r\n    \"LogC3\": [],\r\n    \"LogG2\": [],\r\n    \"TimingData\": [],\r\n\r\n}\r\n\r\nlet ReportList = {\r\n    \"C3ReportList\": [],\r\n    \"G2ReportList\": []\r\n}\r\n\r\nlet JobDetailRecord = {\r\n    datetimeStart: '',\r\n    datetimeEnd: '',\r\n    site: '',\r\n    line: '',\r\n    BufferName: ''\r\n}\r\n\r\nlet ReportAnalysis = {\r\n    TotalPeriod: '',\r\n    RunPeriod: '',\r\n    ExpectedRate: '',\r\n    ActualRate: '',\r\n    ExpectedProduct: '',\r\n    ActualProduct: '',\r\n    EffectiveTime:'',\r\n    RateEfficiency:'',\r\n    Effciency:''\r\n}\r\n\r\nlet Cell = [\"A2\", \"E2\", \"I2\", \"K2\", \"O2\"]\r\n\r\nlet EditJobData = {}\r\nlet TotalJobDuration\r\nlet ReportInfoC3 = {}\r\n\r\n\r\nlet BlankPage = 1\r\n\r\nconst ColumbC3 = TableColumbLabelAsRow(C3ModelMap)\r\n\r\nconst Line1Report = () => {\r\n\r\n    const [state, setState] = useState({ count: 0 });\r\n    const [Edit, setEdit] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        let period = GetDateTime(14, 14)\r\n        RequestJob([], period[0], period[1], 'PolymerLink', 'C3', 'C3ReportList')\r\n        return () => {\r\n        }\r\n    }, [])\r\n\r\n    const EditJobSheet = (RowData) => {\r\n        setEdit(true);\r\n        EditJobData = RowData\r\n        console.log(EditJobData);\r\n    }\r\n\r\n    const CloseEditJobSheet = () => {\r\n        setEdit(false);\r\n        // console.log(RowData);\r\n    }\r\n\r\n\r\n    const JobDeleteHandler = async (jobnumber, line, page) => {\r\n        const response = await DeleteJob(jobnumber['Job No'], line, page)\r\n\r\n        if (response.success === true) {\r\n            message.success(`Job ${jobnumber['Job No']} Deleted`)\r\n            RequestJob([], JobDetailRecord.datetimeStart, JobDetailRecord.datetimeEnd,\r\n                JobDetailRecord.site, JobDetailRecord.line, JobDetailRecord.BufferName)\r\n        }\r\n        else {\r\n            message.error(`Unable to Delete Job ${jobnumber['Job No']}`)\r\n        }\r\n    }\r\n\r\n    const DataRequestC3 = (row) => {\r\n\r\n        let TimeRange = []\r\n\r\n        TimeRange[0] = (moment(row['Start Time'], \"DD-MM-YYYY HH:mm:ss\").toISOString(false).split('.')[0] + \"Z\")\r\n        TimeRange[1] = (moment(row['End Time'], \"DD-MM-YYYY HH:mm:ss\")).toISOString(false).split('.')[0] + \"Z\"\r\n\r\n        ReportInfoC3.Info1 = row['Job No']\r\n        ReportInfoC3.Info2 = row['Start Time']\r\n        ReportInfoC3.Info3 = row['End Time']\r\n        ReportInfoC3.Info4 = row['Color']\r\n        ReportInfoC3.Info5 = row['Grade']\r\n        ReportInfoC3.Info6 = row['Actual Product']\r\n        ReportInfoC3.Info7 = row['Estimated Rate']\r\n\r\n        UpdateTableData([], TimeRange[0], TimeRange[1], 'Polymerlink', 'C3', BlankPage, 'LogC3', C3ModelMap)\r\n\r\n    }\r\n\r\n    const ColumbJobC3 = TableColumbJobtest(JobModel, DataRequestC3, JobDeleteHandler, EditJobSheet, 'C3', BlankPage, 'View', 'Delete', 'Edit')\r\n\r\n    const UpdateTableData = async (Parameter, StartTime, EndTime, Site, Line, Page, BufferName, Model) => {\r\n        const response = await logdata_request(Parameter, StartTime, EndTime, Site, Line, Page)\r\n        let data = DataSortTime(response)\r\n        let Runtime, RuntimeCounter = 0\r\n\r\n        LogValue[BufferName] = LogDataMappingName(Model, data)\r\n        let FeederState = FilterByName('Feeder Speed', LogValue[BufferName])\r\n\r\n        LogValue['TimingData'] = FeederState\r\n\r\n        FeederState.forEach(element => {\r\n            if (element.State === 1) {\r\n                RuntimeCounter++\r\n            }\r\n        });\r\n\r\n        let SecondRuntime = RuntimeCounter * 600\r\n        let DayRuntime = parseInt(SecondRuntime / 86400)\r\n        let HourRuntime = (parseInt(SecondRuntime / 3600) - DayRuntime * 24)\r\n        let MinutesRuntime = (parseInt(SecondRuntime / 60) - DayRuntime * 1440 - HourRuntime * 60)\r\n\r\n        LogValue[BufferName] = FilterOutExcessTime(LogValue[BufferName])\r\n        let duration = TimeInterval(ReportInfoC3.Info2, ReportInfoC3.Info3)\r\n        TotalJobDuration = duration\r\n        let TotalPeriodSecond =  TotalJobDuration.Day*86400 + TotalJobDuration.Hours*3600 + TotalJobDuration.Minutes*60\r\n\r\n        ReportAnalysis.TotalPeriod = `${TotalJobDuration.Day} Days ${TotalJobDuration.Hours} Hours  ${TotalJobDuration.Minutes} Minutes`\r\n        ReportAnalysis.RunPeriod = `${DayRuntime} Days ${HourRuntime} Hours  ${MinutesRuntime} Minutes`\r\n        ReportAnalysis.ActualProduct = ReportInfoC3.Info6\r\n        ReportAnalysis.ExpectedRate = ReportInfoC3.Info7\r\n        ReportAnalysis.ActualRate = (ReportAnalysis.ActualProduct / (TotalJobDuration.Day * 24 + TotalJobDuration.Hours + TotalJobDuration.Minutes / 60)).toFixed(2)\r\n        ReportAnalysis.ExpectedProduct = ReportAnalysis.ExpectedRate * (TotalJobDuration.Day * 24 + TotalJobDuration.Hours + TotalJobDuration.Minutes / 60)\r\n       \r\n        ReportAnalysis.EffectiveTime = ((SecondRuntime/TotalPeriodSecond)*100).toFixed(2)\r\n        ReportAnalysis.RateEfficiency =  ((ReportAnalysis.ActualRate/ReportAnalysis.ExpectedRate)*100).toFixed(2)\r\n        ReportAnalysis.Effciency = ((ReportAnalysis.ActualProduct/ReportAnalysis.ExpectedProduct)*100).toFixed(2)\r\n\r\n\r\n\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    const AvgAppend = (data) => {\r\n        let ComAvg\r\n        const type = ['FINAL_DISP_TOTAL']\r\n        let ComTotal = 0, totalnumber, i = 0\r\n        let buf = Object.keys(data)\r\n        console.log(data);\r\n        type.forEach(element => {\r\n            data.forEach(element2 => {\r\n                console.log(element2[element]);\r\n\r\n                if (element2[element] !== undefined) {\r\n                    let NumberBuf = parseFloat(element2[element])\r\n                    ComTotal = NumberBuf + ComTotal\r\n                }\r\n\r\n            });\r\n            ComAvg = parseFloat(ComTotal/1000).toFixed(2)\r\n            ComTotal = 0\r\n            i++\r\n        });\r\n        console.log(ComAvg);\r\n        return ComAvg\r\n    }\r\n\r\n\r\n    const CreateJob = async (info, datetimeStart, datetimeEnd, site, line) => {\r\n        // console.log(info)\r\n        // console.log(datetimeStart);\r\n        // console.log(datetimeEnd);\r\n        \r\n        const response2 = await logdata_request(['FINAL_DISP_TOTAL'], datetimeStart, datetimeEnd, 'PolymerLink', 'Maguire C3', '1')\r\n        console.log(response2);\r\n        let data = LogDataMappingName(McGuire, DataSortTimeMcG(response2))\r\n        let AvgTotal = AvgAppend(data)\r\n        info.info5 = AvgTotal\r\n        console.log(AvgTotal);\r\n\r\n        const response = await WriteJob(info, datetimeStart, datetimeEnd, site, line)\r\n        if (response.success === true) {\r\n            message.success('Create Success !')\r\n            let period = GetDateTime(14, 14)\r\n            RequestJob([], period[0], period[1], 'PolymerLink', 'C3', 'C3ReportList')\r\n\r\n        }\r\n        // CloseEditJobSheet()\r\n    }\r\n\r\n    const RequestJob = async (info, datetimeStart, datetimeEnd, site, line, BufferName) => {\r\n        JobDetailRecord.datetimeStart = datetimeStart\r\n        JobDetailRecord.datetimeEnd = datetimeEnd\r\n        JobDetailRecord.site = site\r\n        JobDetailRecord.line = line\r\n        JobDetailRecord.BufferName = BufferName\r\n\r\n        const response = await ReadJob(info, datetimeStart, datetimeEnd, site, line)\r\n        let data = ReportSort(response)\r\n        ReportList[BufferName] = data\r\n        console.log(data);\r\n        setState(({ count }) => ({ count: count + 1 }));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* C3 part here */}\r\n            <ReportWrapper CreateJobCallBack={CreateJob}\r\n                site={'Polymerlink'} line={'C3'}\r\n            />\r\n\r\n            <ReportListWrapper ReportListCallBack={RequestJob}\r\n                site={'Polymerlink'} line={'C3'}\r\n                ReportList={ReportList['C3ReportList']}\r\n                Columb={ColumbJobC3}\r\n                BufferName={\"C3ReportList\"}\r\n            />\r\n\r\n            <NameTableWrapper SetTimeRangeCallBack={UpdateTableData}\r\n                LogValue={LogValue['LogC3']} Columb={ColumbC3}\r\n                site={'C3'} page={'1'} BufferName={\"LogC3\"} Model={C3ModelMap}\r\n                JobInfo={ReportInfoC3} FileName={'ExtruderSheet.xlsx'} startingColumb={'A'} startingRow={7}\r\n                EndingColumb={'R'} EndingRow={7} Cell={Cell}\r\n            />\r\n\r\n            <ReportGraph ReportAnalysis={ReportAnalysis} RunningStep={LogValue['TimingData']} />\r\n\r\n            <EditReportForm Visibility={Edit} callbackClose={CloseEditJobSheet}\r\n                InfoData={EditJobData} CreateJobCallBack={CreateJob}\r\n                site={'Polymerlink'} line={'C3'} />\r\n\r\n            {/* <Card title={'Timing Graph C3'} bordered={true} style={{\r\n                width: '100%', borderRadius: 15,\r\n                backgroundColor: '#ffffff', marginTop: '15px'\r\n            }} hoverable={true}>\r\n                <div id='C3Graph'></div>\r\n            </Card> */}\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Line1Report\r\n"]},"metadata":{},"sourceType":"module"}