{"ast":null,"code":"/* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */\n\n/* vim: set ts=2: */\n\n/*jshint eqnull:true */\n\n/*exported CFB */\n\n/*global module, require:false, process:false, Buffer:false, Uint8Array:false, Uint16Array:false */\nvar Base64 = function make_b64() {\n  var map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  return {\n    encode: function encode(input) {\n      var o = \"\";\n      var c1 = 0,\n          c2 = 0,\n          c3 = 0,\n          e1 = 0,\n          e2 = 0,\n          e3 = 0,\n          e4 = 0;\n\n      for (var i = 0; i < input.length;) {\n        c1 = input.charCodeAt(i++);\n        e1 = c1 >> 2;\n        c2 = input.charCodeAt(i++);\n        e2 = (c1 & 3) << 4 | c2 >> 4;\n        c3 = input.charCodeAt(i++);\n        e3 = (c2 & 15) << 2 | c3 >> 6;\n        e4 = c3 & 63;\n\n        if (isNaN(c2)) {\n          e3 = e4 = 64;\n        } else if (isNaN(c3)) {\n          e4 = 64;\n        }\n\n        o += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4);\n      }\n\n      return o;\n    },\n    decode: function b64_decode(input) {\n      var o = \"\";\n      var c1 = 0,\n          c2 = 0,\n          c3 = 0,\n          e1 = 0,\n          e2 = 0,\n          e3 = 0,\n          e4 = 0;\n      input = input.replace(/[^\\w\\+\\/\\=]/g, \"\");\n\n      for (var i = 0; i < input.length;) {\n        e1 = map.indexOf(input.charAt(i++));\n        e2 = map.indexOf(input.charAt(i++));\n        c1 = e1 << 2 | e2 >> 4;\n        o += String.fromCharCode(c1);\n        e3 = map.indexOf(input.charAt(i++));\n        c2 = (e2 & 15) << 4 | e3 >> 2;\n\n        if (e3 !== 64) {\n          o += String.fromCharCode(c2);\n        }\n\n        e4 = map.indexOf(input.charAt(i++));\n        c3 = (e3 & 3) << 6 | e4;\n\n        if (e4 !== 64) {\n          o += String.fromCharCode(c3);\n        }\n      }\n\n      return o;\n    }\n  };\n}();\n\nvar has_buf = typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && process.versions.node;\n\nvar Buffer_from = function Buffer_from() {};\n\nif (typeof Buffer !== 'undefined') {\n  var nbfs = !Buffer.from;\n  if (!nbfs) try {\n    Buffer.from(\"foo\", \"utf8\");\n  } catch (e) {\n    nbfs = true;\n  }\n  Buffer_from = nbfs ? function (buf, enc) {\n    return enc ? new Buffer(buf, enc) : new Buffer(buf);\n  } : Buffer.from.bind(Buffer); // $FlowIgnore\n\n  if (!Buffer.alloc) Buffer.alloc = function (n) {\n    var b = new Buffer(n);\n    b.fill(0);\n    return b;\n  }; // $FlowIgnore\n\n  if (!Buffer.allocUnsafe) Buffer.allocUnsafe = function (n) {\n    return new Buffer(n);\n  };\n}\n\nfunction new_raw_buf(len) {\n  /* jshint -W056 */\n  return has_buf ? Buffer.alloc(len) : new Array(len);\n  /* jshint +W056 */\n}\n\nfunction new_unsafe_buf(len) {\n  /* jshint -W056 */\n  return has_buf ? Buffer.allocUnsafe(len) : new Array(len);\n  /* jshint +W056 */\n}\n\nvar s2a = function s2a(s) {\n  if (has_buf) return Buffer_from(s, \"binary\");\n  return s.split(\"\").map(function (x) {\n    return x.charCodeAt(0) & 0xff;\n  });\n};\n\nvar chr0 = /\\u0000/g,\n    chr1 = /[\\u0001-\\u0006]/g;\n\nvar __toBuffer = function __toBuffer(bufs) {\n  var x = [];\n\n  for (var i = 0; i < bufs[0].length; ++i) {\n    x.push.apply(x, bufs[0][i]);\n  }\n\n  return x;\n};\n\nvar ___toBuffer = __toBuffer;\n\nvar __utf16le = function __utf16le(b, s, e) {\n  var ss = [];\n\n  for (var i = s; i < e; i += 2) {\n    ss.push(String.fromCharCode(__readUInt16LE(b, i)));\n  }\n\n  return ss.join(\"\").replace(chr0, '');\n};\n\nvar ___utf16le = __utf16le;\n\nvar __hexlify = function __hexlify(b, s, l) {\n  var ss = [];\n\n  for (var i = s; i < s + l; ++i) {\n    ss.push((\"0\" + b[i].toString(16)).slice(-2));\n  }\n\n  return ss.join(\"\");\n};\n\nvar ___hexlify = __hexlify;\n\nvar __bconcat = function __bconcat(bufs) {\n  if (Array.isArray(bufs[0])) return [].concat.apply([], bufs);\n  var maxlen = 0,\n      i = 0;\n\n  for (i = 0; i < bufs.length; ++i) {\n    maxlen += bufs[i].length;\n  }\n\n  var o = new Uint8Array(maxlen);\n\n  for (i = 0, maxlen = 0; i < bufs.length; maxlen += bufs[i].length, ++i) {\n    o.set(bufs[i], maxlen);\n  }\n\n  return o;\n};\n\nvar bconcat = __bconcat;\n\nif (has_buf) {\n  __utf16le = function __utf16le(b, s, e) {\n    if (!Buffer.isBuffer(b)) return ___utf16le(b, s, e);\n    return b.toString('utf16le', s, e).replace(chr0, '')\n    /*.replace(chr1,'!')*/\n    ;\n  };\n\n  __hexlify = function __hexlify(b, s, l) {\n    return Buffer.isBuffer(b) ? b.toString('hex', s, s + l) : ___hexlify(b, s, l);\n  };\n\n  __toBuffer = function __toBuffer(bufs) {\n    return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);\n  };\n\n  s2a = function s2a(s) {\n    return Buffer_from(s, \"binary\");\n  };\n\n  bconcat = function bconcat(bufs) {\n    return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : __bconcat(bufs);\n  };\n}\n\nvar __readUInt8 = function __readUInt8(b, idx) {\n  return b[idx];\n};\n\nvar __readUInt16LE = function __readUInt16LE(b, idx) {\n  return b[idx + 1] * (1 << 8) + b[idx];\n};\n\nvar __readInt16LE = function __readInt16LE(b, idx) {\n  var u = b[idx + 1] * (1 << 8) + b[idx];\n  return u < 0x8000 ? u : (0xffff - u + 1) * -1;\n};\n\nvar __readUInt32LE = function __readUInt32LE(b, idx) {\n  return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];\n};\n\nvar __readInt32LE = function __readInt32LE(b, idx) {\n  return (b[idx + 3] << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];\n};\n\nfunction ReadShift(size, t) {\n  var oI,\n      oS,\n      type = 0;\n\n  switch (size) {\n    case 1:\n      oI = __readUInt8(this, this.l);\n      break;\n\n    case 2:\n      oI = (t !== 'i' ? __readUInt16LE : __readInt16LE)(this, this.l);\n      break;\n\n    case 4:\n      oI = __readInt32LE(this, this.l);\n      break;\n\n    case 16:\n      type = 2;\n      oS = __hexlify(this, this.l, size);\n  }\n\n  this.l += size;\n  if (type === 0) return oI;\n  return oS;\n}\n\nvar __writeUInt32LE = function __writeUInt32LE(b, val, idx) {\n  b[idx] = val & 0xFF;\n  b[idx + 1] = val >>> 8 & 0xFF;\n  b[idx + 2] = val >>> 16 & 0xFF;\n  b[idx + 3] = val >>> 24 & 0xFF;\n};\n\nvar __writeInt32LE = function __writeInt32LE(b, val, idx) {\n  b[idx] = val & 0xFF;\n  b[idx + 1] = val >> 8 & 0xFF;\n  b[idx + 2] = val >> 16 & 0xFF;\n  b[idx + 3] = val >> 24 & 0xFF;\n};\n\nfunction WriteShift(t, val, f) {\n  var size = 0,\n      i = 0;\n\n  switch (f) {\n    case \"hex\":\n      for (; i < t; ++i) {\n        this[this.l++] = parseInt(val.slice(2 * i, 2 * i + 2), 16) || 0;\n      }\n\n      return this;\n\n    case \"utf16le\":\n      var end = this.l + t;\n\n      for (i = 0; i < Math.min(val.length, t); ++i) {\n        var cc = val.charCodeAt(i);\n        this[this.l++] = cc & 0xff;\n        this[this.l++] = cc >> 8;\n      }\n\n      while (this.l < end) {\n        this[this.l++] = 0;\n      }\n\n      return this;\n  }\n\n  switch (t) {\n    case 1:\n      size = 1;\n      this[this.l] = val & 0xFF;\n      break;\n\n    case 2:\n      size = 2;\n      this[this.l] = val & 0xFF;\n      val >>>= 8;\n      this[this.l + 1] = val & 0xFF;\n      break;\n\n    case 4:\n      size = 4;\n\n      __writeUInt32LE(this, val, this.l);\n\n      break;\n\n    case -4:\n      size = 4;\n\n      __writeInt32LE(this, val, this.l);\n\n      break;\n  }\n\n  this.l += size;\n  return this;\n}\n\nfunction CheckField(hexstr, fld) {\n  var m = __hexlify(this, this.l, hexstr.length >> 1);\n\n  if (m !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m);\n  this.l += hexstr.length >> 1;\n}\n\nfunction prep_blob(blob, pos) {\n  blob.l = pos;\n  blob.read_shift = ReadShift;\n  blob.chk = CheckField;\n  blob.write_shift = WriteShift;\n}\n\nfunction new_buf(sz) {\n  var o = new_raw_buf(sz);\n  prep_blob(o, 0);\n  return o;\n}\n/* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n\n/* vim: set ts=2: */\n\n/*exported CRC32 */\n\n\nvar CRC32;\n\n(function (factory) {\n  /*jshint ignore:start */\n\n  /*eslint-disable */\n  factory(CRC32 = {});\n  /*eslint-enable */\n\n  /*jshint ignore:end */\n})(function (CRC32) {\n  CRC32.version = '1.2.0';\n  /* see perf/crc32table.js */\n\n  /*global Int32Array */\n\n  function signed_crc_table() {\n    var c = 0,\n        table = new Array(256);\n\n    for (var n = 0; n != 256; ++n) {\n      c = n;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;\n      table[n] = c;\n    }\n\n    return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n  }\n\n  var T = signed_crc_table();\n\n  function crc32_bstr(bstr, seed) {\n    var C = seed ^ -1,\n        L = bstr.length - 1;\n\n    for (var i = 0; i < L;) {\n      C = C >>> 8 ^ T[(C ^ bstr.charCodeAt(i++)) & 0xFF];\n      C = C >>> 8 ^ T[(C ^ bstr.charCodeAt(i++)) & 0xFF];\n    }\n\n    if (i === L) C = C >>> 8 ^ T[(C ^ bstr.charCodeAt(i)) & 0xFF];\n    return C ^ -1;\n  }\n\n  function crc32_buf(buf, seed) {\n    if (buf.length > 10000) return crc32_buf_8(buf, seed);\n    var C = seed ^ -1,\n        L = buf.length - 3;\n\n    for (var i = 0; i < L;) {\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n    }\n\n    while (i < L + 3) {\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n    }\n\n    return C ^ -1;\n  }\n\n  function crc32_buf_8(buf, seed) {\n    var C = seed ^ -1,\n        L = buf.length - 7;\n\n    for (var i = 0; i < L;) {\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n    }\n\n    while (i < L + 7) {\n      C = C >>> 8 ^ T[(C ^ buf[i++]) & 0xFF];\n    }\n\n    return C ^ -1;\n  }\n\n  function crc32_str(str, seed) {\n    var C = seed ^ -1;\n\n    for (var i = 0, L = str.length, c, d; i < L;) {\n      c = str.charCodeAt(i++);\n\n      if (c < 0x80) {\n        C = C >>> 8 ^ T[(C ^ c) & 0xFF];\n      } else if (c < 0x800) {\n        C = C >>> 8 ^ T[(C ^ (192 | c >> 6 & 31)) & 0xFF];\n        C = C >>> 8 ^ T[(C ^ (128 | c & 63)) & 0xFF];\n      } else if (c >= 0xD800 && c < 0xE000) {\n        c = (c & 1023) + 64;\n        d = str.charCodeAt(i++) & 1023;\n        C = C >>> 8 ^ T[(C ^ (240 | c >> 8 & 7)) & 0xFF];\n        C = C >>> 8 ^ T[(C ^ (128 | c >> 2 & 63)) & 0xFF];\n        C = C >>> 8 ^ T[(C ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 0xFF];\n        C = C >>> 8 ^ T[(C ^ (128 | d & 63)) & 0xFF];\n      } else {\n        C = C >>> 8 ^ T[(C ^ (224 | c >> 12 & 15)) & 0xFF];\n        C = C >>> 8 ^ T[(C ^ (128 | c >> 6 & 63)) & 0xFF];\n        C = C >>> 8 ^ T[(C ^ (128 | c & 63)) & 0xFF];\n      }\n    }\n\n    return C ^ -1;\n  }\n\n  CRC32.table = T;\n  CRC32.bstr = crc32_bstr;\n  CRC32.buf = crc32_buf;\n  CRC32.str = crc32_str;\n});\n/* [MS-CFB] v20171201 */\n\n\nvar CFB = function _CFB() {\n  var exports = {};\n  exports.version = '1.2.1';\n  /* [MS-CFB] 2.6.4 */\n\n  function namecmp(l, r) {\n    var L = l.split(\"/\"),\n        R = r.split(\"/\");\n\n    for (var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {\n      if (c = L[i].length - R[i].length) return c;\n      if (L[i] != R[i]) return L[i] < R[i] ? -1 : 1;\n    }\n\n    return L.length - R.length;\n  }\n\n  function dirname(p) {\n    if (p.charAt(p.length - 1) == \"/\") return p.slice(0, -1).indexOf(\"/\") === -1 ? p : dirname(p.slice(0, -1));\n    var c = p.lastIndexOf(\"/\");\n    return c === -1 ? p : p.slice(0, c + 1);\n  }\n\n  function filename(p) {\n    if (p.charAt(p.length - 1) == \"/\") return filename(p.slice(0, -1));\n    var c = p.lastIndexOf(\"/\");\n    return c === -1 ? p : p.slice(c + 1);\n  }\n  /* -------------------------------------------------------------------------- */\n\n  /* DOS Date format:\n     high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low\n     add 1980 to stored year\n     stored second should be doubled\n  */\n\n  /* write JS date to buf as a DOS date */\n\n\n  function write_dos_date(buf, date) {\n    if (typeof date === \"string\") date = new Date(date);\n    var hms = date.getHours();\n    hms = hms << 6 | date.getMinutes();\n    hms = hms << 5 | date.getSeconds() >>> 1;\n    buf.write_shift(2, hms);\n    var ymd = date.getFullYear() - 1980;\n    ymd = ymd << 4 | date.getMonth() + 1;\n    ymd = ymd << 5 | date.getDate();\n    buf.write_shift(2, ymd);\n  }\n  /* read four bytes from buf and interpret as a DOS date */\n\n\n  function parse_dos_date(buf) {\n    var hms = buf.read_shift(2) & 0xFFFF;\n    var ymd = buf.read_shift(2) & 0xFFFF;\n    var val = new Date();\n    var d = ymd & 0x1F;\n    ymd >>>= 5;\n    var m = ymd & 0x0F;\n    ymd >>>= 4;\n    val.setMilliseconds(0);\n    val.setFullYear(ymd + 1980);\n    val.setMonth(m - 1);\n    val.setDate(d);\n    var S = hms & 0x1F;\n    hms >>>= 5;\n    var M = hms & 0x3F;\n    hms >>>= 6;\n    val.setHours(hms);\n    val.setMinutes(M);\n    val.setSeconds(S << 1);\n    return val;\n  }\n\n  function parse_extra_field(blob) {\n    prep_blob(blob, 0);\n    var o = {};\n    var flags = 0;\n\n    while (blob.l <= blob.length - 4) {\n      var type = blob.read_shift(2);\n      var sz = blob.read_shift(2),\n          tgt = blob.l + sz;\n      var p = {};\n\n      switch (type) {\n        /* UNIX-style Timestamps */\n        case 0x5455:\n          {\n            flags = blob.read_shift(1);\n            if (flags & 1) p.mtime = blob.read_shift(4);\n            /* for some reason, CD flag corresponds to LFH */\n\n            if (sz > 5) {\n              if (flags & 2) p.atime = blob.read_shift(4);\n              if (flags & 4) p.ctime = blob.read_shift(4);\n            }\n\n            if (p.mtime) p.mt = new Date(p.mtime * 1000);\n          }\n          break;\n      }\n\n      blob.l = tgt;\n      o[type] = p;\n    }\n\n    return o;\n  }\n\n  var fs;\n\n  function get_fs() {\n    return fs || (fs = require('fs'));\n  }\n\n  function parse(file, options) {\n    if (file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);\n    if ((file[0] | 0x20) == 0x6d && (file[1] | 0x20) == 0x69) return parse_mad(file, options);\n    if (file.length < 512) throw new Error(\"CFB file size \" + file.length + \" < 512\");\n    var mver = 3;\n    var ssz = 512;\n    var nmfs = 0; // number of mini FAT sectors\n\n    var difat_sec_cnt = 0;\n    var dir_start = 0;\n    var minifat_start = 0;\n    var difat_start = 0;\n    var fat_addrs = []; // locations of FAT sectors\n\n    /* [MS-CFB] 2.2 Compound File Header */\n\n    var blob = file.slice(0, 512);\n    prep_blob(blob, 0);\n    /* major version */\n\n    var mv = check_get_mver(blob);\n    mver = mv[0];\n\n    switch (mver) {\n      case 3:\n        ssz = 512;\n        break;\n\n      case 4:\n        ssz = 4096;\n        break;\n\n      case 0:\n        if (mv[1] == 0) return parse_zip(file, options);\n\n      /* falls through */\n\n      default:\n        throw new Error(\"Major Version: Expected 3 or 4 saw \" + mver);\n    }\n    /* reprocess header */\n\n\n    if (ssz !== 512) {\n      blob = file.slice(0, ssz);\n      prep_blob(blob, 28\n      /* blob.l */\n      );\n    }\n    /* Save header for final object */\n\n\n    var header = file.slice(0, ssz);\n    check_shifts(blob, mver); // Number of Directory Sectors\n\n    var dir_cnt = blob.read_shift(4, 'i');\n    if (mver === 3 && dir_cnt !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt); // Number of FAT Sectors\n\n    blob.l += 4; // First Directory Sector Location\n\n    dir_start = blob.read_shift(4, 'i'); // Transaction Signature\n\n    blob.l += 4; // Mini Stream Cutoff Size\n\n    blob.chk('00100000', 'Mini Stream Cutoff Size: '); // First Mini FAT Sector Location\n\n    minifat_start = blob.read_shift(4, 'i'); // Number of Mini FAT Sectors\n\n    nmfs = blob.read_shift(4, 'i'); // First DIFAT sector location\n\n    difat_start = blob.read_shift(4, 'i'); // Number of DIFAT Sectors\n\n    difat_sec_cnt = blob.read_shift(4, 'i'); // Grab FAT Sector Locations\n\n    for (var q = -1, j = 0; j < 109; ++j) {\n      /* 109 = (512 - blob.l)>>>2; */\n      q = blob.read_shift(4, 'i');\n      if (q < 0) break;\n      fat_addrs[j] = q;\n    }\n    /** Break the file up into sectors */\n\n\n    var sectors = sectorify(file, ssz);\n    sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);\n    /** Chains */\n\n    var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);\n    sector_list[dir_start].name = \"!Directory\";\n    if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = \"!MiniFAT\";\n    sector_list[fat_addrs[0]].name = \"!FAT\";\n    sector_list.fat_addrs = fat_addrs;\n    sector_list.ssz = ssz;\n    /* [MS-CFB] 2.6.1 Compound File Directory Entry */\n\n    var files = {},\n        Paths = [],\n        FileIndex = [],\n        FullPaths = [];\n    read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);\n    build_full_paths(FileIndex, FullPaths, Paths);\n    Paths.shift();\n    var o = {\n      FileIndex: FileIndex,\n      FullPaths: FullPaths\n    }; // $FlowIgnore\n\n    if (options && options.raw) o.raw = {\n      header: header,\n      sectors: sectors\n    };\n    return o;\n  } // parse\n\n  /* [MS-CFB] 2.2 Compound File Header -- read up to major version */\n\n\n  function check_get_mver(blob) {\n    if (blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [0, 0]; // header signature 8\n\n    blob.chk(HEADER_SIGNATURE, 'Header Signature: '); // clsid 16\n    //blob.chk(HEADER_CLSID, 'CLSID: ');\n\n    blob.l += 16; // minor version 2\n\n    var mver = blob.read_shift(2, 'u');\n    return [blob.read_shift(2, 'u'), mver];\n  }\n\n  function check_shifts(blob, mver) {\n    var shift = 0x09; // Byte Order\n    //blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff\n\n    blob.l += 2; // Sector Shift\n\n    switch (shift = blob.read_shift(2)) {\n      case 0x09:\n        if (mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift);\n        break;\n\n      case 0x0c:\n        if (mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift);\n        break;\n\n      default:\n        throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);\n    } // Mini Sector Shift\n\n\n    blob.chk('0600', 'Mini Sector Shift: '); // Reserved\n\n    blob.chk('000000000000', 'Reserved: ');\n  }\n  /** Break the file up into sectors */\n\n\n  function sectorify(file, ssz) {\n    var nsectors = Math.ceil(file.length / ssz) - 1;\n    var sectors = [];\n\n    for (var i = 1; i < nsectors; ++i) {\n      sectors[i - 1] = file.slice(i * ssz, (i + 1) * ssz);\n    }\n\n    sectors[nsectors - 1] = file.slice(nsectors * ssz);\n    return sectors;\n  }\n  /* [MS-CFB] 2.6.4 Red-Black Tree */\n\n\n  function build_full_paths(FI, FP, Paths) {\n    var i = 0,\n        L = 0,\n        R = 0,\n        C = 0,\n        j = 0,\n        pl = Paths.length;\n    var dad = [],\n        q = [];\n\n    for (; i < pl; ++i) {\n      dad[i] = q[i] = i;\n      FP[i] = Paths[i];\n    }\n\n    for (; j < q.length; ++j) {\n      i = q[j];\n      L = FI[i].L;\n      R = FI[i].R;\n      C = FI[i].C;\n\n      if (dad[i] === i) {\n        if (L !== -1\n        /*NOSTREAM*/\n        && dad[L] !== L) dad[i] = dad[L];\n        if (R !== -1 && dad[R] !== R) dad[i] = dad[R];\n      }\n\n      if (C !== -1\n      /*NOSTREAM*/\n      ) dad[C] = i;\n\n      if (L !== -1 && i != dad[i]) {\n        dad[L] = dad[i];\n        if (q.lastIndexOf(L) < j) q.push(L);\n      }\n\n      if (R !== -1 && i != dad[i]) {\n        dad[R] = dad[i];\n        if (q.lastIndexOf(R) < j) q.push(R);\n      }\n    }\n\n    for (i = 1; i < pl; ++i) {\n      if (dad[i] === i) {\n        if (R !== -1\n        /*NOSTREAM*/\n        && dad[R] !== R) dad[i] = dad[R];else if (L !== -1 && dad[L] !== L) dad[i] = dad[L];\n      }\n    }\n\n    for (i = 1; i < pl; ++i) {\n      if (FI[i].type === 0\n      /* unknown */\n      ) continue;\n      j = i;\n      if (j != dad[j]) do {\n        j = dad[j];\n        FP[i] = FP[j] + \"/\" + FP[i];\n      } while (j !== 0 && -1 !== dad[j] && j != dad[j]);\n      dad[i] = -1;\n    }\n\n    FP[0] += \"/\";\n\n    for (i = 1; i < pl; ++i) {\n      if (FI[i].type !== 2\n      /* stream */\n      ) FP[i] += \"/\";\n    }\n  }\n\n  function get_mfat_entry(entry, payload, mini) {\n    var start = entry.start,\n        size = entry.size; //return (payload.slice(start*MSSZ, start*MSSZ + size));\n\n    var o = [];\n    var idx = start;\n\n    while (mini && size > 0 && idx >= 0) {\n      o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));\n      size -= MSSZ;\n      idx = __readInt32LE(mini, idx * 4);\n    }\n\n    if (o.length === 0) return new_buf(0);\n    return bconcat(o).slice(0, entry.size);\n  }\n  /** Chase down the rest of the DIFAT chain to build a comprehensive list\n      DIFAT chains by storing the next sector number as the last 32 bits */\n\n\n  function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {\n    var q = ENDOFCHAIN;\n\n    if (idx === ENDOFCHAIN) {\n      if (cnt !== 0) throw new Error(\"DIFAT chain shorter than expected\");\n    } else if (idx !== -1\n    /*FREESECT*/\n    ) {\n      var sector = sectors[idx],\n          m = (ssz >>> 2) - 1;\n      if (!sector) return;\n\n      for (var i = 0; i < m; ++i) {\n        if ((q = __readInt32LE(sector, i * 4)) === ENDOFCHAIN) break;\n        fat_addrs.push(q);\n      }\n\n      sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);\n    }\n  }\n  /** Follow the linked list of sectors for a given starting point */\n\n\n  function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {\n    var buf = [],\n        buf_chain = [];\n    if (!chkd) chkd = [];\n    var modulus = ssz - 1,\n        j = 0,\n        jj = 0;\n\n    for (j = start; j >= 0;) {\n      chkd[j] = true;\n      buf[buf.length] = j;\n      buf_chain.push(sectors[j]);\n      var addr = fat_addrs[Math.floor(j * 4 / ssz)];\n      jj = j * 4 & modulus;\n      if (ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \" + ssz);\n      if (!sectors[addr]) break;\n      j = __readInt32LE(sectors[addr], jj);\n    }\n\n    return {\n      nodes: buf,\n      data: __toBuffer([buf_chain])\n    };\n  }\n  /** Chase down the sector linked lists */\n\n\n  function make_sector_list(sectors, dir_start, fat_addrs, ssz) {\n    var sl = sectors.length,\n        sector_list = [];\n    var chkd = [],\n        buf = [],\n        buf_chain = [];\n    var modulus = ssz - 1,\n        i = 0,\n        j = 0,\n        k = 0,\n        jj = 0;\n\n    for (i = 0; i < sl; ++i) {\n      buf = [];\n      k = i + dir_start;\n      if (k >= sl) k -= sl;\n      if (chkd[k]) continue;\n      buf_chain = [];\n      var seen = [];\n\n      for (j = k; j >= 0;) {\n        seen[j] = true;\n        chkd[j] = true;\n        buf[buf.length] = j;\n        buf_chain.push(sectors[j]);\n        var addr = fat_addrs[Math.floor(j * 4 / ssz)];\n        jj = j * 4 & modulus;\n        if (ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \" + ssz);\n        if (!sectors[addr]) break;\n        j = __readInt32LE(sectors[addr], jj);\n        if (seen[j]) break;\n      }\n\n      sector_list[k] = {\n        nodes: buf,\n        data: __toBuffer([buf_chain])\n      };\n    }\n\n    return sector_list;\n  }\n  /* [MS-CFB] 2.6.1 Compound File Directory Entry */\n\n\n  function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {\n    var minifat_store = 0,\n        pl = Paths.length ? 2 : 0;\n    var sector = sector_list[dir_start].data;\n    var i = 0,\n        namelen = 0,\n        name;\n\n    for (; i < sector.length; i += 128) {\n      var blob = sector.slice(i, i + 128);\n      prep_blob(blob, 64);\n      namelen = blob.read_shift(2);\n      name = __utf16le(blob, 0, namelen - pl);\n      Paths.push(name);\n      var o = {\n        name: name,\n        type: blob.read_shift(1),\n        color: blob.read_shift(1),\n        L: blob.read_shift(4, 'i'),\n        R: blob.read_shift(4, 'i'),\n        C: blob.read_shift(4, 'i'),\n        clsid: blob.read_shift(16),\n        state: blob.read_shift(4, 'i'),\n        start: 0,\n        size: 0\n      };\n      var ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n      if (ctime !== 0) o.ct = read_date(blob, blob.l - 8);\n      var mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n      if (mtime !== 0) o.mt = read_date(blob, blob.l - 8);\n      o.start = blob.read_shift(4, 'i');\n      o.size = blob.read_shift(4, 'i');\n\n      if (o.size < 0 && o.start < 0) {\n        o.size = o.type = 0;\n        o.start = ENDOFCHAIN;\n        o.name = \"\";\n      }\n\n      if (o.type === 5) {\n        /* root */\n        minifat_store = o.start;\n        if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = \"!StreamData\";\n        /*minifat_size = o.size;*/\n      } else if (o.size >= 4096\n      /* MSCSZ */\n      ) {\n        o.storage = 'fat';\n        if (sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);\n        sector_list[o.start].name = o.name;\n        o.content = sector_list[o.start].data.slice(0, o.size);\n      } else {\n        o.storage = 'minifat';\n        if (o.size < 0) o.size = 0;else if (minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {\n          o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini] || {}).data);\n        }\n      }\n\n      if (o.content) prep_blob(o.content, 0);\n      files[name] = o;\n      FileIndex.push(o);\n    }\n  }\n\n  function read_date(blob, offset) {\n    return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1000);\n  }\n\n  function read_file(filename, options) {\n    get_fs();\n    return parse(fs.readFileSync(filename), options);\n  }\n\n  function read(blob, options) {\n    var type = options && options.type;\n\n    if (!type) {\n      if (has_buf && Buffer.isBuffer(blob)) type = \"buffer\";\n    }\n\n    switch (type || \"base64\") {\n      case \"file\":\n        return read_file(blob, options);\n\n      case \"base64\":\n        return parse(s2a(Base64.decode(blob)), options);\n\n      case \"binary\":\n        return parse(s2a(blob), options);\n    }\n\n    return parse(blob, options);\n  }\n\n  function init_cfb(cfb, opts) {\n    var o = opts || {},\n        root = o.root || \"Root Entry\";\n    if (!cfb.FullPaths) cfb.FullPaths = [];\n    if (!cfb.FileIndex) cfb.FileIndex = [];\n    if (cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error(\"inconsistent CFB structure\");\n\n    if (cfb.FullPaths.length === 0) {\n      cfb.FullPaths[0] = root + \"/\";\n      cfb.FileIndex[0] = {\n        name: root,\n        type: 5\n      };\n    }\n\n    if (o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;\n    seed_cfb(cfb);\n  }\n\n  function seed_cfb(cfb) {\n    var nm = \"\\x01Sh33tJ5\";\n    if (CFB.find(cfb, \"/\" + nm)) return;\n    var p = new_buf(4);\n    p[0] = 55;\n    p[1] = p[3] = 50;\n    p[2] = 54;\n    cfb.FileIndex.push({\n      name: nm,\n      type: 2,\n      content: p,\n      size: 4,\n      L: 69,\n      R: 69,\n      C: 69\n    });\n    cfb.FullPaths.push(cfb.FullPaths[0] + nm);\n    rebuild_cfb(cfb);\n  }\n\n  function rebuild_cfb(cfb, f) {\n    init_cfb(cfb);\n    var gc = false,\n        s = false;\n\n    for (var i = cfb.FullPaths.length - 1; i >= 0; --i) {\n      var _file = cfb.FileIndex[i];\n\n      switch (_file.type) {\n        case 0:\n          if (s) gc = true;else {\n            cfb.FileIndex.pop();\n            cfb.FullPaths.pop();\n          }\n          break;\n\n        case 1:\n        case 2:\n        case 5:\n          s = true;\n          if (isNaN(_file.R * _file.L * _file.C)) gc = true;\n          if (_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;\n          break;\n\n        default:\n          gc = true;\n          break;\n      }\n    }\n\n    if (!gc && !f) return;\n    var now = new Date(1987, 1, 19),\n        j = 0; // Track which names exist\n\n    var fullPaths = Object.create ? Object.create(null) : {};\n    var data = [];\n\n    for (i = 0; i < cfb.FullPaths.length; ++i) {\n      fullPaths[cfb.FullPaths[i]] = true;\n      if (cfb.FileIndex[i].type === 0) continue;\n      data.push([cfb.FullPaths[i], cfb.FileIndex[i]]);\n    }\n\n    for (i = 0; i < data.length; ++i) {\n      var dad = dirname(data[i][0]);\n      s = fullPaths[dad];\n\n      if (!s) {\n        data.push([dad, {\n          name: filename(dad).replace(\"/\", \"\"),\n          type: 1,\n          clsid: HEADER_CLSID,\n          ct: now,\n          mt: now,\n          content: null\n        }]); // Add name to set\n\n        fullPaths[dad] = true;\n      }\n    }\n\n    data.sort(function (x, y) {\n      return namecmp(x[0], y[0]);\n    });\n    cfb.FullPaths = [];\n    cfb.FileIndex = [];\n\n    for (i = 0; i < data.length; ++i) {\n      cfb.FullPaths[i] = data[i][0];\n      cfb.FileIndex[i] = data[i][1];\n    }\n\n    for (i = 0; i < data.length; ++i) {\n      var elt = cfb.FileIndex[i];\n      var nm = cfb.FullPaths[i];\n      elt.name = filename(nm).replace(\"/\", \"\");\n      elt.L = elt.R = elt.C = -(elt.color = 1);\n      elt.size = elt.content ? elt.content.length : 0;\n      elt.start = 0;\n      elt.clsid = elt.clsid || HEADER_CLSID;\n\n      if (i === 0) {\n        elt.C = data.length > 1 ? 1 : -1;\n        elt.size = 0;\n        elt.type = 5;\n      } else if (nm.slice(-1) == \"/\") {\n        for (j = i + 1; j < data.length; ++j) {\n          if (dirname(cfb.FullPaths[j]) == nm) break;\n        }\n\n        elt.C = j >= data.length ? -1 : j;\n\n        for (j = i + 1; j < data.length; ++j) {\n          if (dirname(cfb.FullPaths[j]) == dirname(nm)) break;\n        }\n\n        elt.R = j >= data.length ? -1 : j;\n        elt.type = 1;\n      } else {\n        if (dirname(cfb.FullPaths[i + 1] || \"\") == dirname(nm)) elt.R = i + 1;\n        elt.type = 2;\n      }\n    }\n  }\n\n  function _write(cfb, options) {\n    var _opts = options || {};\n    /* MAD is order-sensitive, skip rebuild and sort */\n\n\n    if (_opts.fileType == 'mad') return write_mad(cfb, _opts);\n    rebuild_cfb(cfb);\n\n    switch (_opts.fileType) {\n      case 'zip':\n        return write_zip(cfb, _opts);\n      //case 'mad': return write_mad(cfb, _opts);\n    }\n\n    var L = function (cfb) {\n      var mini_size = 0,\n          fat_size = 0;\n\n      for (var i = 0; i < cfb.FileIndex.length; ++i) {\n        var file = cfb.FileIndex[i];\n        if (!file.content) continue;\n        var flen = file.content.length;\n\n        if (flen > 0) {\n          if (flen < 0x1000) mini_size += flen + 0x3F >> 6;else fat_size += flen + 0x01FF >> 9;\n        }\n      }\n\n      var dir_cnt = cfb.FullPaths.length + 3 >> 2;\n      var mini_cnt = mini_size + 7 >> 3;\n      var mfat_cnt = mini_size + 0x7F >> 7;\n      var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;\n      var fat_cnt = fat_base + 0x7F >> 7;\n      var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);\n\n      while (fat_base + fat_cnt + difat_cnt + 0x7F >> 7 > fat_cnt) {\n        difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 0x7F);\n      }\n\n      var L = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];\n      cfb.FileIndex[0].size = mini_size << 6;\n      L[7] = (cfb.FileIndex[0].start = L[0] + L[1] + L[2] + L[3] + L[4] + L[5]) + (L[6] + 7 >> 3);\n      return L;\n    }(cfb);\n\n    var o = new_buf(L[7] << 9);\n    var i = 0,\n        T = 0;\n    {\n      for (i = 0; i < 8; ++i) {\n        o.write_shift(1, HEADER_SIG[i]);\n      }\n\n      for (i = 0; i < 8; ++i) {\n        o.write_shift(2, 0);\n      }\n\n      o.write_shift(2, 0x003E);\n      o.write_shift(2, 0x0003);\n      o.write_shift(2, 0xFFFE);\n      o.write_shift(2, 0x0009);\n      o.write_shift(2, 0x0006);\n\n      for (i = 0; i < 3; ++i) {\n        o.write_shift(2, 0);\n      }\n\n      o.write_shift(4, 0);\n      o.write_shift(4, L[2]);\n      o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);\n      o.write_shift(4, 0);\n      o.write_shift(4, 1 << 12);\n      o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);\n      o.write_shift(4, L[3]);\n      o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);\n      o.write_shift(4, L[1]);\n\n      for (i = 0; i < 109; ++i) {\n        o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n      }\n    }\n\n    if (L[1]) {\n      for (T = 0; T < L[1]; ++T) {\n        for (; i < 236 + T * 127; ++i) {\n          o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n        }\n\n        o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);\n      }\n    }\n\n    var chainit = function chainit(w) {\n      for (T += w; i < T - 1; ++i) {\n        o.write_shift(-4, i + 1);\n      }\n\n      if (w) {\n        ++i;\n        o.write_shift(-4, ENDOFCHAIN);\n      }\n    };\n\n    T = i = 0;\n\n    for (T += L[1]; i < T; ++i) {\n      o.write_shift(-4, consts.DIFSECT);\n    }\n\n    for (T += L[2]; i < T; ++i) {\n      o.write_shift(-4, consts.FATSECT);\n    }\n\n    chainit(L[3]);\n    chainit(L[4]);\n    var j = 0,\n        flen = 0;\n    var file = cfb.FileIndex[0];\n\n    for (; j < cfb.FileIndex.length; ++j) {\n      file = cfb.FileIndex[j];\n      if (!file.content) continue;\n      flen = file.content.length;\n      if (flen < 0x1000) continue;\n      file.start = T;\n      chainit(flen + 0x01FF >> 9);\n    }\n\n    chainit(L[6] + 7 >> 3);\n\n    while (o.l & 0x1FF) {\n      o.write_shift(-4, consts.ENDOFCHAIN);\n    }\n\n    T = i = 0;\n\n    for (j = 0; j < cfb.FileIndex.length; ++j) {\n      file = cfb.FileIndex[j];\n      if (!file.content) continue;\n      flen = file.content.length;\n      if (!flen || flen >= 0x1000) continue;\n      file.start = T;\n      chainit(flen + 0x3F >> 6);\n    }\n\n    while (o.l & 0x1FF) {\n      o.write_shift(-4, consts.ENDOFCHAIN);\n    }\n\n    for (i = 0; i < L[4] << 2; ++i) {\n      var nm = cfb.FullPaths[i];\n\n      if (!nm || nm.length === 0) {\n        for (j = 0; j < 17; ++j) {\n          o.write_shift(4, 0);\n        }\n\n        for (j = 0; j < 3; ++j) {\n          o.write_shift(4, -1);\n        }\n\n        for (j = 0; j < 12; ++j) {\n          o.write_shift(4, 0);\n        }\n\n        continue;\n      }\n\n      file = cfb.FileIndex[i];\n      if (i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;\n\n      var _nm = i === 0 && _opts.root || file.name;\n\n      flen = 2 * (_nm.length + 1);\n      o.write_shift(64, _nm, \"utf16le\");\n      o.write_shift(2, flen);\n      o.write_shift(1, file.type);\n      o.write_shift(1, file.color);\n      o.write_shift(-4, file.L);\n      o.write_shift(-4, file.R);\n      o.write_shift(-4, file.C);\n      if (!file.clsid) for (j = 0; j < 4; ++j) {\n        o.write_shift(4, 0);\n      } else o.write_shift(16, file.clsid, \"hex\");\n      o.write_shift(4, file.state || 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, file.start);\n      o.write_shift(4, file.size);\n      o.write_shift(4, 0);\n    }\n\n    for (i = 1; i < cfb.FileIndex.length; ++i) {\n      file = cfb.FileIndex[i];\n\n      if (file.size >= 0x1000) {\n        o.l = file.start + 1 << 9;\n\n        if (has_buf && Buffer.isBuffer(file.content)) {\n          file.content.copy(o, o.l, 0, file.size); // o is a 0-filled Buffer so just set next offset\n\n          o.l += file.size + 511 & -512;\n        } else {\n          for (j = 0; j < file.size; ++j) {\n            o.write_shift(1, file.content[j]);\n          }\n\n          for (; j & 0x1FF; ++j) {\n            o.write_shift(1, 0);\n          }\n        }\n      }\n    }\n\n    for (i = 1; i < cfb.FileIndex.length; ++i) {\n      file = cfb.FileIndex[i];\n\n      if (file.size > 0 && file.size < 0x1000) {\n        if (has_buf && Buffer.isBuffer(file.content)) {\n          file.content.copy(o, o.l, 0, file.size); // o is a 0-filled Buffer so just set next offset\n\n          o.l += file.size + 63 & -64;\n        } else {\n          for (j = 0; j < file.size; ++j) {\n            o.write_shift(1, file.content[j]);\n          }\n\n          for (; j & 0x3F; ++j) {\n            o.write_shift(1, 0);\n          }\n        }\n      }\n    }\n\n    if (has_buf) {\n      o.l = o.length;\n    } else {\n      // When using Buffer, already 0-filled\n      while (o.l < o.length) {\n        o.write_shift(1, 0);\n      }\n    }\n\n    return o;\n  }\n  /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */\n\n\n  function find(cfb, path) {\n    var UCFullPaths = cfb.FullPaths.map(function (x) {\n      return x.toUpperCase();\n    });\n    var UCPaths = UCFullPaths.map(function (x) {\n      var y = x.split(\"/\");\n      return y[y.length - (x.slice(-1) == \"/\" ? 2 : 1)];\n    });\n    var k = false;\n\n    if (path.charCodeAt(0) === 47\n    /* \"/\" */\n    ) {\n      k = true;\n      path = UCFullPaths[0].slice(0, -1) + path;\n    } else k = path.indexOf(\"/\") !== -1;\n\n    var UCPath = path.toUpperCase();\n    var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);\n    if (w !== -1) return cfb.FileIndex[w];\n    var m = !UCPath.match(chr1);\n    UCPath = UCPath.replace(chr0, '');\n    if (m) UCPath = UCPath.replace(chr1, '!');\n\n    for (w = 0; w < UCFullPaths.length; ++w) {\n      if ((m ? UCFullPaths[w].replace(chr1, '!') : UCFullPaths[w]).replace(chr0, '') == UCPath) return cfb.FileIndex[w];\n      if ((m ? UCPaths[w].replace(chr1, '!') : UCPaths[w]).replace(chr0, '') == UCPath) return cfb.FileIndex[w];\n    }\n\n    return null;\n  }\n  /** CFB Constants */\n\n\n  var MSSZ = 64;\n  /* Mini Sector Size = 1<<6 */\n  //var MSCSZ = 4096; /* Mini Stream Cutoff Size */\n\n  /* 2.1 Compound File Sector Numbers and Types */\n\n  var ENDOFCHAIN = -2;\n  /* 2.2 Compound File Header */\n\n  var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';\n  var HEADER_SIG = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1];\n  var HEADER_CLSID = '00000000000000000000000000000000';\n  var consts = {\n    /* 2.1 Compund File Sector Numbers and Types */\n    MAXREGSECT: -6,\n    DIFSECT: -4,\n    FATSECT: -3,\n    ENDOFCHAIN: ENDOFCHAIN,\n    FREESECT: -1,\n\n    /* 2.2 Compound File Header */\n    HEADER_SIGNATURE: HEADER_SIGNATURE,\n    HEADER_MINOR_VERSION: '3e00',\n    MAXREGSID: -6,\n    NOSTREAM: -1,\n    HEADER_CLSID: HEADER_CLSID,\n\n    /* 2.6.1 Compound File Directory Entry */\n    EntryTypes: ['unknown', 'storage', 'stream', 'lockbytes', 'property', 'root']\n  };\n\n  function write_file(cfb, filename, options) {\n    get_fs();\n\n    var o = _write(cfb, options);\n\n    fs.writeFileSync(filename, o);\n  }\n\n  function a2s(o) {\n    var out = new Array(o.length);\n\n    for (var i = 0; i < o.length; ++i) {\n      out[i] = String.fromCharCode(o[i]);\n    }\n\n    return out.join(\"\");\n  }\n\n  function write(cfb, options) {\n    var o = _write(cfb, options);\n\n    switch (options && options.type || \"buffer\") {\n      case \"file\":\n        get_fs();\n        fs.writeFileSync(options.filename, o);\n        return o;\n\n      case \"binary\":\n        return typeof o == \"string\" ? o : a2s(o);\n\n      case \"base64\":\n        return Base64.encode(typeof o == \"string\" ? o : a2s(o));\n\n      case \"buffer\":\n        if (has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);\n\n      /* falls through */\n\n      case \"array\":\n        return typeof o == \"string\" ? s2a(o) : o;\n    }\n\n    return o;\n  }\n  /* node < 8.1 zlib does not expose bytesRead, so default to pure JS */\n\n\n  var _zlib;\n\n  function use_zlib(zlib) {\n    try {\n      var InflateRaw = zlib.InflateRaw;\n      var InflRaw = new InflateRaw();\n\n      InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);\n\n      if (InflRaw.bytesRead) _zlib = zlib;else throw new Error(\"zlib does not expose bytesRead\");\n    } catch (e) {\n      console.error(\"cannot use native zlib: \" + (e.message || e));\n    }\n  }\n\n  function _inflateRawSync(payload, usz) {\n    if (!_zlib) return _inflate(payload, usz);\n    var InflateRaw = _zlib.InflateRaw;\n    var InflRaw = new InflateRaw();\n\n    var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);\n\n    payload.l += InflRaw.bytesRead;\n    return out;\n  }\n\n  function _deflateRawSync(payload) {\n    return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);\n  }\n\n  var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n  /*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */\n\n  var LEN_LN = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];\n  /*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */\n\n  var DST_LN = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];\n\n  function bit_swap_8(n) {\n    var t = (n << 1 | n << 11) & 0x22110 | (n << 5 | n << 15) & 0x88440;\n    return (t >> 16 | t >> 8 | t) & 0xFF;\n  }\n\n  var use_typed_arrays = typeof Uint8Array !== 'undefined';\n  var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];\n\n  for (var q = 0; q < 1 << 8; ++q) {\n    bitswap8[q] = bit_swap_8(q);\n  }\n\n  function bit_swap_n(n, b) {\n    var rev = bitswap8[n & 0xFF];\n    if (b <= 8) return rev >>> 8 - b;\n    rev = rev << 8 | bitswap8[n >> 8 & 0xFF];\n    if (b <= 16) return rev >>> 16 - b;\n    rev = rev << 8 | bitswap8[n >> 16 & 0xFF];\n    return rev >>> 24 - b;\n  }\n  /* helpers for unaligned bit reads */\n\n\n  function read_bits_2(buf, bl) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    return (buf[h] | (w <= 6 ? 0 : buf[h + 1] << 8)) >>> w & 0x03;\n  }\n\n  function read_bits_3(buf, bl) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    return (buf[h] | (w <= 5 ? 0 : buf[h + 1] << 8)) >>> w & 0x07;\n  }\n\n  function read_bits_4(buf, bl) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    return (buf[h] | (w <= 4 ? 0 : buf[h + 1] << 8)) >>> w & 0x0F;\n  }\n\n  function read_bits_5(buf, bl) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    return (buf[h] | (w <= 3 ? 0 : buf[h + 1] << 8)) >>> w & 0x1F;\n  }\n\n  function read_bits_7(buf, bl) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    return (buf[h] | (w <= 1 ? 0 : buf[h + 1] << 8)) >>> w & 0x7F;\n  }\n  /* works up to n = 3 * 8 + 1 = 25 */\n\n\n  function read_bits_n(buf, bl, n) {\n    var w = bl & 7,\n        h = bl >>> 3,\n        f = (1 << n) - 1;\n    var v = buf[h] >>> w;\n    if (n < 8 - w) return v & f;\n    v |= buf[h + 1] << 8 - w;\n    if (n < 16 - w) return v & f;\n    v |= buf[h + 2] << 16 - w;\n    if (n < 24 - w) return v & f;\n    v |= buf[h + 3] << 24 - w;\n    return v & f;\n  }\n  /* helpers for unaligned bit writes */\n\n\n  function write_bits_3(buf, bl, v) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    if (w <= 5) buf[h] |= (v & 7) << w;else {\n      buf[h] |= v << w & 0xFF;\n      buf[h + 1] = (v & 7) >> 8 - w;\n    }\n    return bl + 3;\n  }\n\n  function write_bits_1(buf, bl, v) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    v = (v & 1) << w;\n    buf[h] |= v;\n    return bl + 1;\n  }\n\n  function write_bits_8(buf, bl, v) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    v <<= w;\n    buf[h] |= v & 0xFF;\n    v >>>= 8;\n    buf[h + 1] = v;\n    return bl + 8;\n  }\n\n  function write_bits_16(buf, bl, v) {\n    var w = bl & 7,\n        h = bl >>> 3;\n    v <<= w;\n    buf[h] |= v & 0xFF;\n    v >>>= 8;\n    buf[h + 1] = v & 0xFF;\n    buf[h + 2] = v >>> 8;\n    return bl + 16;\n  }\n  /* until ArrayBuffer#realloc is a thing, fake a realloc */\n\n\n  function realloc(b, sz) {\n    var L = b.length,\n        M = 2 * L > sz ? 2 * L : sz + 5,\n        i = 0;\n    if (L >= sz) return b;\n\n    if (has_buf) {\n      var o = new_unsafe_buf(M); // $FlowIgnore\n\n      if (b.copy) b.copy(o);else for (; i < b.length; ++i) {\n        o[i] = b[i];\n      }\n      return o;\n    } else if (use_typed_arrays) {\n      var a = new Uint8Array(M);\n      if (a.set) a.set(b);else for (; i < L; ++i) {\n        a[i] = b[i];\n      }\n      return a;\n    }\n\n    b.length = M;\n    return b;\n  }\n  /* zero-filled arrays for older browsers */\n\n\n  function zero_fill_array(n) {\n    var o = new Array(n);\n\n    for (var i = 0; i < n; ++i) {\n      o[i] = 0;\n    }\n\n    return o;\n  }\n  /* build tree (used for literals and lengths) */\n\n\n  function build_tree(clens, cmap, MAX) {\n    var maxlen = 1,\n        w = 0,\n        i = 0,\n        j = 0,\n        ccode = 0,\n        L = clens.length;\n    var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);\n\n    for (i = 0; i < 32; ++i) {\n      bl_count[i] = 0;\n    }\n\n    for (i = L; i < MAX; ++i) {\n      clens[i] = 0;\n    }\n\n    L = clens.length;\n    var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []\n\n    /* build code tree */\n\n    for (i = 0; i < L; ++i) {\n      bl_count[w = clens[i]]++;\n      if (maxlen < w) maxlen = w;\n      ctree[i] = 0;\n    }\n\n    bl_count[0] = 0;\n\n    for (i = 1; i <= maxlen; ++i) {\n      bl_count[i + 16] = ccode = ccode + bl_count[i - 1] << 1;\n    }\n\n    for (i = 0; i < L; ++i) {\n      ccode = clens[i];\n      if (ccode != 0) ctree[i] = bl_count[ccode + 16]++;\n    }\n    /* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */\n\n\n    var cleni = 0;\n\n    for (i = 0; i < L; ++i) {\n      cleni = clens[i];\n\n      if (cleni != 0) {\n        ccode = bit_swap_n(ctree[i], maxlen) >> maxlen - cleni;\n\n        for (j = (1 << maxlen + 4 - cleni) - 1; j >= 0; --j) {\n          cmap[ccode | j << cleni] = cleni & 15 | i << 4;\n        }\n      }\n    }\n\n    return maxlen;\n  }\n  /* Fixed Huffman */\n\n\n  var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);\n  var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);\n\n  if (!use_typed_arrays) {\n    for (var i = 0; i < 512; ++i) {\n      fix_lmap[i] = 0;\n    }\n\n    for (i = 0; i < 32; ++i) {\n      fix_dmap[i] = 0;\n    }\n  }\n\n  (function () {\n    var dlens = [];\n    var i = 0;\n\n    for (; i < 32; i++) {\n      dlens.push(5);\n    }\n\n    build_tree(dlens, fix_dmap, 32);\n    var clens = [];\n    i = 0;\n\n    for (; i <= 143; i++) {\n      clens.push(8);\n    }\n\n    for (; i <= 255; i++) {\n      clens.push(9);\n    }\n\n    for (; i <= 279; i++) {\n      clens.push(7);\n    }\n\n    for (; i <= 287; i++) {\n      clens.push(8);\n    }\n\n    build_tree(clens, fix_lmap, 288);\n  })();\n\n  var _deflateRaw = function () {\n    var DST_LN_RE = use_typed_arrays ? new Uint8Array(0x8000) : [];\n\n    for (var j = 0, k = 0; j < DST_LN.length; ++j) {\n      for (; k < DST_LN[j + 1]; ++k) {\n        DST_LN_RE[k] = j;\n      }\n    }\n\n    for (; k < 32768; ++k) {\n      DST_LN_RE[k] = 29;\n    }\n\n    var LEN_LN_RE = use_typed_arrays ? new Uint8Array(0x102) : [];\n\n    for (j = 0, k = 0; j < LEN_LN.length; ++j) {\n      for (; k < LEN_LN[j + 1]; ++k) {\n        LEN_LN_RE[k] = j;\n      }\n    }\n\n    function write_stored(data, out) {\n      var boff = 0;\n\n      while (boff < data.length) {\n        var L = Math.min(0xFFFF, data.length - boff);\n        var h = boff + L == data.length;\n        out.write_shift(1, +h);\n        out.write_shift(2, L);\n        out.write_shift(2, ~L & 0xFFFF);\n\n        while (L-- > 0) {\n          out[out.l++] = data[boff++];\n        }\n      }\n\n      return out.l;\n    }\n    /* Fixed Huffman */\n\n\n    function write_huff_fixed(data, out) {\n      var bl = 0;\n      var boff = 0;\n      var addrs = use_typed_arrays ? new Uint16Array(0x8000) : [];\n\n      while (boff < data.length) {\n        var L =\n        /* data.length - boff; */\n        Math.min(0xFFFF, data.length - boff);\n        /* write a stored block for short data */\n\n        if (L < 10) {\n          bl = write_bits_3(out, bl, +!!(boff + L == data.length)); // jshint ignore:line\n\n          if (bl & 7) bl += 8 - (bl & 7);\n          out.l = bl / 8 | 0;\n          out.write_shift(2, L);\n          out.write_shift(2, ~L & 0xFFFF);\n\n          while (L-- > 0) {\n            out[out.l++] = data[boff++];\n          }\n\n          bl = out.l * 8;\n          continue;\n        }\n\n        bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2); // jshint ignore:line\n\n        var hash = 0;\n\n        while (L-- > 0) {\n          var d = data[boff];\n          hash = (hash << 5 ^ d) & 0x7FFF;\n          var match = -1,\n              mlen = 0;\n\n          if (match = addrs[hash]) {\n            match |= boff & ~0x7FFF;\n            if (match > boff) match -= 0x8000;\n            if (match < boff) while (data[match + mlen] == data[boff + mlen] && mlen < 250) {\n              ++mlen;\n            }\n          }\n\n          if (mlen > 2) {\n            /* Copy Token  */\n            d = LEN_LN_RE[mlen];\n            if (d <= 22) bl = write_bits_8(out, bl, bitswap8[d + 1] >> 1) - 1;else {\n              write_bits_8(out, bl, 3);\n              bl += 5;\n              write_bits_8(out, bl, bitswap8[d - 23] >> 5);\n              bl += 3;\n            }\n            var len_eb = d < 8 ? 0 : d - 4 >> 2;\n\n            if (len_eb > 0) {\n              write_bits_16(out, bl, mlen - LEN_LN[d]);\n              bl += len_eb;\n            }\n\n            d = DST_LN_RE[boff - match];\n            bl = write_bits_8(out, bl, bitswap8[d] >> 3);\n            bl -= 3;\n            var dst_eb = d < 4 ? 0 : d - 2 >> 1;\n\n            if (dst_eb > 0) {\n              write_bits_16(out, bl, boff - match - DST_LN[d]);\n              bl += dst_eb;\n            }\n\n            for (var q = 0; q < mlen; ++q) {\n              addrs[hash] = boff & 0x7FFF;\n              hash = (hash << 5 ^ data[boff]) & 0x7FFF;\n              ++boff;\n            }\n\n            L -= mlen - 1;\n          } else {\n            /* Literal Token */\n            if (d <= 143) d = d + 48;else bl = write_bits_1(out, bl, 1);\n            bl = write_bits_8(out, bl, bitswap8[d]);\n            addrs[hash] = boff & 0x7FFF;\n            ++boff;\n          }\n        }\n\n        bl = write_bits_8(out, bl, 0) - 1;\n      }\n\n      out.l = (bl + 7) / 8 | 0;\n      return out.l;\n    }\n\n    return function _deflateRaw(data, out) {\n      if (data.length < 8) return write_stored(data, out);\n      return write_huff_fixed(data, out);\n    };\n  }();\n\n  function _deflate(data) {\n    var buf = new_buf(50 + Math.floor(data.length * 1.1));\n\n    var off = _deflateRaw(data, buf);\n\n    return buf.slice(0, off);\n  }\n  /* modified inflate function also moves original read head */\n\n\n  var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\n  var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\n  var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);\n  var dyn_len_1 = 1,\n      dyn_len_2 = 1;\n  /* 5.5.3 Expanding Huffman Codes */\n\n  function dyn(data, boff) {\n    /* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */\n    var _HLIT = read_bits_5(data, boff) + 257;\n\n    boff += 5;\n\n    var _HDIST = read_bits_5(data, boff) + 1;\n\n    boff += 5;\n\n    var _HCLEN = read_bits_4(data, boff) + 4;\n\n    boff += 4;\n    var w = 0;\n    /* grab and store code lengths */\n\n    var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);\n    var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    var maxlen = 1;\n    var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n    var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n    var L = clens.length;\n    /* 19 */\n\n    for (var i = 0; i < _HCLEN; ++i) {\n      clens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);\n      if (maxlen < w) maxlen = w;\n      bl_count[w]++;\n      boff += 3;\n    }\n    /* build code tree */\n\n\n    var ccode = 0;\n    bl_count[0] = 0;\n\n    for (i = 1; i <= maxlen; ++i) {\n      next_code[i] = ccode = ccode + bl_count[i - 1] << 1;\n    }\n\n    for (i = 0; i < L; ++i) {\n      if ((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;\n    }\n    /* cmap[7 bits from stream] = (off&7) + (lit<<3) */\n\n\n    var cleni = 0;\n\n    for (i = 0; i < L; ++i) {\n      cleni = clens[i];\n\n      if (cleni != 0) {\n        ccode = bitswap8[ctree[i]] >> 8 - cleni;\n\n        for (var j = (1 << 7 - cleni) - 1; j >= 0; --j) {\n          dyn_cmap[ccode | j << cleni] = cleni & 7 | i << 3;\n        }\n      }\n    }\n    /* read literal and dist codes at once */\n\n\n    var hcodes = [];\n    maxlen = 1;\n\n    for (; hcodes.length < _HLIT + _HDIST;) {\n      ccode = dyn_cmap[read_bits_7(data, boff)];\n      boff += ccode & 7;\n\n      switch (ccode >>>= 3) {\n        case 16:\n          w = 3 + read_bits_2(data, boff);\n          boff += 2;\n          ccode = hcodes[hcodes.length - 1];\n\n          while (w-- > 0) {\n            hcodes.push(ccode);\n          }\n\n          break;\n\n        case 17:\n          w = 3 + read_bits_3(data, boff);\n          boff += 3;\n\n          while (w-- > 0) {\n            hcodes.push(0);\n          }\n\n          break;\n\n        case 18:\n          w = 11 + read_bits_7(data, boff);\n          boff += 7;\n\n          while (w-- > 0) {\n            hcodes.push(0);\n          }\n\n          break;\n\n        default:\n          hcodes.push(ccode);\n          if (maxlen < ccode) maxlen = ccode;\n          break;\n      }\n    }\n    /* build literal / length trees */\n\n\n    var h1 = hcodes.slice(0, _HLIT),\n        h2 = hcodes.slice(_HLIT);\n\n    for (i = _HLIT; i < 286; ++i) {\n      h1[i] = 0;\n    }\n\n    for (i = _HDIST; i < 30; ++i) {\n      h2[i] = 0;\n    }\n\n    dyn_len_1 = build_tree(h1, dyn_lmap, 286);\n    dyn_len_2 = build_tree(h2, dyn_dmap, 30);\n    return boff;\n  }\n  /* return [ data, bytesRead ] */\n\n\n  function inflate(data, usz) {\n    /* shortcircuit for empty buffer [0x03, 0x00] */\n    if (data[0] == 3 && !(data[1] & 0x3)) {\n      return [new_raw_buf(usz), 2];\n    }\n    /* bit offset */\n\n\n    var boff = 0;\n    /* header includes final bit and type bits */\n\n    var header = 0;\n    var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);\n    var woff = 0;\n    var OL = outbuf.length >>> 0;\n    var max_len_1 = 0,\n        max_len_2 = 0;\n\n    while ((header & 1) == 0) {\n      header = read_bits_3(data, boff);\n      boff += 3;\n\n      if (header >>> 1 == 0) {\n        /* Stored block */\n        if (boff & 7) boff += 8 - (boff & 7);\n        /* 2 bytes sz, 2 bytes bit inverse */\n\n        var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;\n        boff += 32;\n        /* push sz bytes */\n\n        if (!usz && OL < woff + sz) {\n          outbuf = realloc(outbuf, woff + sz);\n          OL = outbuf.length;\n        }\n\n        if (typeof data.copy === 'function') {\n          // $FlowIgnore\n          data.copy(outbuf, woff, boff >>> 3, (boff >>> 3) + sz);\n          woff += sz;\n          boff += 8 * sz;\n        } else while (sz-- > 0) {\n          outbuf[woff++] = data[boff >>> 3];\n          boff += 8;\n        }\n\n        continue;\n      } else if (header >>> 1 == 1) {\n        /* Fixed Huffman */\n        max_len_1 = 9;\n        max_len_2 = 5;\n      } else {\n        /* Dynamic Huffman */\n        boff = dyn(data, boff);\n        max_len_1 = dyn_len_1;\n        max_len_2 = dyn_len_2;\n      }\n\n      for (;;) {\n        // while(true) is apparently out of vogue in modern JS circles\n        if (!usz && OL < woff + 32767) {\n          outbuf = realloc(outbuf, woff + 32767);\n          OL = outbuf.length;\n        }\n        /* ingest code and move read head */\n\n\n        var bits = read_bits_n(data, boff, max_len_1);\n        var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];\n        boff += code & 15;\n        code >>>= 4;\n        /* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */\n\n        if ((code >>> 8 & 0xFF) === 0) outbuf[woff++] = code;else if (code == 256) break;else {\n          code -= 257;\n          var len_eb = code < 8 ? 0 : code - 4 >> 2;\n          if (len_eb > 5) len_eb = 0;\n          var tgt = woff + LEN_LN[code];\n          /* length extra bits */\n\n          if (len_eb > 0) {\n            tgt += read_bits_n(data, boff, len_eb);\n            boff += len_eb;\n          }\n          /* dist code */\n\n\n          bits = read_bits_n(data, boff, max_len_2);\n          code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];\n          boff += code & 15;\n          code >>>= 4;\n          var dst_eb = code < 4 ? 0 : code - 2 >> 1;\n          var dst = DST_LN[code];\n          /* dist extra bits */\n\n          if (dst_eb > 0) {\n            dst += read_bits_n(data, boff, dst_eb);\n            boff += dst_eb;\n          }\n          /* in the common case, manual byte copy is faster than TA set / Buffer copy */\n\n\n          if (!usz && OL < tgt) {\n            outbuf = realloc(outbuf, tgt + 100);\n            OL = outbuf.length;\n          }\n\n          while (woff < tgt) {\n            outbuf[woff] = outbuf[woff - dst];\n            ++woff;\n          }\n        }\n      }\n    }\n\n    return [usz ? outbuf : outbuf.slice(0, woff), boff + 7 >>> 3];\n  }\n\n  function _inflate(payload, usz) {\n    var data = payload.slice(payload.l || 0);\n    var out = inflate(data, usz);\n    payload.l += out[1];\n    return out[0];\n  }\n\n  function warn_or_throw(wrn, msg) {\n    if (wrn) {\n      if (typeof console !== 'undefined') console.error(msg);\n    } else throw new Error(msg);\n  }\n\n  function parse_zip(file, options) {\n    var blob = file;\n    prep_blob(blob, 0);\n    var FileIndex = [],\n        FullPaths = [];\n    var o = {\n      FileIndex: FileIndex,\n      FullPaths: FullPaths\n    };\n    init_cfb(o, {\n      root: options.root\n    });\n    /* find end of central directory, start just after signature */\n\n    var i = blob.length - 4;\n\n    while ((blob[i] != 0x50 || blob[i + 1] != 0x4b || blob[i + 2] != 0x05 || blob[i + 3] != 0x06) && i >= 0) {\n      --i;\n    }\n\n    blob.l = i + 4;\n    /* parse end of central directory */\n\n    blob.l += 4;\n    var fcnt = blob.read_shift(2);\n    blob.l += 6;\n    var start_cd = blob.read_shift(4);\n    /* parse central directory */\n\n    blob.l = start_cd;\n\n    for (i = 0; i < fcnt; ++i) {\n      /* trust local file header instead of CD entry */\n      blob.l += 20;\n      var csz = blob.read_shift(4);\n      var usz = blob.read_shift(4);\n      var namelen = blob.read_shift(2);\n      var efsz = blob.read_shift(2);\n      var fcsz = blob.read_shift(2);\n      blob.l += 8;\n      var offset = blob.read_shift(4);\n      var EF = parse_extra_field(blob.slice(blob.l + namelen, blob.l + namelen + efsz));\n      blob.l += namelen + efsz + fcsz;\n      var L = blob.l;\n      blob.l = offset + 4;\n      parse_local_file(blob, csz, usz, o, EF);\n      blob.l = L;\n    }\n\n    return o;\n  }\n  /* head starts just after local file header signature */\n\n\n  function parse_local_file(blob, csz, usz, o, EF) {\n    /* [local file header] */\n    blob.l += 2;\n    var flags = blob.read_shift(2);\n    var meth = blob.read_shift(2);\n    var date = parse_dos_date(blob);\n    if (flags & 0x2041) throw new Error(\"Unsupported ZIP encryption\");\n    var crc32 = blob.read_shift(4);\n\n    var _csz = blob.read_shift(4);\n\n    var _usz = blob.read_shift(4);\n\n    var namelen = blob.read_shift(2);\n    var efsz = blob.read_shift(2); // TODO: flags & (1<<11) // UTF8\n\n    var name = \"\";\n\n    for (var i = 0; i < namelen; ++i) {\n      name += String.fromCharCode(blob[blob.l++]);\n    }\n\n    if (efsz) {\n      var ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));\n      if ((ef[0x5455] || {}).mt) date = ef[0x5455].mt;\n      if (((EF || {})[0x5455] || {}).mt) date = EF[0x5455].mt;\n    }\n\n    blob.l += efsz;\n    /* [encryption header] */\n\n    /* [file data] */\n\n    var data = blob.slice(blob.l, blob.l + _csz);\n\n    switch (meth) {\n      case 8:\n        data = _inflateRawSync(blob, _usz);\n        break;\n\n      case 0:\n        break;\n      // TODO: scan for magic number\n\n      default:\n        throw new Error(\"Unsupported ZIP Compression method \" + meth);\n    }\n    /* [data descriptor] */\n\n\n    var wrn = false;\n\n    if (flags & 8) {\n      crc32 = blob.read_shift(4);\n\n      if (crc32 == 0x08074b50) {\n        crc32 = blob.read_shift(4);\n        wrn = true;\n      }\n\n      _csz = blob.read_shift(4);\n      _usz = blob.read_shift(4);\n    }\n\n    if (_csz != csz) warn_or_throw(wrn, \"Bad compressed size: \" + csz + \" != \" + _csz);\n    if (_usz != usz) warn_or_throw(wrn, \"Bad uncompressed size: \" + usz + \" != \" + _usz);\n\n    var _crc32 = CRC32.buf(data, 0);\n\n    if (crc32 >> 0 != _crc32 >> 0) warn_or_throw(wrn, \"Bad CRC32 checksum: \" + crc32 + \" != \" + _crc32);\n    cfb_add(o, name, data, {\n      unsafe: true,\n      mt: date\n    });\n  }\n\n  function write_zip(cfb, options) {\n    var _opts = options || {};\n\n    var out = [],\n        cdirs = [];\n    var o = new_buf(1);\n    var method = _opts.compression ? 8 : 0,\n        flags = 0;\n    var desc = false;\n    if (desc) flags |= 8;\n    var i = 0,\n        j = 0;\n    var start_cd = 0,\n        fcnt = 0;\n    var root = cfb.FullPaths[0],\n        fp = root,\n        fi = cfb.FileIndex[0];\n    var crcs = [];\n    var sz_cd = 0;\n\n    for (i = 1; i < cfb.FullPaths.length; ++i) {\n      fp = cfb.FullPaths[i].slice(root.length);\n      fi = cfb.FileIndex[i];\n      if (!fi.size || !fi.content || fp == \"\\x01Sh33tJ5\") continue;\n      var start = start_cd;\n      /* TODO: CP437 filename */\n\n      var namebuf = new_buf(fp.length);\n\n      for (j = 0; j < fp.length; ++j) {\n        namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);\n      }\n\n      namebuf = namebuf.slice(0, namebuf.l);\n      crcs[fcnt] = CRC32.buf(fi.content, 0);\n      var outbuf = fi.content;\n      if (method == 8) outbuf = _deflateRawSync(outbuf);\n      /* local file header */\n\n      o = new_buf(30);\n      o.write_shift(4, 0x04034b50);\n      o.write_shift(2, 20);\n      o.write_shift(2, flags);\n      o.write_shift(2, method);\n      /* TODO: last mod file time/date */\n\n      if (fi.mt) write_dos_date(o, fi.mt);else o.write_shift(4, 0);\n      o.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);\n      o.write_shift(4, flags & 8 ? 0 : outbuf.length);\n      o.write_shift(4, flags & 8 ? 0 : fi.content.length);\n      o.write_shift(2, namebuf.length);\n      o.write_shift(2, 0);\n      start_cd += o.length;\n      out.push(o);\n      start_cd += namebuf.length;\n      out.push(namebuf);\n      /* TODO: extra fields? */\n\n      /* TODO: encryption header ? */\n\n      start_cd += outbuf.length;\n      out.push(outbuf);\n      /* data descriptor */\n\n      if (flags & 8) {\n        o = new_buf(12);\n        o.write_shift(-4, crcs[fcnt]);\n        o.write_shift(4, outbuf.length);\n        o.write_shift(4, fi.content.length);\n        start_cd += o.l;\n        out.push(o);\n      }\n      /* central directory */\n\n\n      o = new_buf(46);\n      o.write_shift(4, 0x02014b50);\n      o.write_shift(2, 0);\n      o.write_shift(2, 20);\n      o.write_shift(2, flags);\n      o.write_shift(2, method);\n      o.write_shift(4, 0);\n      /* TODO: last mod file time/date */\n\n      o.write_shift(-4, crcs[fcnt]);\n      o.write_shift(4, outbuf.length);\n      o.write_shift(4, fi.content.length);\n      o.write_shift(2, namebuf.length);\n      o.write_shift(2, 0);\n      o.write_shift(2, 0);\n      o.write_shift(2, 0);\n      o.write_shift(2, 0);\n      o.write_shift(4, 0);\n      o.write_shift(4, start);\n      sz_cd += o.l;\n      cdirs.push(o);\n      sz_cd += namebuf.length;\n      cdirs.push(namebuf);\n      ++fcnt;\n    }\n    /* end of central directory */\n\n\n    o = new_buf(22);\n    o.write_shift(4, 0x06054b50);\n    o.write_shift(2, 0);\n    o.write_shift(2, 0);\n    o.write_shift(2, fcnt);\n    o.write_shift(2, fcnt);\n    o.write_shift(4, sz_cd);\n    o.write_shift(4, start_cd);\n    o.write_shift(2, 0);\n    return bconcat([bconcat(out), bconcat(cdirs), o]);\n  }\n\n  var ContentTypeMap = {\n    \"htm\": \"text/html\",\n    \"xml\": \"text/xml\",\n    \"gif\": \"image/gif\",\n    \"jpg\": \"image/jpeg\",\n    \"png\": \"image/png\",\n    \"mso\": \"application/x-mso\",\n    \"thmx\": \"application/vnd.ms-officetheme\",\n    \"sh33tj5\": \"application/octet-stream\"\n  };\n\n  function get_content_type(fi, fp) {\n    if (fi.ctype) return fi.ctype;\n    var ext = fi.name || \"\",\n        m = ext.match(/\\.([^\\.]+)$/);\n    if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n\n    if (fp) {\n      m = (ext = fp).match(/[\\.\\\\]([^\\.\\\\])+$/);\n      if (m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n    }\n\n    return \"application/octet-stream\";\n  }\n  /* 76 character chunks TODO: intertwine encoding */\n\n\n  function write_base64_76(bstr) {\n    var data = Base64.encode(bstr);\n    var o = [];\n\n    for (var i = 0; i < data.length; i += 76) {\n      o.push(data.slice(i, i + 76));\n    }\n\n    return o.join(\"\\r\\n\") + \"\\r\\n\";\n  }\n  /*\n  Rules for QP:\n  \t- escape =## applies for all non-display characters and literal \"=\"\n  \t- space or tab at end of line must be encoded\n  \t- \\r\\n newlines can be preserved, but bare \\r and \\n must be escaped\n  \t- lines must not exceed 76 characters, use soft breaks =\\r\\n\n  \n  TODO: Some files from word appear to write line extensions with bare equals:\n  \n  ```\n  <table class=3DMsoTableGrid border=3D1 cellspacing=3D0 cellpadding=3D0 width=\n  =\"70%\"\n  ```\n  */\n\n\n  function write_quoted_printable(text) {\n    var encoded = text.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF=]/g, function (c) {\n      var w = c.charCodeAt(0).toString(16).toUpperCase();\n      return \"=\" + (w.length == 1 ? \"0\" + w : w);\n    });\n    encoded = encoded.replace(/ $/mg, \"=20\").replace(/\\t$/mg, \"=09\");\n    if (encoded.charAt(0) == \"\\n\") encoded = \"=0D\" + encoded.slice(1);\n    encoded = encoded.replace(/\\r(?!\\n)/mg, \"=0D\").replace(/\\n\\n/mg, \"\\n=0A\").replace(/([^\\r\\n])\\n/mg, \"$1=0A\");\n    var o = [],\n        split = encoded.split(\"\\r\\n\");\n\n    for (var si = 0; si < split.length; ++si) {\n      var str = split[si];\n\n      if (str.length == 0) {\n        o.push(\"\");\n        continue;\n      }\n\n      for (var i = 0; i < str.length;) {\n        var end = 76;\n        var tmp = str.slice(i, i + end);\n        if (tmp.charAt(end - 1) == \"=\") end--;else if (tmp.charAt(end - 2) == \"=\") end -= 2;else if (tmp.charAt(end - 3) == \"=\") end -= 3;\n        tmp = str.slice(i, i + end);\n        i += end;\n        if (i < str.length) tmp += \"=\";\n        o.push(tmp);\n      }\n    }\n\n    return o.join(\"\\r\\n\");\n  }\n\n  function parse_quoted_printable(data) {\n    var o = [];\n    /* unify long lines */\n\n    for (var di = 0; di < data.length; ++di) {\n      var line = data[di];\n\n      while (di <= data.length && line.charAt(line.length - 1) == \"=\") {\n        line = line.slice(0, line.length - 1) + data[++di];\n      }\n\n      o.push(line);\n    }\n    /* decode */\n\n\n    for (var oi = 0; oi < o.length; ++oi) {\n      o[oi] = o[oi].replace(/=[0-9A-Fa-f]{2}/g, function ($$) {\n        return String.fromCharCode(parseInt($$.slice(1), 16));\n      });\n    }\n\n    return s2a(o.join(\"\\r\\n\"));\n  }\n\n  function parse_mime(cfb, data, root) {\n    var fname = \"\",\n        cte = \"\",\n        ctype = \"\",\n        fdata;\n    var di = 0;\n\n    for (; di < 10; ++di) {\n      var line = data[di];\n      if (!line || line.match(/^\\s*$/)) break;\n      var m = line.match(/^(.*?):\\s*([^\\s].*)$/);\n      if (m) switch (m[1].toLowerCase()) {\n        case \"content-location\":\n          fname = m[2].trim();\n          break;\n\n        case \"content-type\":\n          ctype = m[2].trim();\n          break;\n\n        case \"content-transfer-encoding\":\n          cte = m[2].trim();\n          break;\n      }\n    }\n\n    ++di;\n\n    switch (cte.toLowerCase()) {\n      case 'base64':\n        fdata = s2a(Base64.decode(data.slice(di).join(\"\")));\n        break;\n\n      case 'quoted-printable':\n        fdata = parse_quoted_printable(data.slice(di));\n        break;\n\n      default:\n        throw new Error(\"Unsupported Content-Transfer-Encoding \" + cte);\n    }\n\n    var file = cfb_add(cfb, fname.slice(root.length), fdata, {\n      unsafe: true\n    });\n    if (ctype) file.ctype = ctype;\n  }\n\n  function parse_mad(file, options) {\n    if (a2s(file.slice(0, 13)).toLowerCase() != \"mime-version:\") throw new Error(\"Unsupported MAD header\");\n    var root = options && options.root || \"\"; // $FlowIgnore\n\n    var data = (has_buf && Buffer.isBuffer(file) ? file.toString(\"binary\") : a2s(file)).split(\"\\r\\n\");\n    var di = 0,\n        row = \"\";\n    /* if root is not specified, scan for the common prefix */\n\n    for (di = 0; di < data.length; ++di) {\n      row = data[di];\n      if (!/^Content-Location:/i.test(row)) continue;\n      row = row.slice(row.indexOf(\"file\"));\n      if (!root) root = row.slice(0, row.lastIndexOf(\"/\") + 1);\n      if (row.slice(0, root.length) == root) continue;\n\n      while (root.length > 0) {\n        root = root.slice(0, root.length - 1);\n        root = root.slice(0, root.lastIndexOf(\"/\") + 1);\n        if (row.slice(0, root.length) == root) break;\n      }\n    }\n\n    var mboundary = (data[1] || \"\").match(/boundary=\"(.*?)\"/);\n    if (!mboundary) throw new Error(\"MAD cannot find boundary\");\n    var boundary = \"--\" + (mboundary[1] || \"\");\n    var FileIndex = [],\n        FullPaths = [];\n    var o = {\n      FileIndex: FileIndex,\n      FullPaths: FullPaths\n    };\n    init_cfb(o);\n    var start_di,\n        fcnt = 0;\n\n    for (di = 0; di < data.length; ++di) {\n      var line = data[di];\n      if (line !== boundary && line !== boundary + \"--\") continue;\n      if (fcnt++) parse_mime(o, data.slice(start_di, di), root);\n      start_di = di;\n    }\n\n    return o;\n  }\n\n  function write_mad(cfb, options) {\n    var opts = options || {};\n    var boundary = opts.boundary || \"SheetJS\";\n    boundary = '------=' + boundary;\n    var out = ['MIME-Version: 1.0', 'Content-Type: multipart/related; boundary=\"' + boundary.slice(2) + '\"', '', '', ''];\n    var root = cfb.FullPaths[0],\n        fp = root,\n        fi = cfb.FileIndex[0];\n\n    for (var i = 1; i < cfb.FullPaths.length; ++i) {\n      fp = cfb.FullPaths[i].slice(root.length);\n      fi = cfb.FileIndex[i];\n      if (!fi.size || !fi.content || fp == \"\\x01Sh33tJ5\") continue;\n      /* Normalize filename */\n\n      fp = fp.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF]/g, function (c) {\n        return \"_x\" + c.charCodeAt(0).toString(16) + \"_\";\n      }).replace(/[\\u0080-\\uFFFF]/g, function (u) {\n        return \"_u\" + u.charCodeAt(0).toString(16) + \"_\";\n      });\n      /* Extract content as binary string */\n\n      var ca = fi.content; // $FlowIgnore\n\n      var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString(\"binary\") : a2s(ca);\n      /* 4/5 of first 1024 chars ascii -> quoted printable, else base64 */\n\n      var dispcnt = 0,\n          L = Math.min(1024, cstr.length),\n          cc = 0;\n\n      for (var csl = 0; csl <= L; ++csl) {\n        if ((cc = cstr.charCodeAt(csl)) >= 0x20 && cc < 0x80) ++dispcnt;\n      }\n\n      var qp = dispcnt >= L * 4 / 5;\n      out.push(boundary);\n      out.push('Content-Location: ' + (opts.root || 'file:///C:/SheetJS/') + fp);\n      out.push('Content-Transfer-Encoding: ' + (qp ? 'quoted-printable' : 'base64'));\n      out.push('Content-Type: ' + get_content_type(fi, fp));\n      out.push('');\n      out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));\n    }\n\n    out.push(boundary + '--\\r\\n');\n    return out.join(\"\\r\\n\");\n  }\n\n  function cfb_new(opts) {\n    var o = {};\n    init_cfb(o, opts);\n    return o;\n  }\n\n  function cfb_add(cfb, name, content, opts) {\n    var unsafe = opts && opts.unsafe;\n    if (!unsafe) init_cfb(cfb);\n    var file = !unsafe && CFB.find(cfb, name);\n\n    if (!file) {\n      var fpath = cfb.FullPaths[0];\n      if (name.slice(0, fpath.length) == fpath) fpath = name;else {\n        if (fpath.slice(-1) != \"/\") fpath += \"/\";\n        fpath = (fpath + name).replace(\"//\", \"/\");\n      }\n      file = {\n        name: filename(name),\n        type: 2\n      };\n      cfb.FileIndex.push(file);\n      cfb.FullPaths.push(fpath);\n      if (!unsafe) CFB.utils.cfb_gc(cfb);\n    }\n\n    file.content = content;\n    file.size = content ? content.length : 0;\n\n    if (opts) {\n      if (opts.CLSID) file.clsid = opts.CLSID;\n      if (opts.mt) file.mt = opts.mt;\n      if (opts.ct) file.ct = opts.ct;\n    }\n\n    return file;\n  }\n\n  function cfb_del(cfb, name) {\n    init_cfb(cfb);\n    var file = CFB.find(cfb, name);\n    if (file) for (var j = 0; j < cfb.FileIndex.length; ++j) {\n      if (cfb.FileIndex[j] == file) {\n        cfb.FileIndex.splice(j, 1);\n        cfb.FullPaths.splice(j, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function cfb_mov(cfb, old_name, new_name) {\n    init_cfb(cfb);\n    var file = CFB.find(cfb, old_name);\n    if (file) for (var j = 0; j < cfb.FileIndex.length; ++j) {\n      if (cfb.FileIndex[j] == file) {\n        cfb.FileIndex[j].name = filename(new_name);\n        cfb.FullPaths[j] = new_name;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function cfb_gc(cfb) {\n    rebuild_cfb(cfb, true);\n  }\n\n  exports.find = find;\n  exports.read = read;\n  exports.parse = parse;\n  exports.write = write;\n  exports.writeFile = write_file;\n  exports.utils = {\n    cfb_new: cfb_new,\n    cfb_add: cfb_add,\n    cfb_del: cfb_del,\n    cfb_mov: cfb_mov,\n    cfb_gc: cfb_gc,\n    ReadShift: ReadShift,\n    CheckField: CheckField,\n    prep_blob: prep_blob,\n    bconcat: bconcat,\n    use_zlib: use_zlib,\n    _deflateRaw: _deflate,\n    _inflateRaw: _inflate,\n    consts: consts\n  };\n  return exports;\n}();\n\nif (typeof require !== 'undefined' && typeof module !== 'undefined' && typeof DO_NOT_EXPORT_CFB === 'undefined') {\n  module.exports = CFB;\n}","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/cfb/cfb.js"],"names":["Base64","make_b64","map","encode","input","o","c1","c2","c3","e1","e2","e3","e4","i","length","charCodeAt","isNaN","charAt","decode","b64_decode","replace","indexOf","String","fromCharCode","has_buf","Buffer","process","versions","node","Buffer_from","nbfs","from","e","buf","enc","bind","alloc","n","b","fill","allocUnsafe","new_raw_buf","len","Array","new_unsafe_buf","s2a","s","split","x","chr0","chr1","__toBuffer","bufs","push","apply","___toBuffer","__utf16le","ss","__readUInt16LE","join","___utf16le","__hexlify","l","toString","slice","___hexlify","__bconcat","isArray","concat","maxlen","Uint8Array","set","bconcat","isBuffer","__readUInt8","idx","__readInt16LE","u","__readUInt32LE","__readInt32LE","ReadShift","size","t","oI","oS","type","__writeUInt32LE","val","__writeInt32LE","WriteShift","f","parseInt","end","Math","min","cc","CheckField","hexstr","fld","m","Error","prep_blob","blob","pos","read_shift","chk","write_shift","new_buf","sz","CRC32","factory","version","signed_crc_table","c","table","Int32Array","T","crc32_bstr","bstr","seed","C","L","crc32_buf","crc32_buf_8","crc32_str","str","d","CFB","_CFB","exports","namecmp","r","R","Z","dirname","p","lastIndexOf","filename","write_dos_date","date","Date","hms","getHours","getMinutes","getSeconds","ymd","getFullYear","getMonth","getDate","parse_dos_date","setMilliseconds","setFullYear","setMonth","setDate","S","M","setHours","setMinutes","setSeconds","parse_extra_field","flags","tgt","mtime","atime","ctime","mt","fs","get_fs","require","parse","file","options","parse_zip","parse_mad","mver","ssz","nmfs","difat_sec_cnt","dir_start","minifat_start","difat_start","fat_addrs","mv","check_get_mver","header","check_shifts","dir_cnt","q","j","sectors","sectorify","sleuth_fat","sector_list","make_sector_list","name","ENDOFCHAIN","files","Paths","FileIndex","FullPaths","read_directory","build_full_paths","shift","raw","HEADER_SIGNATURE","nsectors","ceil","FI","FP","pl","dad","get_mfat_entry","entry","payload","mini","start","MSSZ","cnt","sector","get_sector_list","chkd","buf_chain","modulus","jj","addr","floor","nodes","data","sl","k","seen","minifat_store","namelen","color","clsid","state","ct","read_date","storage","undefined","content","offset","pow","read_file","readFileSync","read","init_cfb","cfb","opts","root","CLSID","seed_cfb","nm","find","rebuild_cfb","gc","_file","pop","now","fullPaths","Object","create","HEADER_CLSID","sort","y","elt","_write","_opts","fileType","write_mad","write_zip","mini_size","fat_size","flen","mini_cnt","mfat_cnt","fat_base","fat_cnt","difat_cnt","HEADER_SIG","chainit","w","consts","DIFSECT","FATSECT","_nm","copy","path","UCFullPaths","toUpperCase","UCPaths","UCPath","match","MAXREGSECT","FREESECT","HEADER_MINOR_VERSION","MAXREGSID","NOSTREAM","EntryTypes","write_file","writeFileSync","a2s","out","write","_zlib","use_zlib","zlib","InflateRaw","InflRaw","_processChunk","_finishFlushFlag","bytesRead","console","error","message","_inflateRawSync","usz","_inflate","_deflateRawSync","deflateRawSync","_deflate","CLEN_ORDER","LEN_LN","DST_LN","bit_swap_8","use_typed_arrays","bitswap8","bit_swap_n","rev","read_bits_2","bl","h","read_bits_3","read_bits_4","read_bits_5","read_bits_7","read_bits_n","v","write_bits_3","write_bits_1","write_bits_8","write_bits_16","realloc","a","zero_fill_array","build_tree","clens","cmap","MAX","ccode","bl_count","Uint16Array","ctree","cleni","fix_lmap","fix_dmap","dlens","_deflateRaw","DST_LN_RE","LEN_LN_RE","write_stored","boff","write_huff_fixed","addrs","hash","mlen","len_eb","dst_eb","off","dyn_lmap","dyn_dmap","dyn_cmap","dyn_len_1","dyn_len_2","dyn","_HLIT","_HDIST","_HCLEN","next_code","hcodes","h1","h2","inflate","outbuf","woff","OL","max_len_1","max_len_2","bits","code","dst","warn_or_throw","wrn","msg","fcnt","start_cd","csz","efsz","fcsz","EF","parse_local_file","meth","crc32","_csz","_usz","ef","_crc32","cfb_add","unsafe","cdirs","method","compression","desc","fp","fi","crcs","sz_cd","namebuf","ContentTypeMap","get_content_type","ctype","ext","write_base64_76","write_quoted_printable","text","encoded","si","tmp","parse_quoted_printable","di","line","oi","$$","parse_mime","fname","cte","fdata","toLowerCase","trim","row","test","mboundary","boundary","start_di","ca","cstr","dispcnt","csl","qp","cfb_new","fpath","utils","cfb_gc","cfb_del","splice","cfb_mov","old_name","new_name","writeFile","_inflateRaw","module","DO_NOT_EXPORT_CFB"],"mappings":"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","sourcesContent":["/* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*jshint eqnull:true */\n/*exported CFB */\n/*global module, require:false, process:false, Buffer:false, Uint8Array:false, Uint16Array:false */\n\nvar Base64 = (function make_b64(){\n\tvar map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\treturn {\n\t\tencode: function(input) {\n\t\t\tvar o = \"\";\n\t\t\tvar c1=0, c2=0, c3=0, e1=0, e2=0, e3=0, e4=0;\n\t\t\tfor(var i = 0; i < input.length; ) {\n\t\t\t\tc1 = input.charCodeAt(i++);\n\t\t\t\te1 = (c1 >> 2);\n\n\t\t\t\tc2 = input.charCodeAt(i++);\n\t\t\t\te2 = ((c1 & 3) << 4) | (c2 >> 4);\n\n\t\t\t\tc3 = input.charCodeAt(i++);\n\t\t\t\te3 = ((c2 & 15) << 2) | (c3 >> 6);\n\t\t\t\te4 = (c3 & 63);\n\t\t\t\tif (isNaN(c2)) { e3 = e4 = 64; }\n\t\t\t\telse if (isNaN(c3)) { e4 = 64; }\n\t\t\t\to += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4);\n\t\t\t}\n\t\t\treturn o;\n\t\t},\n\t\tdecode: function b64_decode(input) {\n\t\t\tvar o = \"\";\n\t\t\tvar c1=0, c2=0, c3=0, e1=0, e2=0, e3=0, e4=0;\n\t\t\tinput = input.replace(/[^\\w\\+\\/\\=]/g, \"\");\n\t\t\tfor(var i = 0; i < input.length;) {\n\t\t\t\te1 = map.indexOf(input.charAt(i++));\n\t\t\t\te2 = map.indexOf(input.charAt(i++));\n\t\t\t\tc1 = (e1 << 2) | (e2 >> 4);\n\t\t\t\to += String.fromCharCode(c1);\n\n\t\t\t\te3 = map.indexOf(input.charAt(i++));\n\t\t\t\tc2 = ((e2 & 15) << 4) | (e3 >> 2);\n\t\t\t\tif (e3 !== 64) { o += String.fromCharCode(c2); }\n\n\t\t\t\te4 = map.indexOf(input.charAt(i++));\n\t\t\t\tc3 = ((e3 & 3) << 6) | e4;\n\t\t\t\tif (e4 !== 64) { o += String.fromCharCode(c3); }\n\t\t\t}\n\t\t\treturn o;\n\t\t}\n\t};\n})();\nvar has_buf = (typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && process.versions.node);\n\nvar Buffer_from = function(){};\n\nif(typeof Buffer !== 'undefined') {\n\tvar nbfs = !Buffer.from;\n\tif(!nbfs) try { Buffer.from(\"foo\", \"utf8\"); } catch(e) { nbfs = true; }\n\tBuffer_from = nbfs ? function(buf, enc) { return (enc) ? new Buffer(buf, enc) : new Buffer(buf); } : Buffer.from.bind(Buffer);\n\t// $FlowIgnore\n\tif(!Buffer.alloc) Buffer.alloc = function(n) { var b = new Buffer(n); b.fill(0); return b; };\n\t// $FlowIgnore\n\tif(!Buffer.allocUnsafe) Buffer.allocUnsafe = function(n) { return new Buffer(n); };\n}\n\nfunction new_raw_buf(len) {\n\t/* jshint -W056 */\n\treturn has_buf ? Buffer.alloc(len) : new Array(len);\n\t/* jshint +W056 */\n}\n\nfunction new_unsafe_buf(len) {\n\t/* jshint -W056 */\n\treturn has_buf ? Buffer.allocUnsafe(len) : new Array(len);\n\t/* jshint +W056 */\n}\n\nvar s2a = function s2a(s) {\n\tif(has_buf) return Buffer_from(s, \"binary\");\n\treturn s.split(\"\").map(function(x){ return x.charCodeAt(0) & 0xff; });\n};\n\nvar chr0 = /\\u0000/g, chr1 = /[\\u0001-\\u0006]/g;\nvar __toBuffer = function(bufs) { var x = []; for(var i = 0; i < bufs[0].length; ++i) { x.push.apply(x, bufs[0][i]); } return x; };\nvar ___toBuffer = __toBuffer;\nvar __utf16le = function(b,s,e) { var ss=[]; for(var i=s; i<e; i+=2) ss.push(String.fromCharCode(__readUInt16LE(b,i))); return ss.join(\"\").replace(chr0,''); };\nvar ___utf16le = __utf16le;\nvar __hexlify = function(b,s,l) { var ss=[]; for(var i=s; i<s+l; ++i) ss.push((\"0\" + b[i].toString(16)).slice(-2)); return ss.join(\"\"); };\nvar ___hexlify = __hexlify;\nvar __bconcat = function(bufs) {\n\tif(Array.isArray(bufs[0])) return [].concat.apply([], bufs);\n\tvar maxlen = 0, i = 0;\n\tfor(i = 0; i < bufs.length; ++i) maxlen += bufs[i].length;\n\tvar o = new Uint8Array(maxlen);\n\tfor(i = 0, maxlen = 0; i < bufs.length; maxlen += bufs[i].length, ++i) o.set(bufs[i], maxlen);\n\treturn o;\n};\nvar bconcat = __bconcat;\n\n\nif(has_buf) {\n\t__utf16le = function(b,s,e) {\n\t\tif(!Buffer.isBuffer(b)) return ___utf16le(b,s,e);\n\t\treturn b.toString('utf16le',s,e).replace(chr0,'')/*.replace(chr1,'!')*/;\n\t};\n\t__hexlify = function(b,s,l) { return Buffer.isBuffer(b) ? b.toString('hex',s,s+l) : ___hexlify(b,s,l); };\n\t__toBuffer = function(bufs) { return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat((bufs[0])) : ___toBuffer(bufs);};\n\ts2a = function(s) { return Buffer_from(s, \"binary\"); };\n\tbconcat = function(bufs) { return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : __bconcat(bufs); };\n}\n\n\nvar __readUInt8 = function(b, idx) { return b[idx]; };\nvar __readUInt16LE = function(b, idx) { return b[idx+1]*(1<<8)+b[idx]; };\nvar __readInt16LE = function(b, idx) { var u = b[idx+1]*(1<<8)+b[idx]; return (u < 0x8000) ? u : (0xffff - u + 1) * -1; };\nvar __readUInt32LE = function(b, idx) { return b[idx+3]*(1<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };\nvar __readInt32LE = function(b, idx) { return (b[idx+3]<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };\n\nfunction ReadShift(size, t) {\n\tvar oI, oS, type = 0;\n\tswitch(size) {\n\t\tcase 1: oI = __readUInt8(this, this.l); break;\n\t\tcase 2: oI = (t !== 'i' ? __readUInt16LE : __readInt16LE)(this, this.l); break;\n\t\tcase 4: oI = __readInt32LE(this, this.l); break;\n\t\tcase 16: type = 2; oS = __hexlify(this, this.l, size);\n\t}\n\tthis.l += size; if(type === 0) return oI; return oS;\n}\n\nvar __writeUInt32LE = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); b[idx+2] = ((val >>> 16) & 0xFF); b[idx+3] = ((val >>> 24) & 0xFF); };\nvar __writeInt32LE  = function(b, val, idx) { b[idx] = (val & 0xFF); b[idx+1] = ((val >> 8) & 0xFF); b[idx+2] = ((val >> 16) & 0xFF); b[idx+3] = ((val >> 24) & 0xFF); };\n\nfunction WriteShift(t, val, f) {\n\tvar size = 0, i = 0;\n\tswitch(f) {\n\t\tcase \"hex\": for(; i < t; ++i) {\nthis[this.l++] = parseInt(val.slice(2*i, 2*i+2), 16)||0;\n\t\t} return this;\n\t\tcase \"utf16le\":\nvar end = this.l + t;\n\t\t\tfor(i = 0; i < Math.min(val.length, t); ++i) {\n\t\t\t\tvar cc = val.charCodeAt(i);\n\t\t\t\tthis[this.l++] = cc & 0xff;\n\t\t\t\tthis[this.l++] = cc >> 8;\n\t\t\t}\n\t\t\twhile(this.l < end) this[this.l++] = 0;\n\t\t\treturn this;\n\t}\nswitch(t) {\n\t\tcase  1: size = 1; this[this.l] = val&0xFF; break;\n\t\tcase  2: size = 2; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; break;\n\t\tcase  4: size = 4; __writeUInt32LE(this, val, this.l); break;\n\t\tcase -4: size = 4; __writeInt32LE(this, val, this.l); break;\n\t}\n\tthis.l += size; return this;\n}\n\nfunction CheckField(hexstr, fld) {\n\tvar m = __hexlify(this,this.l,hexstr.length>>1);\n\tif(m !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m);\n\tthis.l += hexstr.length>>1;\n}\n\nfunction prep_blob(blob, pos) {\n\tblob.l = pos;\n\tblob.read_shift = ReadShift;\n\tblob.chk = CheckField;\n\tblob.write_shift = WriteShift;\n}\n\nfunction new_buf(sz) {\n\tvar o = (new_raw_buf(sz));\n\tprep_blob(o, 0);\n\treturn o;\n}\n\n/* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32;\n(function (factory) {\n\t/*jshint ignore:start */\n\t/*eslint-disable */\n\tfactory(CRC32 = {});\n\t/*eslint-enable */\n\t/*jshint ignore:end */\n}(function(CRC32) {\nCRC32.version = '1.2.0';\n/* see perf/crc32table.js */\n/*global Int32Array */\nfunction signed_crc_table() {\n\tvar c = 0, table = new Array(256);\n\n\tfor(var n =0; n != 256; ++n){\n\t\tc = n;\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\ttable[n] = c;\n\t}\n\n\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n}\n\nvar T = signed_crc_table();\nfunction crc32_bstr(bstr, seed) {\n\tvar C = seed ^ -1, L = bstr.length - 1;\n\tfor(var i = 0; i < L;) {\n\t\tC = (C>>>8) ^ T[(C^bstr.charCodeAt(i++))&0xFF];\n\t\tC = (C>>>8) ^ T[(C^bstr.charCodeAt(i++))&0xFF];\n\t}\n\tif(i === L) C = (C>>>8) ^ T[(C ^ bstr.charCodeAt(i))&0xFF];\n\treturn C ^ -1;\n}\n\nfunction crc32_buf(buf, seed) {\n\tif(buf.length > 10000) return crc32_buf_8(buf, seed);\n\tvar C = seed ^ -1, L = buf.length - 3;\n\tfor(var i = 0; i < L;) {\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t}\n\twhile(i < L+3) C = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\treturn C ^ -1;\n}\n\nfunction crc32_buf_8(buf, seed) {\n\tvar C = seed ^ -1, L = buf.length - 7;\n\tfor(var i = 0; i < L;) {\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t\tC = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\t}\n\twhile(i < L+7) C = (C>>>8) ^ T[(C^buf[i++])&0xFF];\n\treturn C ^ -1;\n}\n\nfunction crc32_str(str, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L=str.length, c, d; i < L;) {\n\t\tc = str.charCodeAt(i++);\n\t\tif(c < 0x80) {\n\t\t\tC = (C>>>8) ^ T[(C ^ c)&0xFF];\n\t\t} else if(c < 0x800) {\n\t\t\tC = (C>>>8) ^ T[(C ^ (192|((c>>6)&31)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|(c&63)))&0xFF];\n\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++)&1023;\n\t\t\tC = (C>>>8) ^ T[(C ^ (240|((c>>8)&7)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|((c>>2)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|(d&63)))&0xFF];\n\t\t} else {\n\t\t\tC = (C>>>8) ^ T[(C ^ (224|((c>>12)&15)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|((c>>6)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T[(C ^ (128|(c&63)))&0xFF];\n\t\t}\n\t}\n\treturn C ^ -1;\n}\nCRC32.table = T;\nCRC32.bstr = crc32_bstr;\nCRC32.buf = crc32_buf;\nCRC32.str = crc32_str;\n}));\n/* [MS-CFB] v20171201 */\nvar CFB = (function _CFB(){\nvar exports = {};\nexports.version = '1.2.1';\n/* [MS-CFB] 2.6.4 */\nfunction namecmp(l, r) {\n\tvar L = l.split(\"/\"), R = r.split(\"/\");\n\tfor(var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {\n\t\tif((c = L[i].length - R[i].length)) return c;\n\t\tif(L[i] != R[i]) return L[i] < R[i] ? -1 : 1;\n\t}\n\treturn L.length - R.length;\n}\nfunction dirname(p) {\n\tif(p.charAt(p.length - 1) == \"/\") return (p.slice(0,-1).indexOf(\"/\") === -1) ? p : dirname(p.slice(0, -1));\n\tvar c = p.lastIndexOf(\"/\");\n\treturn (c === -1) ? p : p.slice(0, c+1);\n}\n\nfunction filename(p) {\n\tif(p.charAt(p.length - 1) == \"/\") return filename(p.slice(0, -1));\n\tvar c = p.lastIndexOf(\"/\");\n\treturn (c === -1) ? p : p.slice(c+1);\n}\n/* -------------------------------------------------------------------------- */\n/* DOS Date format:\n   high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low\n   add 1980 to stored year\n   stored second should be doubled\n*/\n\n/* write JS date to buf as a DOS date */\nfunction write_dos_date(buf, date) {\n\tif(typeof date === \"string\") date = new Date(date);\n\tvar hms = date.getHours();\n\thms = hms << 6 | date.getMinutes();\n\thms = hms << 5 | (date.getSeconds()>>>1);\n\tbuf.write_shift(2, hms);\n\tvar ymd = (date.getFullYear() - 1980);\n\tymd = ymd << 4 | (date.getMonth()+1);\n\tymd = ymd << 5 | date.getDate();\n\tbuf.write_shift(2, ymd);\n}\n\n/* read four bytes from buf and interpret as a DOS date */\nfunction parse_dos_date(buf) {\n\tvar hms = buf.read_shift(2) & 0xFFFF;\n\tvar ymd = buf.read_shift(2) & 0xFFFF;\n\tvar val = new Date();\n\tvar d = ymd & 0x1F; ymd >>>= 5;\n\tvar m = ymd & 0x0F; ymd >>>= 4;\n\tval.setMilliseconds(0);\n\tval.setFullYear(ymd + 1980);\n\tval.setMonth(m-1);\n\tval.setDate(d);\n\tvar S = hms & 0x1F; hms >>>= 5;\n\tvar M = hms & 0x3F; hms >>>= 6;\n\tval.setHours(hms);\n\tval.setMinutes(M);\n\tval.setSeconds(S<<1);\n\treturn val;\n}\nfunction parse_extra_field(blob) {\n\tprep_blob(blob, 0);\n\tvar o = {};\n\tvar flags = 0;\n\twhile(blob.l <= blob.length - 4) {\n\t\tvar type = blob.read_shift(2);\n\t\tvar sz = blob.read_shift(2), tgt = blob.l + sz;\n\t\tvar p = {};\n\t\tswitch(type) {\n\t\t\t/* UNIX-style Timestamps */\n\t\t\tcase 0x5455: {\n\t\t\t\tflags = blob.read_shift(1);\n\t\t\t\tif(flags & 1) p.mtime = blob.read_shift(4);\n\t\t\t\t/* for some reason, CD flag corresponds to LFH */\n\t\t\t\tif(sz > 5) {\n\t\t\t\t\tif(flags & 2) p.atime = blob.read_shift(4);\n\t\t\t\t\tif(flags & 4) p.ctime = blob.read_shift(4);\n\t\t\t\t}\n\t\t\t\tif(p.mtime) p.mt = new Date(p.mtime*1000);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tblob.l = tgt;\n\t\to[type] = p;\n\t}\n\treturn o;\n}\nvar fs;\nfunction get_fs() { return fs || (fs = require('fs')); }\nfunction parse(file, options) {\nif(file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);\nif((file[0] | 0x20) == 0x6d && (file[1]|0x20) == 0x69) return parse_mad(file, options);\nif(file.length < 512) throw new Error(\"CFB file size \" + file.length + \" < 512\");\nvar mver = 3;\nvar ssz = 512;\nvar nmfs = 0; // number of mini FAT sectors\nvar difat_sec_cnt = 0;\nvar dir_start = 0;\nvar minifat_start = 0;\nvar difat_start = 0;\n\nvar fat_addrs = []; // locations of FAT sectors\n\n/* [MS-CFB] 2.2 Compound File Header */\nvar blob = file.slice(0,512);\nprep_blob(blob, 0);\n\n/* major version */\nvar mv = check_get_mver(blob);\nmver = mv[0];\nswitch(mver) {\n\tcase 3: ssz = 512; break; case 4: ssz = 4096; break;\n\tcase 0: if(mv[1] == 0) return parse_zip(file, options);\n\t/* falls through */\n\tdefault: throw new Error(\"Major Version: Expected 3 or 4 saw \" + mver);\n}\n\n/* reprocess header */\nif(ssz !== 512) { blob = file.slice(0,ssz); prep_blob(blob, 28 /* blob.l */); }\n/* Save header for final object */\nvar header = file.slice(0,ssz);\n\ncheck_shifts(blob, mver);\n\n// Number of Directory Sectors\nvar dir_cnt = blob.read_shift(4, 'i');\nif(mver === 3 && dir_cnt !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt);\n\n// Number of FAT Sectors\nblob.l += 4;\n\n// First Directory Sector Location\ndir_start = blob.read_shift(4, 'i');\n\n// Transaction Signature\nblob.l += 4;\n\n// Mini Stream Cutoff Size\nblob.chk('00100000', 'Mini Stream Cutoff Size: ');\n\n// First Mini FAT Sector Location\nminifat_start = blob.read_shift(4, 'i');\n\n// Number of Mini FAT Sectors\nnmfs = blob.read_shift(4, 'i');\n\n// First DIFAT sector location\ndifat_start = blob.read_shift(4, 'i');\n\n// Number of DIFAT Sectors\ndifat_sec_cnt = blob.read_shift(4, 'i');\n\n// Grab FAT Sector Locations\nfor(var q = -1, j = 0; j < 109; ++j) { /* 109 = (512 - blob.l)>>>2; */\n\tq = blob.read_shift(4, 'i');\n\tif(q<0) break;\n\tfat_addrs[j] = q;\n}\n\n/** Break the file up into sectors */\nvar sectors = sectorify(file, ssz);\n\nsleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);\n\n/** Chains */\nvar sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);\n\nsector_list[dir_start].name = \"!Directory\";\nif(nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = \"!MiniFAT\";\nsector_list[fat_addrs[0]].name = \"!FAT\";\nsector_list.fat_addrs = fat_addrs;\nsector_list.ssz = ssz;\n\n/* [MS-CFB] 2.6.1 Compound File Directory Entry */\nvar files = {}, Paths = [], FileIndex = [], FullPaths = [];\nread_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);\n\nbuild_full_paths(FileIndex, FullPaths, Paths);\nPaths.shift();\n\nvar o = {\n\tFileIndex: FileIndex,\n\tFullPaths: FullPaths\n};\n\n// $FlowIgnore\nif(options && options.raw) o.raw = {header: header, sectors: sectors};\nreturn o;\n} // parse\n\n/* [MS-CFB] 2.2 Compound File Header -- read up to major version */\nfunction check_get_mver(blob) {\n\tif(blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [0, 0];\n\t// header signature 8\n\tblob.chk(HEADER_SIGNATURE, 'Header Signature: ');\n\n\t// clsid 16\n\t//blob.chk(HEADER_CLSID, 'CLSID: ');\n\tblob.l += 16;\n\n\t// minor version 2\n\tvar mver = blob.read_shift(2, 'u');\n\n\treturn [blob.read_shift(2,'u'), mver];\n}\nfunction check_shifts(blob, mver) {\n\tvar shift = 0x09;\n\n\t// Byte Order\n\t//blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff\n\tblob.l += 2;\n\n\t// Sector Shift\n\tswitch((shift = blob.read_shift(2))) {\n\t\tcase 0x09: if(mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift); break;\n\t\tcase 0x0c: if(mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift); break;\n\t\tdefault: throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);\n\t}\n\n\t// Mini Sector Shift\n\tblob.chk('0600', 'Mini Sector Shift: ');\n\n\t// Reserved\n\tblob.chk('000000000000', 'Reserved: ');\n}\n\n/** Break the file up into sectors */\nfunction sectorify(file, ssz) {\n\tvar nsectors = Math.ceil(file.length/ssz)-1;\n\tvar sectors = [];\n\tfor(var i=1; i < nsectors; ++i) sectors[i-1] = file.slice(i*ssz,(i+1)*ssz);\n\tsectors[nsectors-1] = file.slice(nsectors*ssz);\n\treturn sectors;\n}\n\n/* [MS-CFB] 2.6.4 Red-Black Tree */\nfunction build_full_paths(FI, FP, Paths) {\n\tvar i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;\n\tvar dad = [], q = [];\n\n\tfor(; i < pl; ++i) { dad[i]=q[i]=i; FP[i]=Paths[i]; }\n\n\tfor(; j < q.length; ++j) {\n\t\ti = q[j];\n\t\tL = FI[i].L; R = FI[i].R; C = FI[i].C;\n\t\tif(dad[i] === i) {\n\t\t\tif(L !== -1 /*NOSTREAM*/ && dad[L] !== L) dad[i] = dad[L];\n\t\t\tif(R !== -1 && dad[R] !== R) dad[i] = dad[R];\n\t\t}\n\t\tif(C !== -1 /*NOSTREAM*/) dad[C] = i;\n\t\tif(L !== -1 && i != dad[i]) { dad[L] = dad[i]; if(q.lastIndexOf(L) < j) q.push(L); }\n\t\tif(R !== -1 && i != dad[i]) { dad[R] = dad[i]; if(q.lastIndexOf(R) < j) q.push(R); }\n\t}\n\tfor(i=1; i < pl; ++i) if(dad[i] === i) {\n\t\tif(R !== -1 /*NOSTREAM*/ && dad[R] !== R) dad[i] = dad[R];\n\t\telse if(L !== -1 && dad[L] !== L) dad[i] = dad[L];\n\t}\n\n\tfor(i=1; i < pl; ++i) {\n\t\tif(FI[i].type === 0 /* unknown */) continue;\n\t\tj = i;\n\t\tif(j != dad[j]) do {\n\t\t\tj = dad[j];\n\t\t\tFP[i] = FP[j] + \"/\" + FP[i];\n\t\t} while (j !== 0 && -1 !== dad[j] && j != dad[j]);\n\t\tdad[i] = -1;\n\t}\n\n\tFP[0] += \"/\";\n\tfor(i=1; i < pl; ++i) {\n\t\tif(FI[i].type !== 2 /* stream */) FP[i] += \"/\";\n\t}\n}\n\nfunction get_mfat_entry(entry, payload, mini) {\n\tvar start = entry.start, size = entry.size;\n\t//return (payload.slice(start*MSSZ, start*MSSZ + size));\n\tvar o = [];\n\tvar idx = start;\n\twhile(mini && size > 0 && idx >= 0) {\n\t\to.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));\n\t\tsize -= MSSZ;\n\t\tidx = __readInt32LE(mini, idx * 4);\n\t}\n\tif(o.length === 0) return (new_buf(0));\n\treturn (bconcat(o).slice(0, entry.size));\n}\n\n/** Chase down the rest of the DIFAT chain to build a comprehensive list\n    DIFAT chains by storing the next sector number as the last 32 bits */\nfunction sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {\n\tvar q = ENDOFCHAIN;\n\tif(idx === ENDOFCHAIN) {\n\t\tif(cnt !== 0) throw new Error(\"DIFAT chain shorter than expected\");\n\t} else if(idx !== -1 /*FREESECT*/) {\n\t\tvar sector = sectors[idx], m = (ssz>>>2)-1;\n\t\tif(!sector) return;\n\t\tfor(var i = 0; i < m; ++i) {\n\t\t\tif((q = __readInt32LE(sector,i*4)) === ENDOFCHAIN) break;\n\t\t\tfat_addrs.push(q);\n\t\t}\n\t\tsleuth_fat(__readInt32LE(sector,ssz-4),cnt - 1, sectors, ssz, fat_addrs);\n\t}\n}\n\n/** Follow the linked list of sectors for a given starting point */\nfunction get_sector_list(sectors, start, fat_addrs, ssz, chkd) {\n\tvar buf = [], buf_chain = [];\n\tif(!chkd) chkd = [];\n\tvar modulus = ssz - 1, j = 0, jj = 0;\n\tfor(j=start; j>=0;) {\n\t\tchkd[j] = true;\n\t\tbuf[buf.length] = j;\n\t\tbuf_chain.push(sectors[j]);\n\t\tvar addr = fat_addrs[Math.floor(j*4/ssz)];\n\t\tjj = ((j*4) & modulus);\n\t\tif(ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \"+ssz);\n\t\tif(!sectors[addr]) break;\n\t\tj = __readInt32LE(sectors[addr], jj);\n\t}\n\treturn {nodes: buf, data:__toBuffer([buf_chain])};\n}\n\n/** Chase down the sector linked lists */\nfunction make_sector_list(sectors, dir_start, fat_addrs, ssz) {\n\tvar sl = sectors.length, sector_list = ([]);\n\tvar chkd = [], buf = [], buf_chain = [];\n\tvar modulus = ssz - 1, i=0, j=0, k=0, jj=0;\n\tfor(i=0; i < sl; ++i) {\n\t\tbuf = ([]);\n\t\tk = (i + dir_start); if(k >= sl) k-=sl;\n\t\tif(chkd[k]) continue;\n\t\tbuf_chain = [];\n\t\tvar seen = [];\n\t\tfor(j=k; j>=0;) {\n\t\t\tseen[j] = true;\n\t\t\tchkd[j] = true;\n\t\t\tbuf[buf.length] = j;\n\t\t\tbuf_chain.push(sectors[j]);\n\t\t\tvar addr = fat_addrs[Math.floor(j*4/ssz)];\n\t\t\tjj = ((j*4) & modulus);\n\t\t\tif(ssz < 4 + jj) throw new Error(\"FAT boundary crossed: \" + j + \" 4 \"+ssz);\n\t\t\tif(!sectors[addr]) break;\n\t\t\tj = __readInt32LE(sectors[addr], jj);\n\t\t\tif(seen[j]) break;\n\t\t}\n\t\tsector_list[k] = ({nodes: buf, data:__toBuffer([buf_chain])});\n\t}\n\treturn sector_list;\n}\n\n/* [MS-CFB] 2.6.1 Compound File Directory Entry */\nfunction read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {\n\tvar minifat_store = 0, pl = (Paths.length?2:0);\n\tvar sector = sector_list[dir_start].data;\n\tvar i = 0, namelen = 0, name;\n\tfor(; i < sector.length; i+= 128) {\n\t\tvar blob = sector.slice(i, i+128);\n\t\tprep_blob(blob, 64);\n\t\tnamelen = blob.read_shift(2);\n\t\tname = __utf16le(blob,0,namelen-pl);\n\t\tPaths.push(name);\n\t\tvar o = ({\n\t\t\tname:  name,\n\t\t\ttype:  blob.read_shift(1),\n\t\t\tcolor: blob.read_shift(1),\n\t\t\tL:     blob.read_shift(4, 'i'),\n\t\t\tR:     blob.read_shift(4, 'i'),\n\t\t\tC:     blob.read_shift(4, 'i'),\n\t\t\tclsid: blob.read_shift(16),\n\t\t\tstate: blob.read_shift(4, 'i'),\n\t\t\tstart: 0,\n\t\t\tsize: 0\n\t\t});\n\t\tvar ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\t\tif(ctime !== 0) o.ct = read_date(blob, blob.l-8);\n\t\tvar mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\t\tif(mtime !== 0) o.mt = read_date(blob, blob.l-8);\n\t\to.start = blob.read_shift(4, 'i');\n\t\to.size = blob.read_shift(4, 'i');\n\t\tif(o.size < 0 && o.start < 0) { o.size = o.type = 0; o.start = ENDOFCHAIN; o.name = \"\"; }\n\t\tif(o.type === 5) { /* root */\n\t\t\tminifat_store = o.start;\n\t\t\tif(nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = \"!StreamData\";\n\t\t\t/*minifat_size = o.size;*/\n\t\t} else if(o.size >= 4096 /* MSCSZ */) {\n\t\t\to.storage = 'fat';\n\t\t\tif(sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);\n\t\t\tsector_list[o.start].name = o.name;\n\t\t\to.content = (sector_list[o.start].data.slice(0,o.size));\n\t\t} else {\n\t\t\to.storage = 'minifat';\n\t\t\tif(o.size < 0) o.size = 0;\n\t\t\telse if(minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {\n\t\t\t\to.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini]||{}).data);\n\t\t\t}\n\t\t}\n\t\tif(o.content) prep_blob(o.content, 0);\n\t\tfiles[name] = o;\n\t\tFileIndex.push(o);\n\t}\n}\n\nfunction read_date(blob, offset) {\n\treturn new Date(( ( (__readUInt32LE(blob,offset+4)/1e7)*Math.pow(2,32)+__readUInt32LE(blob,offset)/1e7 ) - 11644473600)*1000);\n}\n\nfunction read_file(filename, options) {\n\tget_fs();\n\treturn parse(fs.readFileSync(filename), options);\n}\n\nfunction read(blob, options) {\n\tvar type = options && options.type;\n\tif(!type) {\n\t\tif(has_buf && Buffer.isBuffer(blob)) type = \"buffer\";\n\t}\n\tswitch(type || \"base64\") {\n\t\tcase \"file\": return read_file(blob, options);\n\t\tcase \"base64\": return parse(s2a(Base64.decode(blob)), options);\n\t\tcase \"binary\": return parse(s2a(blob), options);\n\t}\n\treturn parse(blob, options);\n}\n\nfunction init_cfb(cfb, opts) {\n\tvar o = opts || {}, root = o.root || \"Root Entry\";\n\tif(!cfb.FullPaths) cfb.FullPaths = [];\n\tif(!cfb.FileIndex) cfb.FileIndex = [];\n\tif(cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error(\"inconsistent CFB structure\");\n\tif(cfb.FullPaths.length === 0) {\n\t\tcfb.FullPaths[0] = root + \"/\";\n\t\tcfb.FileIndex[0] = ({ name: root, type: 5 });\n\t}\n\tif(o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;\n\tseed_cfb(cfb);\n}\nfunction seed_cfb(cfb) {\n\tvar nm = \"\\u0001Sh33tJ5\";\n\tif(CFB.find(cfb, \"/\" + nm)) return;\n\tvar p = new_buf(4); p[0] = 55; p[1] = p[3] = 50; p[2] = 54;\n\tcfb.FileIndex.push(({ name: nm, type: 2, content:p, size:4, L:69, R:69, C:69 }));\n\tcfb.FullPaths.push(cfb.FullPaths[0] + nm);\n\trebuild_cfb(cfb);\n}\nfunction rebuild_cfb(cfb, f) {\n\tinit_cfb(cfb);\n\tvar gc = false, s = false;\n\tfor(var i = cfb.FullPaths.length - 1; i >= 0; --i) {\n\t\tvar _file = cfb.FileIndex[i];\n\t\tswitch(_file.type) {\n\t\t\tcase 0:\n\t\t\t\tif(s) gc = true;\n\t\t\t\telse { cfb.FileIndex.pop(); cfb.FullPaths.pop(); }\n\t\t\t\tbreak;\n\t\t\tcase 1: case 2: case 5:\n\t\t\t\ts = true;\n\t\t\t\tif(isNaN(_file.R * _file.L * _file.C)) gc = true;\n\t\t\t\tif(_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;\n\t\t\t\tbreak;\n\t\t\tdefault: gc = true; break;\n\t\t}\n\t}\n\tif(!gc && !f) return;\n\n\tvar now = new Date(1987, 1, 19), j = 0;\n\t// Track which names exist\n\tvar fullPaths = Object.create ? Object.create(null) : {};\n\tvar data = [];\n\tfor(i = 0; i < cfb.FullPaths.length; ++i) {\n\t\tfullPaths[cfb.FullPaths[i]] = true;\n\t\tif(cfb.FileIndex[i].type === 0) continue;\n\t\tdata.push([cfb.FullPaths[i], cfb.FileIndex[i]]);\n\t}\n\tfor(i = 0; i < data.length; ++i) {\n\t\tvar dad = dirname(data[i][0]);\n\t\ts = fullPaths[dad];\n\t\tif(!s) {\n\t\t\tdata.push([dad, ({\n\t\t\t\tname: filename(dad).replace(\"/\",\"\"),\n\t\t\t\ttype: 1,\n\t\t\t\tclsid: HEADER_CLSID,\n\t\t\t\tct: now, mt: now,\n\t\t\t\tcontent: null\n\t\t\t})]);\n\t\t\t// Add name to set\n\t\t\tfullPaths[dad] = true;\n\t\t}\n\t}\n\n\tdata.sort(function(x,y) { return namecmp(x[0], y[0]); });\n\tcfb.FullPaths = []; cfb.FileIndex = [];\n\tfor(i = 0; i < data.length; ++i) { cfb.FullPaths[i] = data[i][0]; cfb.FileIndex[i] = data[i][1]; }\n\tfor(i = 0; i < data.length; ++i) {\n\t\tvar elt = cfb.FileIndex[i];\n\t\tvar nm = cfb.FullPaths[i];\n\n\t\telt.name =  filename(nm).replace(\"/\",\"\");\n\t\telt.L = elt.R = elt.C = -(elt.color = 1);\n\t\telt.size = elt.content ? elt.content.length : 0;\n\t\telt.start = 0;\n\t\telt.clsid = (elt.clsid || HEADER_CLSID);\n\t\tif(i === 0) {\n\t\t\telt.C = data.length > 1 ? 1 : -1;\n\t\t\telt.size = 0;\n\t\t\telt.type = 5;\n\t\t} else if(nm.slice(-1) == \"/\") {\n\t\t\tfor(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==nm) break;\n\t\t\telt.C = j >= data.length ? -1 : j;\n\t\t\tfor(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==dirname(nm)) break;\n\t\t\telt.R = j >= data.length ? -1 : j;\n\t\t\telt.type = 1;\n\t\t} else {\n\t\t\tif(dirname(cfb.FullPaths[i+1]||\"\") == dirname(nm)) elt.R = i + 1;\n\t\t\telt.type = 2;\n\t\t}\n\t}\n\n}\n\nfunction _write(cfb, options) {\n\tvar _opts = options || {};\n\t/* MAD is order-sensitive, skip rebuild and sort */\n\tif(_opts.fileType == 'mad') return write_mad(cfb, _opts);\n\trebuild_cfb(cfb);\n\tswitch(_opts.fileType) {\n\t\tcase 'zip': return write_zip(cfb, _opts);\n\t\t//case 'mad': return write_mad(cfb, _opts);\n\t}\n\tvar L = (function(cfb){\n\t\tvar mini_size = 0, fat_size = 0;\n\t\tfor(var i = 0; i < cfb.FileIndex.length; ++i) {\n\t\t\tvar file = cfb.FileIndex[i];\n\t\t\tif(!file.content) continue;\nvar flen = file.content.length;\n\t\t\tif(flen > 0){\n\t\t\t\tif(flen < 0x1000) mini_size += (flen + 0x3F) >> 6;\n\t\t\t\telse fat_size += (flen + 0x01FF) >> 9;\n\t\t\t}\n\t\t}\n\t\tvar dir_cnt = (cfb.FullPaths.length +3) >> 2;\n\t\tvar mini_cnt = (mini_size + 7) >> 3;\n\t\tvar mfat_cnt = (mini_size + 0x7F) >> 7;\n\t\tvar fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;\n\t\tvar fat_cnt = (fat_base + 0x7F) >> 7;\n\t\tvar difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);\n\t\twhile(((fat_base + fat_cnt + difat_cnt + 0x7F) >> 7) > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);\n\t\tvar L =  [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];\n\t\tcfb.FileIndex[0].size = mini_size << 6;\n\t\tL[7] = (cfb.FileIndex[0].start=L[0]+L[1]+L[2]+L[3]+L[4]+L[5])+((L[6]+7) >> 3);\n\t\treturn L;\n\t})(cfb);\n\tvar o = new_buf(L[7] << 9);\n\tvar i = 0, T = 0;\n\t{\n\t\tfor(i = 0; i < 8; ++i) o.write_shift(1, HEADER_SIG[i]);\n\t\tfor(i = 0; i < 8; ++i) o.write_shift(2, 0);\n\t\to.write_shift(2, 0x003E);\n\t\to.write_shift(2, 0x0003);\n\t\to.write_shift(2, 0xFFFE);\n\t\to.write_shift(2, 0x0009);\n\t\to.write_shift(2, 0x0006);\n\t\tfor(i = 0; i < 3; ++i) o.write_shift(2, 0);\n\t\to.write_shift(4, 0);\n\t\to.write_shift(4, L[2]);\n\t\to.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);\n\t\to.write_shift(4, 0);\n\t\to.write_shift(4, 1<<12);\n\t\to.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1: ENDOFCHAIN);\n\t\to.write_shift(4, L[3]);\n\t\to.write_shift(-4, L[1] ? L[0] - 1: ENDOFCHAIN);\n\t\to.write_shift(4, L[1]);\n\t\tfor(i = 0; i < 109; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n\t}\n\tif(L[1]) {\n\t\tfor(T = 0; T < L[1]; ++T) {\n\t\t\tfor(; i < 236 + T * 127; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);\n\t\t\to.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);\n\t\t}\n\t}\n\tvar chainit = function(w) {\n\t\tfor(T += w; i<T-1; ++i) o.write_shift(-4, i+1);\n\t\tif(w) { ++i; o.write_shift(-4, ENDOFCHAIN); }\n\t};\n\tT = i = 0;\n\tfor(T+=L[1]; i<T; ++i) o.write_shift(-4, consts.DIFSECT);\n\tfor(T+=L[2]; i<T; ++i) o.write_shift(-4, consts.FATSECT);\n\tchainit(L[3]);\n\tchainit(L[4]);\n\tvar j = 0, flen = 0;\n\tvar file = cfb.FileIndex[0];\n\tfor(; j < cfb.FileIndex.length; ++j) {\n\t\tfile = cfb.FileIndex[j];\n\t\tif(!file.content) continue;\nflen = file.content.length;\n\t\tif(flen < 0x1000) continue;\n\t\tfile.start = T;\n\t\tchainit((flen + 0x01FF) >> 9);\n\t}\n\tchainit((L[6] + 7) >> 3);\n\twhile(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);\n\tT = i = 0;\n\tfor(j = 0; j < cfb.FileIndex.length; ++j) {\n\t\tfile = cfb.FileIndex[j];\n\t\tif(!file.content) continue;\nflen = file.content.length;\n\t\tif(!flen || flen >= 0x1000) continue;\n\t\tfile.start = T;\n\t\tchainit((flen + 0x3F) >> 6);\n\t}\n\twhile(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);\n\tfor(i = 0; i < L[4]<<2; ++i) {\n\t\tvar nm = cfb.FullPaths[i];\n\t\tif(!nm || nm.length === 0) {\n\t\t\tfor(j = 0; j < 17; ++j) o.write_shift(4, 0);\n\t\t\tfor(j = 0; j < 3; ++j) o.write_shift(4, -1);\n\t\t\tfor(j = 0; j < 12; ++j) o.write_shift(4, 0);\n\t\t\tcontinue;\n\t\t}\n\t\tfile = cfb.FileIndex[i];\n\t\tif(i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;\n\t\tvar _nm = (i === 0 && _opts.root) || file.name;\n\t\tflen = 2*(_nm.length+1);\n\t\to.write_shift(64, _nm, \"utf16le\");\n\t\to.write_shift(2, flen);\n\t\to.write_shift(1, file.type);\n\t\to.write_shift(1, file.color);\n\t\to.write_shift(-4, file.L);\n\t\to.write_shift(-4, file.R);\n\t\to.write_shift(-4, file.C);\n\t\tif(!file.clsid) for(j = 0; j < 4; ++j) o.write_shift(4, 0);\n\t\telse o.write_shift(16, file.clsid, \"hex\");\n\t\to.write_shift(4, file.state || 0);\n\t\to.write_shift(4, 0); o.write_shift(4, 0);\n\t\to.write_shift(4, 0); o.write_shift(4, 0);\n\t\to.write_shift(4, file.start);\n\t\to.write_shift(4, file.size); o.write_shift(4, 0);\n\t}\n\tfor(i = 1; i < cfb.FileIndex.length; ++i) {\n\t\tfile = cfb.FileIndex[i];\nif(file.size >= 0x1000) {\n\t\t\to.l = (file.start+1) << 9;\n\t\t\tif (has_buf && Buffer.isBuffer(file.content)) {\n\t\t\t\tfile.content.copy(o, o.l, 0, file.size);\n\t\t\t\t// o is a 0-filled Buffer so just set next offset\n\t\t\t\to.l += (file.size + 511) & -512;\n\t\t\t} else {\n\t\t\t\tfor(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);\n\t\t\t\tfor(; j & 0x1FF; ++j) o.write_shift(1, 0);\n\t\t\t}\n\t\t}\n\t}\n\tfor(i = 1; i < cfb.FileIndex.length; ++i) {\n\t\tfile = cfb.FileIndex[i];\nif(file.size > 0 && file.size < 0x1000) {\n\t\t\tif (has_buf && Buffer.isBuffer(file.content)) {\n\t\t\t\tfile.content.copy(o, o.l, 0, file.size);\n\t\t\t\t// o is a 0-filled Buffer so just set next offset\n\t\t\t\to.l += (file.size + 63) & -64;\n\t\t\t} else {\n\t\t\t\tfor(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);\n\t\t\t\tfor(; j & 0x3F; ++j) o.write_shift(1, 0);\n\t\t\t}\n\t\t}\n\t}\n\tif (has_buf) {\n\t\to.l = o.length;\n\t} else {\n\t\t// When using Buffer, already 0-filled\n\t\twhile(o.l < o.length) o.write_shift(1, 0);\n\t}\n\treturn o;\n}\n/* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */\nfunction find(cfb, path) {\n\tvar UCFullPaths = cfb.FullPaths.map(function(x) { return x.toUpperCase(); });\n\tvar UCPaths = UCFullPaths.map(function(x) { var y = x.split(\"/\"); return y[y.length - (x.slice(-1) == \"/\" ? 2 : 1)]; });\n\tvar k = false;\n\tif(path.charCodeAt(0) === 47 /* \"/\" */) { k = true; path = UCFullPaths[0].slice(0, -1) + path; }\n\telse k = path.indexOf(\"/\") !== -1;\n\tvar UCPath = path.toUpperCase();\n\tvar w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);\n\tif(w !== -1) return cfb.FileIndex[w];\n\n\tvar m = !UCPath.match(chr1);\n\tUCPath = UCPath.replace(chr0,'');\n\tif(m) UCPath = UCPath.replace(chr1,'!');\n\tfor(w = 0; w < UCFullPaths.length; ++w) {\n\t\tif((m ? UCFullPaths[w].replace(chr1,'!') : UCFullPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];\n\t\tif((m ? UCPaths[w].replace(chr1,'!') : UCPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];\n\t}\n\treturn null;\n}\n/** CFB Constants */\nvar MSSZ = 64; /* Mini Sector Size = 1<<6 */\n//var MSCSZ = 4096; /* Mini Stream Cutoff Size */\n/* 2.1 Compound File Sector Numbers and Types */\nvar ENDOFCHAIN = -2;\n/* 2.2 Compound File Header */\nvar HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';\nvar HEADER_SIG = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1];\nvar HEADER_CLSID = '00000000000000000000000000000000';\nvar consts = {\n\t/* 2.1 Compund File Sector Numbers and Types */\n\tMAXREGSECT: -6,\n\tDIFSECT: -4,\n\tFATSECT: -3,\n\tENDOFCHAIN: ENDOFCHAIN,\n\tFREESECT: -1,\n\t/* 2.2 Compound File Header */\n\tHEADER_SIGNATURE: HEADER_SIGNATURE,\n\tHEADER_MINOR_VERSION: '3e00',\n\tMAXREGSID: -6,\n\tNOSTREAM: -1,\n\tHEADER_CLSID: HEADER_CLSID,\n\t/* 2.6.1 Compound File Directory Entry */\n\tEntryTypes: ['unknown','storage','stream','lockbytes','property','root']\n};\n\nfunction write_file(cfb, filename, options) {\n\tget_fs();\n\tvar o = _write(cfb, options);\nfs.writeFileSync(filename, o);\n}\n\nfunction a2s(o) {\n\tvar out = new Array(o.length);\n\tfor(var i = 0; i < o.length; ++i) out[i] = String.fromCharCode(o[i]);\n\treturn out.join(\"\");\n}\n\nfunction write(cfb, options) {\n\tvar o = _write(cfb, options);\n\tswitch(options && options.type || \"buffer\") {\n\t\tcase \"file\": get_fs(); fs.writeFileSync(options.filename, (o)); return o;\n\t\tcase \"binary\": return typeof o == \"string\" ? o : a2s(o);\n\t\tcase \"base64\": return Base64.encode(typeof o == \"string\" ? o : a2s(o));\n\t\tcase \"buffer\": if(has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);\n\t\t\t/* falls through */\n\t\tcase \"array\": return typeof o == \"string\" ? s2a(o) : o;\n\t}\n\treturn o;\n}\n/* node < 8.1 zlib does not expose bytesRead, so default to pure JS */\nvar _zlib;\nfunction use_zlib(zlib) { try {\n\tvar InflateRaw = zlib.InflateRaw;\n\tvar InflRaw = new InflateRaw();\n\tInflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);\n\tif(InflRaw.bytesRead) _zlib = zlib;\n\telse throw new Error(\"zlib does not expose bytesRead\");\n} catch(e) {console.error(\"cannot use native zlib: \" + (e.message || e)); } }\n\nfunction _inflateRawSync(payload, usz) {\n\tif(!_zlib) return _inflate(payload, usz);\n\tvar InflateRaw = _zlib.InflateRaw;\n\tvar InflRaw = new InflateRaw();\n\tvar out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);\n\tpayload.l += InflRaw.bytesRead;\n\treturn out;\n}\n\nfunction _deflateRawSync(payload) {\n\treturn _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);\n}\nvar CLEN_ORDER = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n/*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */\nvar LEN_LN = [   3,   4,   5,   6,   7,   8,   9,  10,  11,  13 , 15,  17,  19,  23,  27,  31,  35,  43,  51,  59,  67,  83,  99, 115, 131, 163, 195, 227, 258 ];\n\n/*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */\nvar DST_LN = [  1,  2,  3,  4,  5,  7,  9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];\n\nfunction bit_swap_8(n) { var t = (((((n<<1)|(n<<11)) & 0x22110) | (((n<<5)|(n<<15)) & 0x88440))); return ((t>>16) | (t>>8) |t)&0xFF; }\n\nvar use_typed_arrays = typeof Uint8Array !== 'undefined';\n\nvar bitswap8 = use_typed_arrays ? new Uint8Array(1<<8) : [];\nfor(var q = 0; q < (1<<8); ++q) bitswap8[q] = bit_swap_8(q);\n\nfunction bit_swap_n(n, b) {\n\tvar rev = bitswap8[n & 0xFF];\n\tif(b <= 8) return rev >>> (8-b);\n\trev = (rev << 8) | bitswap8[(n>>8)&0xFF];\n\tif(b <= 16) return rev >>> (16-b);\n\trev = (rev << 8) | bitswap8[(n>>16)&0xFF];\n\treturn rev >>> (24-b);\n}\n\n/* helpers for unaligned bit reads */\nfunction read_bits_2(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 6 ? 0 : buf[h+1]<<8))>>>w)& 0x03; }\nfunction read_bits_3(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 5 ? 0 : buf[h+1]<<8))>>>w)& 0x07; }\nfunction read_bits_4(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 4 ? 0 : buf[h+1]<<8))>>>w)& 0x0F; }\nfunction read_bits_5(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 3 ? 0 : buf[h+1]<<8))>>>w)& 0x1F; }\nfunction read_bits_7(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 1 ? 0 : buf[h+1]<<8))>>>w)& 0x7F; }\n\n/* works up to n = 3 * 8 + 1 = 25 */\nfunction read_bits_n(buf, bl, n) {\n\tvar w = (bl&7), h = (bl>>>3), f = ((1<<n)-1);\n\tvar v = buf[h] >>> w;\n\tif(n < 8 - w) return v & f;\n\tv |= buf[h+1]<<(8-w);\n\tif(n < 16 - w) return v & f;\n\tv |= buf[h+2]<<(16-w);\n\tif(n < 24 - w) return v & f;\n\tv |= buf[h+3]<<(24-w);\n\treturn v & f;\n}\n\n/* helpers for unaligned bit writes */\nfunction write_bits_3(buf, bl, v) { var w = bl & 7, h = bl >>> 3;\n\tif(w <= 5) buf[h] |= (v & 7) << w;\n\telse {\n\t\tbuf[h] |= (v << w) & 0xFF;\n\t\tbuf[h+1] = (v&7) >> (8-w);\n\t}\n\treturn bl + 3;\n}\n\nfunction write_bits_1(buf, bl, v) {\n\tvar w = bl & 7, h = bl >>> 3;\n\tv = (v&1) << w;\n\tbuf[h] |= v;\n\treturn bl + 1;\n}\nfunction write_bits_8(buf, bl, v) {\n\tvar w = bl & 7, h = bl >>> 3;\n\tv <<= w;\n\tbuf[h] |=  v & 0xFF; v >>>= 8;\n\tbuf[h+1] = v;\n\treturn bl + 8;\n}\nfunction write_bits_16(buf, bl, v) {\n\tvar w = bl & 7, h = bl >>> 3;\n\tv <<= w;\n\tbuf[h] |=  v & 0xFF; v >>>= 8;\n\tbuf[h+1] = v & 0xFF;\n\tbuf[h+2] = v >>> 8;\n\treturn bl + 16;\n}\n\n/* until ArrayBuffer#realloc is a thing, fake a realloc */\nfunction realloc(b, sz) {\n\tvar L = b.length, M = 2*L > sz ? 2*L : sz + 5, i = 0;\n\tif(L >= sz) return b;\n\tif(has_buf) {\n\t\tvar o = new_unsafe_buf(M);\n\t\t// $FlowIgnore\n\t\tif(b.copy) b.copy(o);\n\t\telse for(; i < b.length; ++i) o[i] = b[i];\n\t\treturn o;\n\t} else if(use_typed_arrays) {\n\t\tvar a = new Uint8Array(M);\n\t\tif(a.set) a.set(b);\n\t\telse for(; i < L; ++i) a[i] = b[i];\n\t\treturn a;\n\t}\n\tb.length = M;\n\treturn b;\n}\n\n/* zero-filled arrays for older browsers */\nfunction zero_fill_array(n) {\n\tvar o = new Array(n);\n\tfor(var i = 0; i < n; ++i) o[i] = 0;\n\treturn o;\n}\n\n/* build tree (used for literals and lengths) */\nfunction build_tree(clens, cmap, MAX) {\n\tvar maxlen = 1, w = 0, i = 0, j = 0, ccode = 0, L = clens.length;\n\n\tvar bl_count  = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);\n\tfor(i = 0; i < 32; ++i) bl_count[i] = 0;\n\n\tfor(i = L; i < MAX; ++i) clens[i] = 0;\n\tL = clens.length;\n\n\tvar ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []\n\n\t/* build code tree */\n\tfor(i = 0; i < L; ++i) {\n\t\tbl_count[(w = clens[i])]++;\n\t\tif(maxlen < w) maxlen = w;\n\t\tctree[i] = 0;\n\t}\n\tbl_count[0] = 0;\n\tfor(i = 1; i <= maxlen; ++i) bl_count[i+16] = (ccode = (ccode + bl_count[i-1])<<1);\n\tfor(i = 0; i < L; ++i) {\n\t\tccode = clens[i];\n\t\tif(ccode != 0) ctree[i] = bl_count[ccode+16]++;\n\t}\n\n\t/* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */\n\tvar cleni = 0;\n\tfor(i = 0; i < L; ++i) {\n\t\tcleni = clens[i];\n\t\tif(cleni != 0) {\n\t\t\tccode = bit_swap_n(ctree[i], maxlen)>>(maxlen-cleni);\n\t\t\tfor(j = (1<<(maxlen + 4 - cleni)) - 1; j>=0; --j)\n\t\t\t\tcmap[ccode|(j<<cleni)] = (cleni&15) | (i<<4);\n\t\t}\n\t}\n\treturn maxlen;\n}\n\n/* Fixed Huffman */\nvar fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);\nvar fix_dmap = use_typed_arrays ? new Uint16Array(32)  : zero_fill_array(32);\nif(!use_typed_arrays) {\n\tfor(var i = 0; i < 512; ++i) fix_lmap[i] = 0;\n\tfor(i = 0; i < 32; ++i) fix_dmap[i] = 0;\n}\n(function() {\n\tvar dlens = [];\n\tvar i = 0;\n\tfor(;i<32; i++) dlens.push(5);\n\tbuild_tree(dlens, fix_dmap, 32);\n\n\tvar clens = [];\n\ti = 0;\n\tfor(; i<=143; i++) clens.push(8);\n\tfor(; i<=255; i++) clens.push(9);\n\tfor(; i<=279; i++) clens.push(7);\n\tfor(; i<=287; i++) clens.push(8);\n\tbuild_tree(clens, fix_lmap, 288);\n})();var _deflateRaw = (function() {\n\tvar DST_LN_RE = use_typed_arrays ? new Uint8Array(0x8000) : [];\n\tfor(var j = 0, k = 0; j < DST_LN.length; ++j) {\n\t\tfor(; k < DST_LN[j+1]; ++k) DST_LN_RE[k] = j;\n\t}\n\tfor(;k < 32768; ++k) DST_LN_RE[k] = 29;\n\n\tvar LEN_LN_RE = use_typed_arrays ? new Uint8Array(0x102) : [];\n\tfor(j = 0, k = 0; j < LEN_LN.length; ++j) {\n\t\tfor(; k < LEN_LN[j+1]; ++k) LEN_LN_RE[k] = j;\n\t}\n\n\tfunction write_stored(data, out) {\n\t\tvar boff = 0;\n\t\twhile(boff < data.length) {\n\t\t\tvar L = Math.min(0xFFFF, data.length - boff);\n\t\t\tvar h = boff + L == data.length;\n\t\t\tout.write_shift(1, +h);\n\t\t\tout.write_shift(2, L);\n\t\t\tout.write_shift(2, (~L) & 0xFFFF);\n\t\t\twhile(L-- > 0) out[out.l++] = data[boff++];\n\t\t}\n\t\treturn out.l;\n\t}\n\n\t/* Fixed Huffman */\n\tfunction write_huff_fixed(data, out) {\n\t\tvar bl = 0;\n\t\tvar boff = 0;\n\t\tvar addrs = use_typed_arrays ? new Uint16Array(0x8000) : [];\n\t\twhile(boff < data.length) {\n\t\t\tvar L = /* data.length - boff; */ Math.min(0xFFFF, data.length - boff);\n\n\t\t\t/* write a stored block for short data */\n\t\t\tif(L < 10) {\n\t\t\t\tbl = write_bits_3(out, bl, +!!(boff + L == data.length)); // jshint ignore:line\n\t\t\t\tif(bl & 7) bl += 8 - (bl & 7);\n\t\t\t\tout.l = (bl / 8) | 0;\n\t\t\t\tout.write_shift(2, L);\n\t\t\t\tout.write_shift(2, (~L) & 0xFFFF);\n\t\t\t\twhile(L-- > 0) out[out.l++] = data[boff++];\n\t\t\t\tbl = out.l * 8;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tbl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2); // jshint ignore:line\n\t\t\tvar hash = 0;\n\t\t\twhile(L-- > 0) {\n\t\t\t\tvar d = data[boff];\n\t\t\t\thash = ((hash << 5) ^ d) & 0x7FFF;\n\n\t\t\t\tvar match = -1, mlen = 0;\n\n\t\t\t\tif((match = addrs[hash])) {\n\t\t\t\t\tmatch |= boff & ~0x7FFF;\n\t\t\t\t\tif(match > boff) match -= 0x8000;\n\t\t\t\t\tif(match < boff) while(data[match + mlen] == data[boff + mlen] && mlen < 250) ++mlen;\n\t\t\t\t}\n\n\t\t\t\tif(mlen > 2) {\n\t\t\t\t\t/* Copy Token  */\n\t\t\t\t\td = LEN_LN_RE[mlen];\n\t\t\t\t\tif(d <= 22) bl = write_bits_8(out, bl, bitswap8[d+1]>>1) - 1;\n\t\t\t\t\telse {\n\t\t\t\t\t\twrite_bits_8(out, bl, 3);\n\t\t\t\t\t\tbl += 5;\n\t\t\t\t\t\twrite_bits_8(out, bl, bitswap8[d-23]>>5);\n\t\t\t\t\t\tbl += 3;\n\t\t\t\t\t}\n\t\t\t\t\tvar len_eb = (d < 8) ? 0 : ((d - 4)>>2);\n\t\t\t\t\tif(len_eb > 0) {\n\t\t\t\t\t\twrite_bits_16(out, bl, mlen - LEN_LN[d]);\n\t\t\t\t\t\tbl += len_eb;\n\t\t\t\t\t}\n\n\t\t\t\t\td = DST_LN_RE[boff - match];\n\t\t\t\t\tbl = write_bits_8(out, bl, bitswap8[d]>>3);\n\t\t\t\t\tbl -= 3;\n\n\t\t\t\t\tvar dst_eb = d < 4 ? 0 : (d-2)>>1;\n\t\t\t\t\tif(dst_eb > 0) {\n\t\t\t\t\t\twrite_bits_16(out, bl, boff - match - DST_LN[d]);\n\t\t\t\t\t\tbl += dst_eb;\n\t\t\t\t\t}\n\t\t\t\t\tfor(var q = 0; q < mlen; ++q) {\n\t\t\t\t\t\taddrs[hash] = boff & 0x7FFF;\n\t\t\t\t\t\thash = ((hash << 5) ^ data[boff]) & 0x7FFF;\n\t\t\t\t\t\t++boff;\n\t\t\t\t\t}\n\t\t\t\t\tL-= mlen - 1;\n\t\t\t\t} else {\n\t\t\t\t\t/* Literal Token */\n\t\t\t\t\tif(d <= 143) d = d + 48;\n\t\t\t\t\telse bl = write_bits_1(out, bl, 1);\n\t\t\t\t\tbl = write_bits_8(out, bl, bitswap8[d]);\n\t\t\t\t\taddrs[hash] = boff & 0x7FFF;\n\t\t\t\t\t++boff;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbl = write_bits_8(out, bl, 0) - 1;\n\t\t}\n\t\tout.l = ((bl + 7)/8)|0;\n\t\treturn out.l;\n\t}\n\treturn function _deflateRaw(data, out) {\n\t\tif(data.length < 8) return write_stored(data, out);\n\t\treturn write_huff_fixed(data, out);\n\t};\n})();\n\nfunction _deflate(data) {\n\tvar buf = new_buf(50+Math.floor(data.length*1.1));\n\tvar off = _deflateRaw(data, buf);\n\treturn buf.slice(0, off);\n}\n/* modified inflate function also moves original read head */\n\nvar dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\nvar dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);\nvar dyn_cmap = use_typed_arrays ? new Uint16Array(128)   : zero_fill_array(128);\nvar dyn_len_1 = 1, dyn_len_2 = 1;\n\n/* 5.5.3 Expanding Huffman Codes */\nfunction dyn(data, boff) {\n\t/* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */\n\tvar _HLIT = read_bits_5(data, boff) + 257; boff += 5;\n\tvar _HDIST = read_bits_5(data, boff) + 1; boff += 5;\n\tvar _HCLEN = read_bits_4(data, boff) + 4; boff += 4;\n\tvar w = 0;\n\n\t/* grab and store code lengths */\n\tvar clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);\n\tvar ctree = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];\n\tvar maxlen = 1;\n\tvar bl_count =  use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n\tvar next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);\n\tvar L = clens.length; /* 19 */\n\tfor(var i = 0; i < _HCLEN; ++i) {\n\t\tclens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);\n\t\tif(maxlen < w) maxlen = w;\n\t\tbl_count[w]++;\n\t\tboff += 3;\n\t}\n\n\t/* build code tree */\n\tvar ccode = 0;\n\tbl_count[0] = 0;\n\tfor(i = 1; i <= maxlen; ++i) next_code[i] = ccode = (ccode + bl_count[i-1])<<1;\n\tfor(i = 0; i < L; ++i) if((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;\n\t/* cmap[7 bits from stream] = (off&7) + (lit<<3) */\n\tvar cleni = 0;\n\tfor(i = 0; i < L; ++i) {\n\t\tcleni = clens[i];\n\t\tif(cleni != 0) {\n\t\t\tccode = bitswap8[ctree[i]]>>(8-cleni);\n\t\t\tfor(var j = (1<<(7-cleni))-1; j>=0; --j) dyn_cmap[ccode|(j<<cleni)] = (cleni&7) | (i<<3);\n\t\t}\n\t}\n\n\t/* read literal and dist codes at once */\n\tvar hcodes = [];\n\tmaxlen = 1;\n\tfor(; hcodes.length < _HLIT + _HDIST;) {\n\t\tccode = dyn_cmap[read_bits_7(data, boff)];\n\t\tboff += ccode & 7;\n\t\tswitch((ccode >>>= 3)) {\n\t\t\tcase 16:\n\t\t\t\tw = 3 + read_bits_2(data, boff); boff += 2;\n\t\t\t\tccode = hcodes[hcodes.length - 1];\n\t\t\t\twhile(w-- > 0) hcodes.push(ccode);\n\t\t\t\tbreak;\n\t\t\tcase 17:\n\t\t\t\tw = 3 + read_bits_3(data, boff); boff += 3;\n\t\t\t\twhile(w-- > 0) hcodes.push(0);\n\t\t\t\tbreak;\n\t\t\tcase 18:\n\t\t\t\tw = 11 + read_bits_7(data, boff); boff += 7;\n\t\t\t\twhile(w -- > 0) hcodes.push(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\thcodes.push(ccode);\n\t\t\t\tif(maxlen < ccode) maxlen = ccode;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/* build literal / length trees */\n\tvar h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);\n\tfor(i = _HLIT; i < 286; ++i) h1[i] = 0;\n\tfor(i = _HDIST; i < 30; ++i) h2[i] = 0;\n\tdyn_len_1 = build_tree(h1, dyn_lmap, 286);\n\tdyn_len_2 = build_tree(h2, dyn_dmap, 30);\n\treturn boff;\n}\n\n/* return [ data, bytesRead ] */\nfunction inflate(data, usz) {\n\t/* shortcircuit for empty buffer [0x03, 0x00] */\n\tif(data[0] == 3 && !(data[1] & 0x3)) { return [new_raw_buf(usz), 2]; }\n\n\t/* bit offset */\n\tvar boff = 0;\n\n\t/* header includes final bit and type bits */\n\tvar header = 0;\n\n\tvar outbuf = new_unsafe_buf(usz ? usz : (1<<18));\n\tvar woff = 0;\n\tvar OL = outbuf.length>>>0;\n\tvar max_len_1 = 0, max_len_2 = 0;\n\n\twhile((header&1) == 0) {\n\t\theader = read_bits_3(data, boff); boff += 3;\n\t\tif((header >>> 1) == 0) {\n\t\t\t/* Stored block */\n\t\t\tif(boff & 7) boff += 8 - (boff&7);\n\t\t\t/* 2 bytes sz, 2 bytes bit inverse */\n\t\t\tvar sz = data[boff>>>3] | data[(boff>>>3)+1]<<8;\n\t\t\tboff += 32;\n\t\t\t/* push sz bytes */\n\t\t\tif(!usz && OL < woff + sz) { outbuf = realloc(outbuf, woff + sz); OL = outbuf.length; }\n\t\t\tif(typeof data.copy === 'function') {\n\t\t\t\t// $FlowIgnore\n\t\t\t\tdata.copy(outbuf, woff, boff>>>3, (boff>>>3)+sz);\n\t\t\t\twoff += sz; boff += 8*sz;\n\t\t\t} else while(sz-- > 0) { outbuf[woff++] = data[boff>>>3]; boff += 8; }\n\t\t\tcontinue;\n\t\t} else if((header >>> 1) == 1) {\n\t\t\t/* Fixed Huffman */\n\t\t\tmax_len_1 = 9; max_len_2 = 5;\n\t\t} else {\n\t\t\t/* Dynamic Huffman */\n\t\t\tboff = dyn(data, boff);\n\t\t\tmax_len_1 = dyn_len_1; max_len_2 = dyn_len_2;\n\t\t}\n\t\tfor(;;) { // while(true) is apparently out of vogue in modern JS circles\n\t\t\tif(!usz && (OL < woff + 32767)) { outbuf = realloc(outbuf, woff + 32767); OL = outbuf.length; }\n\t\t\t/* ingest code and move read head */\n\t\t\tvar bits = read_bits_n(data, boff, max_len_1);\n\t\t\tvar code = (header>>>1) == 1 ? fix_lmap[bits] : dyn_lmap[bits];\n\t\t\tboff += code & 15; code >>>= 4;\n\t\t\t/* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */\n\t\t\tif(((code>>>8)&0xFF) === 0) outbuf[woff++] = code;\n\t\t\telse if(code == 256) break;\n\t\t\telse {\n\t\t\t\tcode -= 257;\n\t\t\t\tvar len_eb = (code < 8) ? 0 : ((code-4)>>2); if(len_eb > 5) len_eb = 0;\n\t\t\t\tvar tgt = woff + LEN_LN[code];\n\t\t\t\t/* length extra bits */\n\t\t\t\tif(len_eb > 0) {\n\t\t\t\t\ttgt += read_bits_n(data, boff, len_eb);\n\t\t\t\t\tboff += len_eb;\n\t\t\t\t}\n\n\t\t\t\t/* dist code */\n\t\t\t\tbits = read_bits_n(data, boff, max_len_2);\n\t\t\t\tcode = (header>>>1) == 1 ? fix_dmap[bits] : dyn_dmap[bits];\n\t\t\t\tboff += code & 15; code >>>= 4;\n\t\t\t\tvar dst_eb = (code < 4 ? 0 : (code-2)>>1);\n\t\t\t\tvar dst = DST_LN[code];\n\t\t\t\t/* dist extra bits */\n\t\t\t\tif(dst_eb > 0) {\n\t\t\t\t\tdst += read_bits_n(data, boff, dst_eb);\n\t\t\t\t\tboff += dst_eb;\n\t\t\t\t}\n\n\t\t\t\t/* in the common case, manual byte copy is faster than TA set / Buffer copy */\n\t\t\t\tif(!usz && OL < tgt) { outbuf = realloc(outbuf, tgt + 100); OL = outbuf.length; }\n\t\t\t\twhile(woff < tgt) { outbuf[woff] = outbuf[woff - dst]; ++woff; }\n\t\t\t}\n\t\t}\n\t}\n\treturn [usz ? outbuf : outbuf.slice(0, woff), (boff+7)>>>3];\n}\n\nfunction _inflate(payload, usz) {\n\tvar data = payload.slice(payload.l||0);\n\tvar out = inflate(data, usz);\n\tpayload.l += out[1];\n\treturn out[0];\n}\n\nfunction warn_or_throw(wrn, msg) {\n\tif(wrn) { if(typeof console !== 'undefined') console.error(msg); }\n\telse throw new Error(msg);\n}\n\nfunction parse_zip(file, options) {\n\tvar blob = file;\n\tprep_blob(blob, 0);\n\n\tvar FileIndex = [], FullPaths = [];\n\tvar o = {\n\t\tFileIndex: FileIndex,\n\t\tFullPaths: FullPaths\n\t};\n\tinit_cfb(o, { root: options.root });\n\n\t/* find end of central directory, start just after signature */\n\tvar i = blob.length - 4;\n\twhile((blob[i] != 0x50 || blob[i+1] != 0x4b || blob[i+2] != 0x05 || blob[i+3] != 0x06) && i >= 0) --i;\n\tblob.l = i + 4;\n\n\t/* parse end of central directory */\n\tblob.l += 4;\n\tvar fcnt = blob.read_shift(2);\n\tblob.l += 6;\n\tvar start_cd = blob.read_shift(4);\n\n\t/* parse central directory */\n\tblob.l = start_cd;\n\n\tfor(i = 0; i < fcnt; ++i) {\n\t\t/* trust local file header instead of CD entry */\n\t\tblob.l += 20;\n\t\tvar csz = blob.read_shift(4);\n\t\tvar usz = blob.read_shift(4);\n\t\tvar namelen = blob.read_shift(2);\n\t\tvar efsz = blob.read_shift(2);\n\t\tvar fcsz = blob.read_shift(2);\n\t\tblob.l += 8;\n\t\tvar offset = blob.read_shift(4);\n\t\tvar EF = parse_extra_field(blob.slice(blob.l+namelen, blob.l+namelen+efsz));\n\t\tblob.l += namelen + efsz + fcsz;\n\n\t\tvar L = blob.l;\n\t\tblob.l = offset + 4;\n\t\tparse_local_file(blob, csz, usz, o, EF);\n\t\tblob.l = L;\n\t}\n\n\treturn o;\n}\n\n\n/* head starts just after local file header signature */\nfunction parse_local_file(blob, csz, usz, o, EF) {\n\t/* [local file header] */\n\tblob.l += 2;\n\tvar flags = blob.read_shift(2);\n\tvar meth = blob.read_shift(2);\n\tvar date = parse_dos_date(blob);\n\n\tif(flags & 0x2041) throw new Error(\"Unsupported ZIP encryption\");\n\tvar crc32 = blob.read_shift(4);\n\tvar _csz = blob.read_shift(4);\n\tvar _usz = blob.read_shift(4);\n\n\tvar namelen = blob.read_shift(2);\n\tvar efsz = blob.read_shift(2);\n\n\t// TODO: flags & (1<<11) // UTF8\n\tvar name = \"\"; for(var i = 0; i < namelen; ++i) name += String.fromCharCode(blob[blob.l++]);\n\tif(efsz) {\n\t\tvar ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));\n\t\tif((ef[0x5455]||{}).mt) date = ef[0x5455].mt;\n\t\tif(((EF||{})[0x5455]||{}).mt) date = EF[0x5455].mt;\n\t}\n\tblob.l += efsz;\n\n\t/* [encryption header] */\n\n\t/* [file data] */\n\tvar data = blob.slice(blob.l, blob.l + _csz);\n\tswitch(meth) {\n\t\tcase 8: data = _inflateRawSync(blob, _usz); break;\n\t\tcase 0: break; // TODO: scan for magic number\n\t\tdefault: throw new Error(\"Unsupported ZIP Compression method \" + meth);\n\t}\n\n\t/* [data descriptor] */\n\tvar wrn = false;\n\tif(flags & 8) {\n\t\tcrc32 = blob.read_shift(4);\n\t\tif(crc32 == 0x08074b50) { crc32 = blob.read_shift(4); wrn = true; }\n\t\t_csz = blob.read_shift(4);\n\t\t_usz = blob.read_shift(4);\n\t}\n\n\tif(_csz != csz) warn_or_throw(wrn, \"Bad compressed size: \" + csz + \" != \" + _csz);\n\tif(_usz != usz) warn_or_throw(wrn, \"Bad uncompressed size: \" + usz + \" != \" + _usz);\n\tvar _crc32 = CRC32.buf(data, 0);\n\tif((crc32>>0) != (_crc32>>0)) warn_or_throw(wrn, \"Bad CRC32 checksum: \" + crc32 + \" != \" + _crc32);\n\tcfb_add(o, name, data, {unsafe: true, mt: date});\n}\nfunction write_zip(cfb, options) {\n\tvar _opts = options || {};\n\tvar out = [], cdirs = [];\n\tvar o = new_buf(1);\n\tvar method = (_opts.compression ? 8 : 0), flags = 0;\n\tvar desc = false;\n\tif(desc) flags |= 8;\n\tvar i = 0, j = 0;\n\n\tvar start_cd = 0, fcnt = 0;\n\tvar root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];\n\tvar crcs = [];\n\tvar sz_cd = 0;\n\n\tfor(i = 1; i < cfb.FullPaths.length; ++i) {\n\t\tfp = cfb.FullPaths[i].slice(root.length); fi = cfb.FileIndex[i];\n\t\tif(!fi.size || !fi.content || fp == \"\\u0001Sh33tJ5\") continue;\n\t\tvar start = start_cd;\n\n\t\t/* TODO: CP437 filename */\n\t\tvar namebuf = new_buf(fp.length);\n\t\tfor(j = 0; j < fp.length; ++j) namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);\n\t\tnamebuf = namebuf.slice(0, namebuf.l);\n\t\tcrcs[fcnt] = CRC32.buf(fi.content, 0);\n\n\t\tvar outbuf = fi.content;\n\t\tif(method == 8) outbuf = _deflateRawSync(outbuf);\n\n\t\t/* local file header */\n\t\to = new_buf(30);\n\t\to.write_shift(4, 0x04034b50);\n\t\to.write_shift(2, 20);\n\t\to.write_shift(2, flags);\n\t\to.write_shift(2, method);\n\t\t/* TODO: last mod file time/date */\n\t\tif(fi.mt) write_dos_date(o, fi.mt);\n\t\telse o.write_shift(4, 0);\n\t\to.write_shift(-4, (flags & 8) ? 0 : crcs[fcnt]);\n\t\to.write_shift(4,  (flags & 8) ? 0 : outbuf.length);\n\t\to.write_shift(4,  (flags & 8) ? 0 : fi.content.length);\n\t\to.write_shift(2, namebuf.length);\n\t\to.write_shift(2, 0);\n\n\t\tstart_cd += o.length;\n\t\tout.push(o);\n\t\tstart_cd += namebuf.length;\n\t\tout.push(namebuf);\n\n\t\t/* TODO: extra fields? */\n\n\t\t/* TODO: encryption header ? */\n\n\t\tstart_cd += outbuf.length;\n\t\tout.push(outbuf);\n\n\t\t/* data descriptor */\n\t\tif(flags & 8) {\n\t\t\to = new_buf(12);\n\t\t\to.write_shift(-4, crcs[fcnt]);\n\t\t\to.write_shift(4, outbuf.length);\n\t\t\to.write_shift(4, fi.content.length);\n\t\t\tstart_cd += o.l;\n\t\t\tout.push(o);\n\t\t}\n\n\t\t/* central directory */\n\t\to = new_buf(46);\n\t\to.write_shift(4, 0x02014b50);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 20);\n\t\to.write_shift(2, flags);\n\t\to.write_shift(2, method);\n\t\to.write_shift(4, 0); /* TODO: last mod file time/date */\n\t\to.write_shift(-4, crcs[fcnt]);\n\n\t\to.write_shift(4, outbuf.length);\n\t\to.write_shift(4, fi.content.length);\n\t\to.write_shift(2, namebuf.length);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(2, 0);\n\t\to.write_shift(4, 0);\n\t\to.write_shift(4, start);\n\n\t\tsz_cd += o.l;\n\t\tcdirs.push(o);\n\t\tsz_cd += namebuf.length;\n\t\tcdirs.push(namebuf);\n\t\t++fcnt;\n\t}\n\n\t/* end of central directory */\n\to = new_buf(22);\n\to.write_shift(4, 0x06054b50);\n\to.write_shift(2, 0);\n\to.write_shift(2, 0);\n\to.write_shift(2, fcnt);\n\to.write_shift(2, fcnt);\n\to.write_shift(4, sz_cd);\n\to.write_shift(4, start_cd);\n\to.write_shift(2, 0);\n\n\treturn bconcat(([bconcat((out)), bconcat(cdirs), o]));\n}\nvar ContentTypeMap = ({\n\t\"htm\": \"text/html\",\n\t\"xml\": \"text/xml\",\n\n\t\"gif\": \"image/gif\",\n\t\"jpg\": \"image/jpeg\",\n\t\"png\": \"image/png\",\n\n\t\"mso\": \"application/x-mso\",\n\t\"thmx\": \"application/vnd.ms-officetheme\",\n\t\"sh33tj5\": \"application/octet-stream\"\n});\n\nfunction get_content_type(fi, fp) {\n\tif(fi.ctype) return fi.ctype;\n\n\tvar ext = fi.name || \"\", m = ext.match(/\\.([^\\.]+)$/);\n\tif(m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n\n\tif(fp) {\n\t\tm = (ext = fp).match(/[\\.\\\\]([^\\.\\\\])+$/);\n\t\tif(m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];\n\t}\n\n\treturn \"application/octet-stream\";\n}\n\n/* 76 character chunks TODO: intertwine encoding */\nfunction write_base64_76(bstr) {\n\tvar data = Base64.encode(bstr);\n\tvar o = [];\n\tfor(var i = 0; i < data.length; i+= 76) o.push(data.slice(i, i+76));\n\treturn o.join(\"\\r\\n\") + \"\\r\\n\";\n}\n\n/*\nRules for QP:\n\t- escape =## applies for all non-display characters and literal \"=\"\n\t- space or tab at end of line must be encoded\n\t- \\r\\n newlines can be preserved, but bare \\r and \\n must be escaped\n\t- lines must not exceed 76 characters, use soft breaks =\\r\\n\n\nTODO: Some files from word appear to write line extensions with bare equals:\n\n```\n<table class=3DMsoTableGrid border=3D1 cellspacing=3D0 cellpadding=3D0 width=\n=\"70%\"\n```\n*/\nfunction write_quoted_printable(text) {\n\tvar encoded = text.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF=]/g, function(c) {\n\t\tvar w = c.charCodeAt(0).toString(16).toUpperCase();\n\t\treturn \"=\" + (w.length == 1 ? \"0\" + w : w);\n\t});\n\n\tencoded = encoded.replace(/ $/mg, \"=20\").replace(/\\t$/mg, \"=09\");\n\n\tif(encoded.charAt(0) == \"\\n\") encoded = \"=0D\" + encoded.slice(1);\n\tencoded = encoded.replace(/\\r(?!\\n)/mg, \"=0D\").replace(/\\n\\n/mg, \"\\n=0A\").replace(/([^\\r\\n])\\n/mg, \"$1=0A\");\n\n\tvar o = [], split = encoded.split(\"\\r\\n\");\n\tfor(var si = 0; si < split.length; ++si) {\n\t\tvar str = split[si];\n\t\tif(str.length == 0) { o.push(\"\"); continue; }\n\t\tfor(var i = 0; i < str.length;) {\n\t\t\tvar end = 76;\n\t\t\tvar tmp = str.slice(i, i + end);\n\t\t\tif(tmp.charAt(end - 1) == \"=\") end --;\n\t\t\telse if(tmp.charAt(end - 2) == \"=\") end -= 2;\n\t\t\telse if(tmp.charAt(end - 3) == \"=\") end -= 3;\n\t\t\ttmp = str.slice(i, i + end);\n\t\t\ti += end;\n\t\t\tif(i < str.length) tmp += \"=\";\n\t\t\to.push(tmp);\n\t\t}\n\t}\n\n\treturn o.join(\"\\r\\n\");\n}\nfunction parse_quoted_printable(data) {\n\tvar o = [];\n\n\t/* unify long lines */\n\tfor(var di = 0; di < data.length; ++di) {\n\t\tvar line = data[di];\n\t\twhile(di <= data.length && line.charAt(line.length - 1) == \"=\") line = line.slice(0, line.length - 1) + data[++di];\n\t\to.push(line);\n\t}\n\n\t/* decode */\n\tfor(var oi = 0; oi < o.length; ++oi) o[oi] = o[oi].replace(/=[0-9A-Fa-f]{2}/g, function($$) { return String.fromCharCode(parseInt($$.slice(1), 16)); });\n\treturn s2a(o.join(\"\\r\\n\"));\n}\n\n\nfunction parse_mime(cfb, data, root) {\n\tvar fname = \"\", cte = \"\", ctype = \"\", fdata;\n\tvar di = 0;\n\tfor(;di < 10; ++di) {\n\t\tvar line = data[di];\n\t\tif(!line || line.match(/^\\s*$/)) break;\n\t\tvar m = line.match(/^(.*?):\\s*([^\\s].*)$/);\n\t\tif(m) switch(m[1].toLowerCase()) {\n\t\t\tcase \"content-location\": fname = m[2].trim(); break;\n\t\t\tcase \"content-type\": ctype = m[2].trim(); break;\n\t\t\tcase \"content-transfer-encoding\": cte = m[2].trim(); break;\n\t\t}\n\t}\n\t++di;\n\tswitch(cte.toLowerCase()) {\n\t\tcase 'base64': fdata = s2a(Base64.decode(data.slice(di).join(\"\"))); break;\n\t\tcase 'quoted-printable': fdata = parse_quoted_printable(data.slice(di)); break;\n\t\tdefault: throw new Error(\"Unsupported Content-Transfer-Encoding \" + cte);\n\t}\n\tvar file = cfb_add(cfb, fname.slice(root.length), fdata, {unsafe: true});\n\tif(ctype) file.ctype = ctype;\n}\n\nfunction parse_mad(file, options) {\n\tif(a2s(file.slice(0,13)).toLowerCase() != \"mime-version:\") throw new Error(\"Unsupported MAD header\");\n\tvar root = (options && options.root || \"\");\n\t// $FlowIgnore\n\tvar data = (has_buf && Buffer.isBuffer(file) ? file.toString(\"binary\") : a2s(file)).split(\"\\r\\n\");\n\tvar di = 0, row = \"\";\n\n\t/* if root is not specified, scan for the common prefix */\n\tfor(di = 0; di < data.length; ++di) {\n\t\trow = data[di];\n\t\tif(!/^Content-Location:/i.test(row)) continue;\n\t\trow = row.slice(row.indexOf(\"file\"));\n\t\tif(!root) root = row.slice(0, row.lastIndexOf(\"/\") + 1);\n\t\tif(row.slice(0, root.length) == root) continue;\n\t\twhile(root.length > 0) {\n\t\t\troot = root.slice(0, root.length - 1);\n\t\t\troot = root.slice(0, root.lastIndexOf(\"/\") + 1);\n\t\t\tif(row.slice(0,root.length) == root) break;\n\t\t}\n\t}\n\n\tvar mboundary = (data[1] || \"\").match(/boundary=\"(.*?)\"/);\n\tif(!mboundary) throw new Error(\"MAD cannot find boundary\");\n\tvar boundary = \"--\" + (mboundary[1] || \"\");\n\n\tvar FileIndex = [], FullPaths = [];\n\tvar o = {\n\t\tFileIndex: FileIndex,\n\t\tFullPaths: FullPaths\n\t};\n\tinit_cfb(o);\n\tvar start_di, fcnt = 0;\n\tfor(di = 0; di < data.length; ++di) {\n\t\tvar line = data[di];\n\t\tif(line !== boundary && line !== boundary + \"--\") continue;\n\t\tif(fcnt++) parse_mime(o, data.slice(start_di, di), root);\n\t\tstart_di = di;\n\t}\n\treturn o;\n}\n\nfunction write_mad(cfb, options) {\n\tvar opts = options || {};\n\tvar boundary = opts.boundary || \"SheetJS\";\n\tboundary = '------=' + boundary;\n\n\tvar out = [\n\t\t'MIME-Version: 1.0',\n\t\t'Content-Type: multipart/related; boundary=\"' + boundary.slice(2) + '\"',\n\t\t'',\n\t\t'',\n\t\t''\n\t];\n\n\tvar root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];\n\tfor(var i = 1; i < cfb.FullPaths.length; ++i) {\n\t\tfp = cfb.FullPaths[i].slice(root.length);\n\t\tfi = cfb.FileIndex[i];\n\t\tif(!fi.size || !fi.content || fp == \"\\u0001Sh33tJ5\") continue;\n\n\t\t/* Normalize filename */\n\t\tfp = fp.replace(/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7E-\\xFF]/g, function(c) {\n\t\t\treturn \"_x\" + c.charCodeAt(0).toString(16) + \"_\";\n\t\t}).replace(/[\\u0080-\\uFFFF]/g, function(u) {\n\t\t\treturn \"_u\" + u.charCodeAt(0).toString(16) + \"_\";\n\t\t});\n\n\t\t/* Extract content as binary string */\n\t\tvar ca = fi.content;\n\t\t// $FlowIgnore\n\t\tvar cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString(\"binary\") : a2s(ca);\n\n\t\t/* 4/5 of first 1024 chars ascii -> quoted printable, else base64 */\n\t\tvar dispcnt = 0, L = Math.min(1024, cstr.length), cc = 0;\n\t\tfor(var csl = 0; csl <= L; ++csl) if((cc=cstr.charCodeAt(csl)) >= 0x20 && cc < 0x80) ++dispcnt;\n\t\tvar qp = dispcnt >= L * 4 / 5;\n\n\t\tout.push(boundary);\n\t\tout.push('Content-Location: ' + (opts.root || 'file:///C:/SheetJS/') + fp);\n\t\tout.push('Content-Transfer-Encoding: ' + (qp ? 'quoted-printable' : 'base64'));\n\t\tout.push('Content-Type: ' + get_content_type(fi, fp));\n\t\tout.push('');\n\n\t\tout.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));\n\t}\n\tout.push(boundary + '--\\r\\n');\n\treturn out.join(\"\\r\\n\");\n}\nfunction cfb_new(opts) {\n\tvar o = ({});\n\tinit_cfb(o, opts);\n\treturn o;\n}\n\nfunction cfb_add(cfb, name, content, opts) {\n\tvar unsafe = opts && opts.unsafe;\n\tif(!unsafe) init_cfb(cfb);\n\tvar file = !unsafe && CFB.find(cfb, name);\n\tif(!file) {\n\t\tvar fpath = cfb.FullPaths[0];\n\t\tif(name.slice(0, fpath.length) == fpath) fpath = name;\n\t\telse {\n\t\t\tif(fpath.slice(-1) != \"/\") fpath += \"/\";\n\t\t\tfpath = (fpath + name).replace(\"//\",\"/\");\n\t\t}\n\t\tfile = ({name: filename(name), type: 2});\n\t\tcfb.FileIndex.push(file);\n\t\tcfb.FullPaths.push(fpath);\n\t\tif(!unsafe) CFB.utils.cfb_gc(cfb);\n\t}\nfile.content = (content);\n\tfile.size = content ? content.length : 0;\n\tif(opts) {\n\t\tif(opts.CLSID) file.clsid = opts.CLSID;\n\t\tif(opts.mt) file.mt = opts.mt;\n\t\tif(opts.ct) file.ct = opts.ct;\n\t}\n\treturn file;\n}\n\nfunction cfb_del(cfb, name) {\n\tinit_cfb(cfb);\n\tvar file = CFB.find(cfb, name);\n\tif(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {\n\t\tcfb.FileIndex.splice(j, 1);\n\t\tcfb.FullPaths.splice(j, 1);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction cfb_mov(cfb, old_name, new_name) {\n\tinit_cfb(cfb);\n\tvar file = CFB.find(cfb, old_name);\n\tif(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {\n\t\tcfb.FileIndex[j].name = filename(new_name);\n\t\tcfb.FullPaths[j] = new_name;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction cfb_gc(cfb) { rebuild_cfb(cfb, true); }\n\nexports.find = find;\nexports.read = read;\nexports.parse = parse;\nexports.write = write;\nexports.writeFile = write_file;\nexports.utils = {\n\tcfb_new: cfb_new,\n\tcfb_add: cfb_add,\n\tcfb_del: cfb_del,\n\tcfb_mov: cfb_mov,\n\tcfb_gc: cfb_gc,\n\tReadShift: ReadShift,\n\tCheckField: CheckField,\n\tprep_blob: prep_blob,\n\tbconcat: bconcat,\n\tuse_zlib: use_zlib,\n\t_deflateRaw: _deflate,\n\t_inflateRaw: _inflate,\n\tconsts: consts\n};\n\nreturn exports;\n})();\n\nif(typeof require !== 'undefined' && typeof module !== 'undefined' && typeof DO_NOT_EXPORT_CFB === 'undefined') { module.exports = CFB; }\n"]},"metadata":{},"sourceType":"script"}