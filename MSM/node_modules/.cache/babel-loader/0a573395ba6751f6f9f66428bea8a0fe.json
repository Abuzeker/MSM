{"ast":null,"code":"\"use strict\";\n/* eslint camelcase:off */\n\nvar _defineProperty = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ArgHandler = require(\"./ArgHandler\");\n\nvar _ = require(\"lodash\");\n\nvar xmlq = require(\"./xmlq\");\n\nvar colorIndexes = require(\"./colorIndexes\");\n/**\n * A style.\n * @ignore\n */\n\n\nvar Style = /*#__PURE__*/function () {\n  /**\n   * Creates a new instance of _Style.\n   * @constructor\n   * @param {StyleSheet} styleSheet - The styleSheet.\n   * @param {number} id - The style ID.\n   * @param {{}} xfNode - The xf node.\n   * @param {{}} fontNode - The font node.\n   * @param {{}} fillNode - The fill node.\n   * @param {{}} borderNode - The border node.\n   */\n  function Style(styleSheet, id, xfNode, fontNode, fillNode, borderNode) {\n    _classCallCheck(this, Style);\n\n    this._styleSheet = styleSheet;\n    this._id = id;\n    this._xfNode = xfNode;\n    this._fontNode = fontNode;\n    this._fillNode = fillNode;\n    this._borderNode = borderNode;\n  }\n  /**\n   * Gets the style ID.\n   * @returns {number} The ID.\n   */\n\n\n  _createClass(Style, [{\n    key: \"id\",\n    value: function id() {\n      return this._id;\n    }\n    /**\n     * Gets or sets a style.\n     * @param {string} name - The style name.\n     * @param {*} [value] - The value to set.\n     * @returns {*|Style} The value if getting or the style if setting.\n     */\n\n  }, {\n    key: \"style\",\n    value: function style() {\n      var _this = this;\n\n      return new ArgHandler(\"_Style.style\").case('string', function (name) {\n        var getterName = \"_get_\".concat(name);\n        if (!_this[getterName]) throw new Error(\"_Style.style: '\".concat(name, \"' is not a valid style\"));\n        return _this[getterName]();\n      }).case(['string', '*'], function (name, value) {\n        var setterName = \"_set_\".concat(name);\n        if (!_this[setterName]) throw new Error(\"_Style.style: '\".concat(name, \"' is not a valid style\"));\n\n        _this[setterName](value);\n\n        return _this;\n      }).handle(arguments);\n    }\n  }, {\n    key: \"_getColor\",\n    value: function _getColor(node, name) {\n      var child = xmlq.findChild(node, name);\n      if (!child || !child.attributes) return;\n      var color = {};\n      if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n      if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n      if (_.isEmpty(color)) return;\n      return color;\n    }\n  }, {\n    key: \"_setColor\",\n    value: function _setColor(node, name, color) {\n      if (typeof color === \"string\") color = {\n        rgb: color\n      };else if (typeof color === \"number\") color = {\n        theme: color\n      };\n      xmlq.setChildAttributes(node, name, {\n        rgb: color && color.rgb && color.rgb.toUpperCase(),\n        indexed: null,\n        theme: color && color.theme,\n        tint: color && color.tint\n      });\n      xmlq.removeChildIfEmpty(node, 'color');\n    }\n  }, {\n    key: \"_get_bold\",\n    value: function _get_bold() {\n      return xmlq.hasChild(this._fontNode, 'b');\n    }\n  }, {\n    key: \"_set_bold\",\n    value: function _set_bold(bold) {\n      if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");else xmlq.removeChild(this._fontNode, 'b');\n    }\n  }, {\n    key: \"_get_italic\",\n    value: function _get_italic() {\n      return xmlq.hasChild(this._fontNode, 'i');\n    }\n  }, {\n    key: \"_set_italic\",\n    value: function _set_italic(italic) {\n      if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");else xmlq.removeChild(this._fontNode, 'i');\n    }\n  }, {\n    key: \"_get_underline\",\n    value: function _get_underline() {\n      var uNode = xmlq.findChild(this._fontNode, 'u');\n      return uNode ? uNode.attributes.val || true : false;\n    }\n  }, {\n    key: \"_set_underline\",\n    value: function _set_underline(underline) {\n      if (underline) {\n        var uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n        var val = typeof underline === 'string' ? underline : null;\n        xmlq.setAttributes(uNode, {\n          val: val\n        });\n      } else {\n        xmlq.removeChild(this._fontNode, 'u');\n      }\n    }\n  }, {\n    key: \"_get_strikethrough\",\n    value: function _get_strikethrough() {\n      return xmlq.hasChild(this._fontNode, 'strike');\n    }\n  }, {\n    key: \"_set_strikethrough\",\n    value: function _set_strikethrough(strikethrough) {\n      if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");else xmlq.removeChild(this._fontNode, 'strike');\n    }\n  }, {\n    key: \"_getFontVerticalAlignment\",\n    value: function _getFontVerticalAlignment() {\n      return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n  }, {\n    key: \"_setFontVerticalAlignment\",\n    value: function _setFontVerticalAlignment(alignment) {\n      xmlq.setChildAttributes(this._fontNode, 'vertAlign', {\n        val: alignment\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n  }, {\n    key: \"_get_subscript\",\n    value: function _get_subscript() {\n      return this._getFontVerticalAlignment() === \"subscript\";\n    }\n  }, {\n    key: \"_set_subscript\",\n    value: function _set_subscript(subscript) {\n      this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n  }, {\n    key: \"_get_superscript\",\n    value: function _get_superscript() {\n      return this._getFontVerticalAlignment() === \"superscript\";\n    }\n  }, {\n    key: \"_set_superscript\",\n    value: function _set_superscript(superscript) {\n      this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n  }, {\n    key: \"_get_fontSize\",\n    value: function _get_fontSize() {\n      return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n  }, {\n    key: \"_set_fontSize\",\n    value: function _set_fontSize(size) {\n      xmlq.setChildAttributes(this._fontNode, 'sz', {\n        val: size\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n  }, {\n    key: \"_get_fontFamily\",\n    value: function _get_fontFamily() {\n      return xmlq.getChildAttribute(this._fontNode, 'name', \"val\");\n    }\n  }, {\n    key: \"_set_fontFamily\",\n    value: function _set_fontFamily(family) {\n      xmlq.setChildAttributes(this._fontNode, 'name', {\n        val: family\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'name');\n    }\n  }, {\n    key: \"_get_fontGenericFamily\",\n    value: function _get_fontGenericFamily() {\n      return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n  }, {\n    key: \"_set_fontGenericFamily\",\n    value: function _set_fontGenericFamily(genericFamily) {\n      xmlq.setChildAttributes(this._fontNode, 'family', {\n        val: genericFamily\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n  }, {\n    key: \"_get_fontColor\",\n    value: function _get_fontColor() {\n      return this._getColor(this._fontNode, \"color\");\n    }\n  }, {\n    key: \"_set_fontColor\",\n    value: function _set_fontColor(color) {\n      this._setColor(this._fontNode, \"color\", color);\n    }\n  }, {\n    key: \"_get_fontScheme\",\n    value: function _get_fontScheme() {\n      // can be 'minor', 'major', 'none'\n      return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n  }, {\n    key: \"_set_fontScheme\",\n    value: function _set_fontScheme(scheme) {\n      xmlq.setChildAttributes(this._fontNode, 'scheme', {\n        val: scheme\n      });\n      xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n  }, {\n    key: \"_get_horizontalAlignment\",\n    value: function _get_horizontalAlignment() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"horizontal\");\n    }\n  }, {\n    key: \"_set_horizontalAlignment\",\n    value: function _set_horizontalAlignment(alignment) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        horizontal: alignment\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_justifyLastLine\",\n    value: function _get_justifyLastLine() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"justifyLastLine\") === 1;\n    }\n  }, {\n    key: \"_set_justifyLastLine\",\n    value: function _set_justifyLastLine(justifyLastLine) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        justifyLastLine: justifyLastLine ? 1 : null\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_indent\",\n    value: function _get_indent() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"indent\");\n    }\n  }, {\n    key: \"_set_indent\",\n    value: function _set_indent(indent) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        indent: indent\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_verticalAlignment\",\n    value: function _get_verticalAlignment() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"vertical\");\n    }\n  }, {\n    key: \"_set_verticalAlignment\",\n    value: function _set_verticalAlignment(alignment) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        vertical: alignment\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_wrapText\",\n    value: function _get_wrapText() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"wrapText\") === 1;\n    }\n  }, {\n    key: \"_set_wrapText\",\n    value: function _set_wrapText(wrapText) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        wrapText: wrapText ? 1 : null\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_shrinkToFit\",\n    value: function _get_shrinkToFit() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"shrinkToFit\") === 1;\n    }\n  }, {\n    key: \"_set_shrinkToFit\",\n    value: function _set_shrinkToFit(shrinkToFit) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        shrinkToFit: shrinkToFit ? 1 : null\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_textDirection\",\n    value: function _get_textDirection() {\n      var readingOrder = xmlq.getChildAttribute(this._xfNode, 'alignment', \"readingOrder\");\n      if (readingOrder === 1) return \"left-to-right\";\n      if (readingOrder === 2) return \"right-to-left\";\n      return readingOrder;\n    }\n  }, {\n    key: \"_set_textDirection\",\n    value: function _set_textDirection(textDirection) {\n      var readingOrder;\n      if (textDirection === \"left-to-right\") readingOrder = 1;else if (textDirection === \"right-to-left\") readingOrder = 2;\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        readingOrder: readingOrder\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_getTextRotation\",\n    value: function _getTextRotation() {\n      return xmlq.getChildAttribute(this._xfNode, 'alignment', \"textRotation\");\n    }\n  }, {\n    key: \"_setTextRotation\",\n    value: function _setTextRotation(textRotation) {\n      xmlq.setChildAttributes(this._xfNode, 'alignment', {\n        textRotation: textRotation\n      });\n      xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n  }, {\n    key: \"_get_textRotation\",\n    value: function _get_textRotation() {\n      var textRotation = this._getTextRotation(); // Negative angles in Excel correspond to values > 90 in OOXML.\n\n\n      if (textRotation > 90) textRotation = 90 - textRotation;\n      return textRotation;\n    }\n  }, {\n    key: \"_set_textRotation\",\n    value: function _set_textRotation(textRotation) {\n      // Negative angles in Excel correspond to values > 90 in OOXML.\n      if (textRotation < 0) textRotation = 90 - textRotation;\n\n      this._setTextRotation(textRotation);\n    }\n  }, {\n    key: \"_get_angleTextCounterclockwise\",\n    value: function _get_angleTextCounterclockwise() {\n      return this._getTextRotation() === 45;\n    }\n  }, {\n    key: \"_set_angleTextCounterclockwise\",\n    value: function _set_angleTextCounterclockwise(value) {\n      this._setTextRotation(value ? 45 : null);\n    }\n  }, {\n    key: \"_get_angleTextClockwise\",\n    value: function _get_angleTextClockwise() {\n      return this._getTextRotation() === 135;\n    }\n  }, {\n    key: \"_set_angleTextClockwise\",\n    value: function _set_angleTextClockwise(value) {\n      this._setTextRotation(value ? 135 : null);\n    }\n  }, {\n    key: \"_get_rotateTextUp\",\n    value: function _get_rotateTextUp() {\n      return this._getTextRotation() === 90;\n    }\n  }, {\n    key: \"_set_rotateTextUp\",\n    value: function _set_rotateTextUp(value) {\n      this._setTextRotation(value ? 90 : null);\n    }\n  }, {\n    key: \"_get_rotateTextDown\",\n    value: function _get_rotateTextDown() {\n      return this._getTextRotation() === 180;\n    }\n  }, {\n    key: \"_set_rotateTextDown\",\n    value: function _set_rotateTextDown(value) {\n      this._setTextRotation(value ? 180 : null);\n    }\n  }, {\n    key: \"_get_verticalText\",\n    value: function _get_verticalText() {\n      return this._getTextRotation() === 255;\n    }\n  }, {\n    key: \"_set_verticalText\",\n    value: function _set_verticalText(value) {\n      this._setTextRotation(value ? 255 : null);\n    }\n  }, {\n    key: \"_get_fill\",\n    value: function _get_fill() {\n      var _this2 = this;\n\n      var patternFillNode = xmlq.findChild(this._fillNode, 'patternFill'); // jq.get(this._fillNode, \"patternFill[0]\");\n\n      var gradientFillNode = xmlq.findChild(this._fillNode, 'gradientFill'); // jq.get(this._fillNode, \"gradientFill[0]\");\n\n      var patternType = patternFillNode && patternFillNode.attributes.patternType; // jq.get(patternFillNode, \"$.patternType\");\n\n      if (patternType === \"solid\") {\n        return {\n          type: \"solid\",\n          color: this._getColor(patternFillNode, \"fgColor\")\n        };\n      }\n\n      if (patternType) {\n        return {\n          type: \"pattern\",\n          pattern: patternType,\n          foreground: this._getColor(patternFillNode, \"fgColor\"),\n          background: this._getColor(patternFillNode, \"bgColor\")\n        };\n      }\n\n      if (gradientFillNode) {\n        var gradientType = gradientFillNode.attributes.type || \"linear\";\n        var fill = {\n          type: \"gradient\",\n          gradientType: gradientType,\n          stops: _.map(gradientFillNode.children, function (stop) {\n            return {\n              position: stop.attributes.position,\n              color: _this2._getColor(stop, \"color\")\n            };\n          })\n        };\n\n        if (gradientType === \"linear\") {\n          fill.angle = gradientFillNode.attributes.degree;\n        } else {\n          fill.left = gradientFillNode.attributes.left;\n          fill.right = gradientFillNode.attributes.right;\n          fill.top = gradientFillNode.attributes.top;\n          fill.bottom = gradientFillNode.attributes.bottom;\n        }\n\n        return fill;\n      }\n    }\n  }, {\n    key: \"_set_fill\",\n    value: function _set_fill(fill) {\n      var _this3 = this;\n\n      this._fillNode.children = []; // No fill\n\n      if (_.isNil(fill)) return; // Pattern fill\n\n      if (fill.type === \"pattern\") {\n        var _patternFill = {\n          name: 'patternFill',\n          attributes: {\n            patternType: fill.pattern\n          },\n          children: []\n        };\n\n        this._fillNode.children.push(_patternFill);\n\n        this._setColor(_patternFill, \"fgColor\", fill.foreground);\n\n        this._setColor(_patternFill, \"bgColor\", fill.background);\n\n        return;\n      } // Gradient fill\n\n\n      if (fill.type === \"gradient\") {\n        var gradientFill = {\n          name: 'gradientFill',\n          attributes: {},\n          children: []\n        };\n\n        this._fillNode.children.push(gradientFill);\n\n        xmlq.setAttributes(gradientFill, {\n          type: fill.gradientType === \"path\" ? \"path\" : undefined,\n          left: fill.left,\n          right: fill.right,\n          top: fill.top,\n          bottom: fill.bottom,\n          degree: fill.angle\n        });\n\n        _.forEach(fill.stops, function (fillStop, i) {\n          var stop = {\n            name: 'stop',\n            attributes: {\n              position: fillStop.position\n            },\n            children: []\n          };\n          gradientFill.children.push(stop);\n\n          _this3._setColor(stop, 'color', fillStop.color);\n        });\n\n        return;\n      } // Solid fill (really a pattern fill with a solid pattern type).\n\n\n      if (!_.isObject(fill)) fill = {\n        type: \"solid\",\n        color: fill\n      };else if (fill.hasOwnProperty('rgb') || fill.hasOwnProperty(\"theme\")) fill = {\n        color: fill\n      };\n      var patternFill = {\n        name: 'patternFill',\n        attributes: {\n          patternType: 'solid'\n        }\n      };\n\n      this._fillNode.children.push(patternFill);\n\n      this._setColor(patternFill, \"fgColor\", fill.color);\n    }\n  }, {\n    key: \"_getBorder\",\n    value: function _getBorder() {\n      var _this4 = this;\n\n      var result = {};\n      [\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(function (side) {\n        var sideNode = xmlq.findChild(_this4._borderNode, side);\n        var sideResult = {};\n        var style = xmlq.getChildAttribute(_this4._borderNode, side, 'style');\n        if (style) sideResult.style = style;\n\n        var color = _this4._getColor(sideNode, 'color');\n\n        if (color) sideResult.color = color;\n\n        if (side === \"diagonal\") {\n          var up = _this4._borderNode.attributes.diagonalUp;\n          var down = _this4._borderNode.attributes.diagonalDown;\n          var direction;\n          if (up && down) direction = \"both\";else if (up) direction = \"up\";else if (down) direction = \"down\";\n          if (direction) sideResult.direction = direction;\n        }\n\n        if (!_.isEmpty(sideResult)) result[side] = sideResult;\n      });\n      return result;\n    }\n  }, {\n    key: \"_setBorder\",\n    value: function _setBorder(settings) {\n      var _this5 = this;\n\n      _.forOwn(settings, function (setting, side) {\n        if (typeof setting === \"boolean\") {\n          setting = {\n            style: setting ? \"thin\" : null\n          };\n        } else if (typeof setting === \"string\") {\n          setting = {\n            style: setting\n          };\n        } else if (setting === null || setting === undefined) {\n          setting = {\n            style: null,\n            color: null,\n            direction: null\n          };\n        }\n\n        if (setting.hasOwnProperty(\"style\")) {\n          xmlq.setChildAttributes(_this5._borderNode, side, {\n            style: setting.style\n          });\n        }\n\n        if (setting.hasOwnProperty(\"color\")) {\n          var sideNode = xmlq.findChild(_this5._borderNode, side);\n\n          _this5._setColor(sideNode, \"color\", setting.color);\n        }\n\n        if (side === \"diagonal\") {\n          xmlq.setAttributes(_this5._borderNode, {\n            diagonalUp: setting.direction === \"up\" || setting.direction === \"both\" ? 1 : null,\n            diagonalDown: setting.direction === \"down\" || setting.direction === \"both\" ? 1 : null\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_get_border\",\n    value: function _get_border() {\n      return this._getBorder();\n    }\n  }, {\n    key: \"_set_border\",\n    value: function _set_border(settings) {\n      if (_.isObject(settings) && !settings.hasOwnProperty(\"style\") && !settings.hasOwnProperty(\"color\")) {\n        settings = _.defaults(settings, {\n          left: null,\n          right: null,\n          top: null,\n          bottom: null,\n          diagonal: null\n        });\n\n        this._setBorder(settings);\n      } else {\n        this._setBorder({\n          left: settings,\n          right: settings,\n          top: settings,\n          bottom: settings\n        });\n      }\n    }\n  }, {\n    key: \"_get_borderColor\",\n    value: function _get_borderColor() {\n      return _.mapValues(this._getBorder(), function (value) {\n        return value.color;\n      });\n    }\n  }, {\n    key: \"_set_borderColor\",\n    value: function _set_borderColor(color) {\n      if (_.isObject(color)) {\n        this._setBorder(_.mapValues(color, function (color) {\n          return {\n            color: color\n          };\n        }));\n      } else {\n        this._setBorder({\n          left: {\n            color: color\n          },\n          right: {\n            color: color\n          },\n          top: {\n            color: color\n          },\n          bottom: {\n            color: color\n          },\n          diagonal: {\n            color: color\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_get_borderStyle\",\n    value: function _get_borderStyle() {\n      return _.mapValues(this._getBorder(), function (value) {\n        return value.style;\n      });\n    }\n  }, {\n    key: \"_set_borderStyle\",\n    value: function _set_borderStyle(style) {\n      if (_.isObject(style)) {\n        this._setBorder(_.mapValues(style, function (style) {\n          return {\n            style: style\n          };\n        }));\n      } else {\n        this._setBorder({\n          left: {\n            style: style\n          },\n          right: {\n            style: style\n          },\n          top: {\n            style: style\n          },\n          bottom: {\n            style: style\n          }\n        });\n      }\n    }\n  }, {\n    key: \"_get_diagonalBorderDirection\",\n    value: function _get_diagonalBorderDirection() {\n      var border = this._getBorder().diagonal;\n\n      return border && border.direction;\n    }\n  }, {\n    key: \"_set_diagonalBorderDirection\",\n    value: function _set_diagonalBorderDirection(direction) {\n      this._setBorder({\n        diagonal: {\n          direction: direction\n        }\n      });\n    }\n  }, {\n    key: \"_get_numberFormat\",\n    value: function _get_numberFormat() {\n      var numFmtId = this._xfNode.attributes.numFmtId || 0;\n      return this._styleSheet.getNumberFormatCode(numFmtId);\n    }\n  }, {\n    key: \"_set_numberFormat\",\n    value: function _set_numberFormat(formatCode) {\n      this._xfNode.attributes.numFmtId = this._styleSheet.getNumberFormatId(formatCode);\n    }\n  }]);\n\n  return Style;\n}();\n\n[\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(function (side) {\n  Style.prototype[\"_get_\".concat(side, \"Border\")] = function () {\n    return this._getBorder()[side];\n  };\n\n  Style.prototype[\"_set_\".concat(side, \"Border\")] = function (settings) {\n    this._setBorder(_defineProperty({}, side, settings));\n  };\n\n  Style.prototype[\"_get_\".concat(side, \"BorderColor\")] = function () {\n    var border = this._getBorder()[side];\n\n    return border && border.color;\n  };\n\n  Style.prototype[\"_set_\".concat(side, \"BorderColor\")] = function (color) {\n    this._setBorder(_defineProperty({}, side, {\n      color: color\n    }));\n  };\n\n  Style.prototype[\"_get_\".concat(side, \"BorderStyle\")] = function () {\n    var border = this._getBorder()[side];\n\n    return border && border.style;\n  };\n\n  Style.prototype[\"_set_\".concat(side, \"BorderStyle\")] = function (style) {\n    this._setBorder(_defineProperty({}, side, {\n      style: style\n    }));\n  };\n}); // IE doesn't support function names so explicitly set it.\n\nif (!Style.name) Style.name = \"Style\";\nmodule.exports = Style;","map":{"version":3,"sources":["C:/Users/tzika/Desktop/Polymerlink-Front/polymerlink-2/node_modules/xlsx-populate/lib/Style.js"],"names":["ArgHandler","require","_","xmlq","colorIndexes","Style","styleSheet","id","xfNode","fontNode","fillNode","borderNode","_styleSheet","_id","_xfNode","_fontNode","_fillNode","_borderNode","case","name","getterName","Error","value","setterName","handle","arguments","node","child","findChild","attributes","color","hasOwnProperty","rgb","theme","indexed","tint","isEmpty","setChildAttributes","toUpperCase","removeChildIfEmpty","hasChild","bold","appendChildIfNotFound","removeChild","italic","uNode","val","underline","setAttributes","strikethrough","getChildAttribute","alignment","_getFontVerticalAlignment","subscript","_setFontVerticalAlignment","superscript","size","family","genericFamily","_getColor","_setColor","scheme","horizontal","justifyLastLine","indent","vertical","wrapText","shrinkToFit","readingOrder","textDirection","textRotation","_getTextRotation","_setTextRotation","patternFillNode","gradientFillNode","patternType","type","pattern","foreground","background","gradientType","fill","stops","map","children","stop","position","angle","degree","left","right","top","bottom","isNil","patternFill","push","gradientFill","undefined","forEach","fillStop","i","isObject","result","side","sideNode","sideResult","style","up","diagonalUp","down","diagonalDown","direction","settings","forOwn","setting","_getBorder","defaults","diagonal","_setBorder","mapValues","border","numFmtId","getNumberFormatCode","formatCode","getNumberFormatId","prototype","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/* eslint camelcase:off */\n\nconst ArgHandler = require(\"./ArgHandler\");\nconst _ = require(\"lodash\");\nconst xmlq = require(\"./xmlq\");\nconst colorIndexes = require(\"./colorIndexes\");\n\n/**\n * A style.\n * @ignore\n */\nclass Style {\n    /**\n     * Creates a new instance of _Style.\n     * @constructor\n     * @param {StyleSheet} styleSheet - The styleSheet.\n     * @param {number} id - The style ID.\n     * @param {{}} xfNode - The xf node.\n     * @param {{}} fontNode - The font node.\n     * @param {{}} fillNode - The fill node.\n     * @param {{}} borderNode - The border node.\n     */\n    constructor(styleSheet, id, xfNode, fontNode, fillNode, borderNode) {\n        this._styleSheet = styleSheet;\n        this._id = id;\n        this._xfNode = xfNode;\n        this._fontNode = fontNode;\n        this._fillNode = fillNode;\n        this._borderNode = borderNode;\n    }\n\n    /**\n     * Gets the style ID.\n     * @returns {number} The ID.\n     */\n    id() {\n        return this._id;\n    }\n\n    /**\n     * Gets or sets a style.\n     * @param {string} name - The style name.\n     * @param {*} [value] - The value to set.\n     * @returns {*|Style} The value if getting or the style if setting.\n     */\n    style() {\n        return new ArgHandler(\"_Style.style\")\n            .case('string', name => {\n                const getterName = `_get_${name}`;\n                if (!this[getterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n                return this[getterName]();\n            })\n            .case(['string', '*'], (name, value) => {\n                const setterName = `_set_${name}`;\n                if (!this[setterName]) throw new Error(`_Style.style: '${name}' is not a valid style`);\n                this[setterName](value);\n                return this;\n            })\n            .handle(arguments);\n    }\n\n    _getColor(node, name) {\n        const child = xmlq.findChild(node, name);\n        if (!child || !child.attributes) return;\n\n        const color = {};\n        if (child.attributes.hasOwnProperty('rgb')) color.rgb = child.attributes.rgb;\n        else if (child.attributes.hasOwnProperty('theme')) color.theme = child.attributes.theme;\n        else if (child.attributes.hasOwnProperty('indexed')) color.rgb = colorIndexes[child.attributes.indexed];\n\n        if (child.attributes.hasOwnProperty('tint')) color.tint = child.attributes.tint;\n\n        if (_.isEmpty(color)) return;\n\n        return color;\n    }\n\n    _setColor(node, name, color) {\n        if (typeof color === \"string\") color = { rgb: color };\n        else if (typeof color === \"number\") color = { theme: color };\n\n        xmlq.setChildAttributes(node, name, {\n            rgb: color && color.rgb && color.rgb.toUpperCase(),\n            indexed: null,\n            theme: color && color.theme,\n            tint: color && color.tint\n        });\n\n        xmlq.removeChildIfEmpty(node, 'color');\n    }\n\n    _get_bold() {\n        return xmlq.hasChild(this._fontNode, 'b');\n    }\n\n    _set_bold(bold) {\n        if (bold) xmlq.appendChildIfNotFound(this._fontNode, \"b\");\n        else xmlq.removeChild(this._fontNode, 'b');\n    }\n\n    _get_italic() {\n        return xmlq.hasChild(this._fontNode, 'i');\n    }\n\n    _set_italic(italic) {\n        if (italic) xmlq.appendChildIfNotFound(this._fontNode, \"i\");\n        else xmlq.removeChild(this._fontNode, 'i');\n    }\n\n    _get_underline() {\n        const uNode = xmlq.findChild(this._fontNode, 'u');\n        return uNode ? uNode.attributes.val || true : false;\n    }\n\n    _set_underline(underline) {\n        if (underline) {\n            const uNode = xmlq.appendChildIfNotFound(this._fontNode, \"u\");\n            const val = typeof underline === 'string' ? underline : null;\n            xmlq.setAttributes(uNode, { val });\n        } else {\n            xmlq.removeChild(this._fontNode, 'u');\n        }\n    }\n\n    _get_strikethrough() {\n        return xmlq.hasChild(this._fontNode, 'strike');\n    }\n\n    _set_strikethrough(strikethrough) {\n        if (strikethrough) xmlq.appendChildIfNotFound(this._fontNode, \"strike\");\n        else xmlq.removeChild(this._fontNode, 'strike');\n    }\n\n    _getFontVerticalAlignment() {\n        return xmlq.getChildAttribute(this._fontNode, 'vertAlign', \"val\");\n    }\n\n    _setFontVerticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._fontNode, 'vertAlign', { val: alignment });\n        xmlq.removeChildIfEmpty(this._fontNode, 'vertAlign');\n    }\n\n    _get_subscript() {\n        return this._getFontVerticalAlignment() === \"subscript\";\n    }\n\n    _set_subscript(subscript) {\n        this._setFontVerticalAlignment(subscript ? \"subscript\" : null);\n    }\n\n    _get_superscript() {\n        return this._getFontVerticalAlignment() === \"superscript\";\n    }\n\n    _set_superscript(superscript) {\n        this._setFontVerticalAlignment(superscript ? \"superscript\" : null);\n    }\n\n    _get_fontSize() {\n        return xmlq.getChildAttribute(this._fontNode, 'sz', \"val\");\n    }\n\n    _set_fontSize(size) {\n        xmlq.setChildAttributes(this._fontNode, 'sz', { val: size });\n        xmlq.removeChildIfEmpty(this._fontNode, 'sz');\n    }\n\n    _get_fontFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'name', \"val\");\n    }\n\n    _set_fontFamily(family) {\n        xmlq.setChildAttributes(this._fontNode, 'name', { val: family });\n        xmlq.removeChildIfEmpty(this._fontNode, 'name');\n    }\n\n    _get_fontGenericFamily() {\n        return xmlq.getChildAttribute(this._fontNode, 'family', \"val\");\n    }\n\n    _set_fontGenericFamily(genericFamily) {\n        xmlq.setChildAttributes(this._fontNode, 'family', { val: genericFamily });\n        xmlq.removeChildIfEmpty(this._fontNode, 'family');\n    }\n\n    _get_fontColor() {\n        return this._getColor(this._fontNode, \"color\");\n    }\n\n    _set_fontColor(color) {\n        this._setColor(this._fontNode, \"color\", color);\n    }\n\n    _get_fontScheme() {\n        // can be 'minor', 'major', 'none'\n        return xmlq.getChildAttribute(this._fontNode, 'scheme', \"val\");\n    }\n\n    _set_fontScheme(scheme) {\n        xmlq.setChildAttributes(this._fontNode, 'scheme', { val: scheme });\n        xmlq.removeChildIfEmpty(this._fontNode, 'scheme');\n    }\n\n    _get_horizontalAlignment() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"horizontal\");\n    }\n\n    _set_horizontalAlignment(alignment) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { horizontal: alignment });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_justifyLastLine() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"justifyLastLine\") === 1;\n    }\n\n    _set_justifyLastLine(justifyLastLine) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { justifyLastLine: justifyLastLine ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_indent() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"indent\");\n    }\n\n    _set_indent(indent) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { indent });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_verticalAlignment() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"vertical\");\n    }\n\n    _set_verticalAlignment(alignment) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { vertical: alignment });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_wrapText() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"wrapText\") === 1;\n    }\n\n    _set_wrapText(wrapText) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { wrapText: wrapText ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_shrinkToFit() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"shrinkToFit\") === 1;\n    }\n\n    _set_shrinkToFit(shrinkToFit) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { shrinkToFit: shrinkToFit ? 1 : null });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_textDirection() {\n        const readingOrder = xmlq.getChildAttribute(this._xfNode, 'alignment', \"readingOrder\");\n        if (readingOrder === 1) return \"left-to-right\";\n        if (readingOrder === 2) return \"right-to-left\";\n        return readingOrder;\n    }\n\n    _set_textDirection(textDirection) {\n        let readingOrder;\n        if (textDirection === \"left-to-right\") readingOrder = 1;\n        else if (textDirection === \"right-to-left\") readingOrder = 2;\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { readingOrder });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _getTextRotation() {\n        return xmlq.getChildAttribute(this._xfNode, 'alignment', \"textRotation\");\n    }\n\n    _setTextRotation(textRotation) {\n        xmlq.setChildAttributes(this._xfNode, 'alignment', { textRotation });\n        xmlq.removeChildIfEmpty(this._xfNode, 'alignment');\n    }\n\n    _get_textRotation() {\n        let textRotation = this._getTextRotation();\n\n        // Negative angles in Excel correspond to values > 90 in OOXML.\n        if (textRotation > 90) textRotation = 90 - textRotation;\n        return textRotation;\n    }\n\n    _set_textRotation(textRotation) {\n        // Negative angles in Excel correspond to values > 90 in OOXML.\n        if (textRotation < 0) textRotation = 90 - textRotation;\n        this._setTextRotation(textRotation);\n    }\n\n    _get_angleTextCounterclockwise() {\n        return this._getTextRotation() === 45;\n    }\n\n    _set_angleTextCounterclockwise(value) {\n        this._setTextRotation(value ? 45 : null);\n    }\n\n    _get_angleTextClockwise() {\n        return this._getTextRotation() === 135;\n    }\n\n    _set_angleTextClockwise(value) {\n        this._setTextRotation(value ? 135 : null);\n    }\n\n    _get_rotateTextUp() {\n        return this._getTextRotation() === 90;\n    }\n\n    _set_rotateTextUp(value) {\n        this._setTextRotation(value ? 90 : null);\n    }\n\n    _get_rotateTextDown() {\n        return this._getTextRotation() === 180;\n    }\n\n    _set_rotateTextDown(value) {\n        this._setTextRotation(value ? 180 : null);\n    }\n\n    _get_verticalText() {\n        return this._getTextRotation() === 255;\n    }\n\n    _set_verticalText(value) {\n        this._setTextRotation(value ? 255 : null);\n    }\n\n    _get_fill() {\n        const patternFillNode = xmlq.findChild(this._fillNode, 'patternFill');// jq.get(this._fillNode, \"patternFill[0]\");\n        const gradientFillNode = xmlq.findChild(this._fillNode, 'gradientFill');// jq.get(this._fillNode, \"gradientFill[0]\");\n        const patternType = patternFillNode && patternFillNode.attributes.patternType;// jq.get(patternFillNode, \"$.patternType\");\n\n        if (patternType === \"solid\") {\n            return {\n                type: \"solid\",\n                color: this._getColor(patternFillNode, \"fgColor\")\n            };\n        }\n\n        if (patternType) {\n            return {\n                type: \"pattern\",\n                pattern: patternType,\n                foreground: this._getColor(patternFillNode, \"fgColor\"),\n                background: this._getColor(patternFillNode, \"bgColor\")\n            };\n        }\n\n        if (gradientFillNode) {\n            const gradientType = gradientFillNode.attributes.type || \"linear\";\n            const fill = {\n                type: \"gradient\",\n                gradientType,\n                stops: _.map(gradientFillNode.children, stop => ({\n                    position: stop.attributes.position,\n                    color: this._getColor(stop, \"color\")\n                }))\n            };\n\n            if (gradientType === \"linear\") {\n                fill.angle = gradientFillNode.attributes.degree;\n            } else {\n                fill.left = gradientFillNode.attributes.left;\n                fill.right = gradientFillNode.attributes.right;\n                fill.top = gradientFillNode.attributes.top;\n                fill.bottom = gradientFillNode.attributes.bottom;\n            }\n\n            return fill;\n        }\n    }\n\n    _set_fill(fill) {\n        this._fillNode.children = [];\n\n        // No fill\n        if (_.isNil(fill)) return;\n\n        // Pattern fill\n        if (fill.type === \"pattern\") {\n            const patternFill = {\n                name: 'patternFill',\n                attributes: { patternType: fill.pattern },\n                children: []\n            };\n            this._fillNode.children.push(patternFill);\n            this._setColor(patternFill, \"fgColor\", fill.foreground);\n            this._setColor(patternFill, \"bgColor\", fill.background);\n            return;\n        }\n\n        // Gradient fill\n        if (fill.type === \"gradient\") {\n            const gradientFill = { name: 'gradientFill', attributes: {}, children: [] };\n            this._fillNode.children.push(gradientFill);\n            xmlq.setAttributes(gradientFill, {\n                type: fill.gradientType === \"path\" ? \"path\" : undefined,\n                left: fill.left,\n                right: fill.right,\n                top: fill.top,\n                bottom: fill.bottom,\n                degree: fill.angle\n            });\n\n            _.forEach(fill.stops, (fillStop, i) => {\n                const stop = {\n                    name: 'stop',\n                    attributes: { position: fillStop.position },\n                    children: []\n                };\n                gradientFill.children.push(stop);\n                this._setColor(stop, 'color', fillStop.color);\n            });\n\n            return;\n        }\n\n        // Solid fill (really a pattern fill with a solid pattern type).\n        if (!_.isObject(fill)) fill = { type: \"solid\", color: fill };\n        else if (fill.hasOwnProperty('rgb') || fill.hasOwnProperty(\"theme\")) fill = { color: fill };\n\n        const patternFill = {\n            name: 'patternFill',\n            attributes: { patternType: 'solid' }\n        };\n        this._fillNode.children.push(patternFill);\n        this._setColor(patternFill, \"fgColor\", fill.color);\n    }\n\n    _getBorder() {\n        const result = {};\n        [\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n            const sideNode = xmlq.findChild(this._borderNode, side);\n            const sideResult = {};\n\n            const style = xmlq.getChildAttribute(this._borderNode, side, 'style');\n            if (style) sideResult.style = style;\n            const color = this._getColor(sideNode, 'color');\n            if (color) sideResult.color = color;\n\n            if (side === \"diagonal\") {\n                const up = this._borderNode.attributes.diagonalUp;\n                const down = this._borderNode.attributes.diagonalDown;\n                let direction;\n                if (up && down) direction = \"both\";\n                else if (up) direction = \"up\";\n                else if (down) direction = \"down\";\n                if (direction) sideResult.direction = direction;\n            }\n\n            if (!_.isEmpty(sideResult)) result[side] = sideResult;\n        });\n\n        return result;\n    }\n\n    _setBorder(settings) {\n        _.forOwn(settings, (setting, side) => {\n            if (typeof setting === \"boolean\") {\n                setting = { style: setting ? \"thin\" : null };\n            } else if (typeof setting === \"string\") {\n                setting = { style: setting };\n            } else if (setting === null || setting === undefined) {\n                setting = { style: null, color: null, direction: null };\n            }\n\n            if (setting.hasOwnProperty(\"style\")) {\n                xmlq.setChildAttributes(this._borderNode, side, { style: setting.style });\n            }\n\n            if (setting.hasOwnProperty(\"color\")) {\n                const sideNode = xmlq.findChild(this._borderNode, side);\n                this._setColor(sideNode, \"color\", setting.color);\n            }\n\n            if (side === \"diagonal\") {\n                xmlq.setAttributes(this._borderNode, {\n                    diagonalUp: setting.direction === \"up\" || setting.direction === \"both\" ? 1 : null,\n                    diagonalDown: setting.direction === \"down\" || setting.direction === \"both\" ? 1 : null\n                });\n            }\n        });\n    }\n\n    _get_border() {\n        return this._getBorder();\n    }\n\n    _set_border(settings) {\n        if (_.isObject(settings) && !settings.hasOwnProperty(\"style\") && !settings.hasOwnProperty(\"color\")) {\n            settings = _.defaults(settings, {\n                left: null,\n                right: null,\n                top: null,\n                bottom: null,\n                diagonal: null\n            });\n            this._setBorder(settings);\n        } else {\n            this._setBorder({\n                left: settings,\n                right: settings,\n                top: settings,\n                bottom: settings\n            });\n        }\n    }\n\n    _get_borderColor() {\n        return _.mapValues(this._getBorder(), value => value.color);\n    }\n\n    _set_borderColor(color) {\n        if (_.isObject(color)) {\n            this._setBorder(_.mapValues(color, color => ({ color })));\n        } else {\n            this._setBorder({\n                left: { color },\n                right: { color },\n                top: { color },\n                bottom: { color },\n                diagonal: { color }\n            });\n        }\n    }\n\n    _get_borderStyle() {\n        return _.mapValues(this._getBorder(), value => value.style);\n    }\n\n    _set_borderStyle(style) {\n        if (_.isObject(style)) {\n            this._setBorder(_.mapValues(style, style => ({ style })));\n        } else {\n            this._setBorder({\n                left: { style },\n                right: { style },\n                top: { style },\n                bottom: { style }\n            });\n        }\n    }\n\n    _get_diagonalBorderDirection() {\n        const border = this._getBorder().diagonal;\n        return border && border.direction;\n    }\n\n    _set_diagonalBorderDirection(direction) {\n        this._setBorder({ diagonal: { direction } });\n    }\n\n    _get_numberFormat() {\n        const numFmtId = this._xfNode.attributes.numFmtId || 0;\n        return this._styleSheet.getNumberFormatCode(numFmtId);\n    }\n\n    _set_numberFormat(formatCode) {\n        this._xfNode.attributes.numFmtId = this._styleSheet.getNumberFormatId(formatCode);\n    }\n}\n\n[\"left\", \"right\", \"top\", \"bottom\", \"diagonal\"].forEach(side => {\n    Style.prototype[`_get_${side}Border`] = function () {\n        return this._getBorder()[side];\n    };\n\n    Style.prototype[`_set_${side}Border`] = function (settings) {\n        this._setBorder({ [side]: settings });\n    };\n\n    Style.prototype[`_get_${side}BorderColor`] = function () {\n        const border = this._getBorder()[side];\n        return border && border.color;\n    };\n\n    Style.prototype[`_set_${side}BorderColor`] = function (color) {\n        this._setBorder({ [side]: { color } });\n    };\n\n    Style.prototype[`_get_${side}BorderStyle`] = function () {\n        const border = this._getBorder()[side];\n        return border && border.style;\n    };\n\n    Style.prototype[`_set_${side}BorderStyle`] = function (style) {\n        this._setBorder({ [side]: { style } });\n    };\n});\n\n// IE doesn't support function names so explicitly set it.\nif (!Style.name) Style.name = \"Style\";\n\nmodule.exports = Style;\n"]},"metadata":{},"sourceType":"script"}