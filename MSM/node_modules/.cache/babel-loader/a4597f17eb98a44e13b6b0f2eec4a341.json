{"ast":null,"code":"\"use strict\";\n\nconst _ = require(\"lodash\");\n/**\n * The shared strings table.\n * @ignore\n */\n\n\nclass SharedStrings {\n  /**\n   * Constructs a new instance of _SharedStrings.\n   * @param {{}} node - The node.\n   */\n  constructor(node) {\n    this._stringArray = [];\n    this._indexMap = {};\n\n    this._init(node);\n\n    this._cacheExistingSharedStrings();\n  }\n  /**\n   * Gets the index for a string\n   * @param {string|Array.<{}>} string - The string or rich text array.\n   * @returns {number} The index\n   */\n\n\n  getIndexForString(string) {\n    // If the string is found in the cache, return the index.\n    const key = _.isArray(string) ? JSON.stringify(string) : string;\n    let index = this._indexMap[key];\n    if (index >= 0) return index; // Otherwise, add it to the caches.\n\n    index = this._stringArray.length;\n\n    this._stringArray.push(string);\n\n    this._indexMap[key] = index; // Append a new si node.\n\n    this._node.children.push({\n      name: \"si\",\n      children: _.isArray(string) ? string : [{\n        name: \"t\",\n        attributes: {\n          'xml:space': \"preserve\"\n        },\n        children: [string]\n      }]\n    });\n\n    return index;\n  }\n  /**\n   * Get the string for a given index\n   * @param {number} index - The index\n   * @returns {string} The string\n   */\n\n\n  getStringByIndex(index) {\n    return this._stringArray[index];\n  }\n  /**\n   * Convert the collection to an XML object.\n   * @returns {{}} The XML object.\n   */\n\n\n  toXml() {\n    return this._node;\n  }\n  /**\n   * Store any existing values in the caches.\n   * @private\n   * @returns {undefined}\n   */\n\n\n  _cacheExistingSharedStrings() {\n    this._node.children.forEach((node, i) => {\n      const content = node.children[0];\n\n      if (content.name === \"t\") {\n        const string = content.children[0];\n\n        this._stringArray.push(string);\n\n        this._indexMap[string] = i;\n      } else {\n        // TODO: Properly support rich text nodes in the future. For now just store the object as a placeholder.\n        this._stringArray.push(node.children);\n\n        this._indexMap[JSON.stringify(node.children)] = i;\n      }\n    });\n  }\n  /**\n   * Initialize the node.\n   * @param {{}} [node] - The shared strings node.\n   * @private\n   * @returns {undefined}\n   */\n\n\n  _init(node) {\n    if (!node) node = {\n      name: \"sst\",\n      attributes: {\n        xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n      },\n      children: []\n    };\n    this._node = node;\n    delete this._node.attributes.count;\n    delete this._node.attributes.uniqueCount;\n  }\n\n}\n\nmodule.exports = SharedStrings;\n/*\nxl/sharedStrings.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"13\" uniqueCount=\"4\">\n\t<si>\n\t\t<t>Foo</t>\n\t</si>\n\t<si>\n\t\t<t>Bar</t>\n\t</si>\n\t<si>\n\t\t<t>Goo</t>\n\t</si>\n\t<si>\n\t\t<r>\n\t\t\t<t>s</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<b/>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>d;</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>lfk;l</t>\n\t\t</r>\n\t</si>\n</sst>\n*/","map":{"version":3,"sources":["C:/Users/tzika/Desktop/MSM-Front/MSM/node_modules/xlsx-populate/lib/SharedStrings.js"],"names":["_","require","SharedStrings","constructor","node","_stringArray","_indexMap","_init","_cacheExistingSharedStrings","getIndexForString","string","key","isArray","JSON","stringify","index","length","push","_node","children","name","attributes","getStringByIndex","toXml","forEach","i","content","xmlns","count","uniqueCount","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst _ = require(\"lodash\");\n\n/**\n * The shared strings table.\n * @ignore\n */\nclass SharedStrings {\n    /**\n     * Constructs a new instance of _SharedStrings.\n     * @param {{}} node - The node.\n     */\n    constructor(node) {\n        this._stringArray = [];\n        this._indexMap = {};\n\n        this._init(node);\n        this._cacheExistingSharedStrings();\n    }\n\n    /**\n     * Gets the index for a string\n     * @param {string|Array.<{}>} string - The string or rich text array.\n     * @returns {number} The index\n     */\n    getIndexForString(string) {\n        // If the string is found in the cache, return the index.\n        const key = _.isArray(string) ? JSON.stringify(string) : string;\n        let index = this._indexMap[key];\n        if (index >= 0) return index;\n\n        // Otherwise, add it to the caches.\n        index = this._stringArray.length;\n        this._stringArray.push(string);\n        this._indexMap[key] = index;\n\n        // Append a new si node.\n        this._node.children.push({\n            name: \"si\",\n            children: _.isArray(string) ? string : [\n                {\n                    name: \"t\",\n                    attributes: { 'xml:space': \"preserve\" },\n                    children: [string]\n                }\n            ]\n        });\n\n        return index;\n    }\n\n    /**\n     * Get the string for a given index\n     * @param {number} index - The index\n     * @returns {string} The string\n     */\n    getStringByIndex(index) {\n        return this._stringArray[index];\n    }\n\n    /**\n     * Convert the collection to an XML object.\n     * @returns {{}} The XML object.\n     */\n    toXml() {\n        return this._node;\n    }\n\n    /**\n     * Store any existing values in the caches.\n     * @private\n     * @returns {undefined}\n     */\n    _cacheExistingSharedStrings() {\n        this._node.children.forEach((node, i) => {\n            const content = node.children[0];\n            if (content.name === \"t\") {\n                const string = content.children[0];\n                this._stringArray.push(string);\n                this._indexMap[string] = i;\n            } else {\n                // TODO: Properly support rich text nodes in the future. For now just store the object as a placeholder.\n                this._stringArray.push(node.children);\n                this._indexMap[JSON.stringify(node.children)] = i;\n            }\n        });\n    }\n\n    /**\n     * Initialize the node.\n     * @param {{}} [node] - The shared strings node.\n     * @private\n     * @returns {undefined}\n     */\n    _init(node) {\n        if (!node) node = {\n            name: \"sst\",\n            attributes: {\n                xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n            },\n            children: []\n        };\n\n        this._node = node;\n\n        delete this._node.attributes.count;\n        delete this._node.attributes.uniqueCount;\n    }\n}\n\nmodule.exports = SharedStrings;\n\n/*\nxl/sharedStrings.xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"13\" uniqueCount=\"4\">\n\t<si>\n\t\t<t>Foo</t>\n\t</si>\n\t<si>\n\t\t<t>Bar</t>\n\t</si>\n\t<si>\n\t\t<t>Goo</t>\n\t</si>\n\t<si>\n\t\t<r>\n\t\t\t<t>s</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<b/>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>d;</t>\n\t\t</r><r>\n\t\t\t<rPr>\n\t\t\t\t<sz val=\"11\"/>\n\t\t\t\t<color theme=\"1\"/>\n\t\t\t\t<rFont val=\"Calibri\"/>\n\t\t\t\t<family val=\"2\"/>\n\t\t\t\t<scheme val=\"minor\"/>\n\t\t\t</rPr><t>lfk;l</t>\n\t\t</r>\n\t</si>\n</sst>\n*/\n"]},"metadata":{},"sourceType":"script"}